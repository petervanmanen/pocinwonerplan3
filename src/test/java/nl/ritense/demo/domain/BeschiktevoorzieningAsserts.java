package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BeschiktevoorzieningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschiktevoorzieningAllPropertiesEquals(Beschiktevoorziening expected, Beschiktevoorziening actual) {
        assertBeschiktevoorzieningAutoGeneratedPropertiesEquals(expected, actual);
        assertBeschiktevoorzieningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschiktevoorzieningAllUpdatablePropertiesEquals(Beschiktevoorziening expected, Beschiktevoorziening actual) {
        assertBeschiktevoorzieningUpdatableFieldsEquals(expected, actual);
        assertBeschiktevoorzieningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschiktevoorzieningAutoGeneratedPropertiesEquals(Beschiktevoorziening expected, Beschiktevoorziening actual) {
        assertThat(expected)
            .as("Verify Beschiktevoorziening auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschiktevoorzieningUpdatableFieldsEquals(Beschiktevoorziening expected, Beschiktevoorziening actual) {
        assertThat(expected)
            .as("Verify Beschiktevoorziening relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(
                e ->
                    assertThat(e.getDatumeindeoorspronkelijk())
                        .as("check datumeindeoorspronkelijk")
                        .isEqualTo(actual.getDatumeindeoorspronkelijk())
            )
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getEenheid()).as("check eenheid").isEqualTo(actual.getEenheid()))
            .satisfies(e -> assertThat(e.getFrequentie()).as("check frequentie").isEqualTo(actual.getFrequentie()))
            .satisfies(e -> assertThat(e.getLeveringsvorm()).as("check leveringsvorm").isEqualTo(actual.getLeveringsvorm()))
            .satisfies(e -> assertThat(e.getOmvang()).as("check omvang").isEqualTo(actual.getOmvang()))
            .satisfies(e -> assertThat(e.getRedeneinde()).as("check redeneinde").isEqualTo(actual.getRedeneinde()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getWet()).as("check wet").isEqualTo(actual.getWet()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschiktevoorzieningUpdatableRelationshipsEquals(Beschiktevoorziening expected, Beschiktevoorziening actual) {}
}
