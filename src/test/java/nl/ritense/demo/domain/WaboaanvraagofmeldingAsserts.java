package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class WaboaanvraagofmeldingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaboaanvraagofmeldingAllPropertiesEquals(Waboaanvraagofmelding expected, Waboaanvraagofmelding actual) {
        assertWaboaanvraagofmeldingAutoGeneratedPropertiesEquals(expected, actual);
        assertWaboaanvraagofmeldingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaboaanvraagofmeldingAllUpdatablePropertiesEquals(
        Waboaanvraagofmelding expected,
        Waboaanvraagofmelding actual
    ) {
        assertWaboaanvraagofmeldingUpdatableFieldsEquals(expected, actual);
        assertWaboaanvraagofmeldingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaboaanvraagofmeldingAutoGeneratedPropertiesEquals(
        Waboaanvraagofmelding expected,
        Waboaanvraagofmelding actual
    ) {
        assertThat(expected)
            .as("Verify Waboaanvraagofmelding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaboaanvraagofmeldingUpdatableFieldsEquals(Waboaanvraagofmelding expected, Waboaanvraagofmelding actual) {
        assertThat(expected)
            .as("Verify Waboaanvraagofmelding relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getBouwkosten())
                        .as("check bouwkosten")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBouwkosten())
            )
            .satisfies(e -> assertThat(e.getOlonummer()).as("check olonummer").isEqualTo(actual.getOlonummer()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e ->
                    assertThat(e.getProjectkosten())
                        .as("check projectkosten")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getProjectkosten())
            )
            .satisfies(e -> assertThat(e.getRegistratienummer()).as("check registratienummer").isEqualTo(actual.getRegistratienummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaboaanvraagofmeldingUpdatableRelationshipsEquals(
        Waboaanvraagofmelding expected,
        Waboaanvraagofmelding actual
    ) {}
}
