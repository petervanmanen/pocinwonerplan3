package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MulderfeitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMulderfeitAllPropertiesEquals(Mulderfeit expected, Mulderfeit actual) {
        assertMulderfeitAutoGeneratedPropertiesEquals(expected, actual);
        assertMulderfeitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMulderfeitAllUpdatablePropertiesEquals(Mulderfeit expected, Mulderfeit actual) {
        assertMulderfeitUpdatableFieldsEquals(expected, actual);
        assertMulderfeitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMulderfeitAutoGeneratedPropertiesEquals(Mulderfeit expected, Mulderfeit actual) {
        assertThat(expected)
            .as("Verify Mulderfeit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMulderfeitUpdatableFieldsEquals(Mulderfeit expected, Mulderfeit actual) {
        assertThat(expected)
            .as("Verify Mulderfeit relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getBezwaarafgehandeld()).as("check bezwaarafgehandeld").isEqualTo(actual.getBezwaarafgehandeld()))
            .satisfies(e -> assertThat(e.getBezwaaringetrokken()).as("check bezwaaringetrokken").isEqualTo(actual.getBezwaaringetrokken()))
            .satisfies(e -> assertThat(e.getBezwaartoegewezen()).as("check bezwaartoegewezen").isEqualTo(actual.getBezwaartoegewezen()))
            .satisfies(e -> assertThat(e.getBonnummer()).as("check bonnummer").isEqualTo(actual.getBonnummer()))
            .satisfies(e -> assertThat(e.getDatumbetaling()).as("check datumbetaling").isEqualTo(actual.getDatumbetaling()))
            .satisfies(e -> assertThat(e.getDatumbezwaar()).as("check datumbezwaar").isEqualTo(actual.getDatumbezwaar()))
            .satisfies(e -> assertThat(e.getDatumgeseponeerd()).as("check datumgeseponeerd").isEqualTo(actual.getDatumgeseponeerd()))
            .satisfies(e -> assertThat(e.getDatumindiening()).as("check datumindiening").isEqualTo(actual.getDatumindiening()))
            .satisfies(e -> assertThat(e.getDienstcd()).as("check dienstcd").isEqualTo(actual.getDienstcd()))
            .satisfies(e -> assertThat(e.getOrganisatie()).as("check organisatie").isEqualTo(actual.getOrganisatie()))
            .satisfies(e -> assertThat(e.getOvertreding()).as("check overtreding").isEqualTo(actual.getOvertreding()))
            .satisfies(
                e ->
                    assertThat(e.getParkeertarief())
                        .as("check parkeertarief")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getParkeertarief())
            )
            .satisfies(e -> assertThat(e.getRedenseponeren()).as("check redenseponeren").isEqualTo(actual.getRedenseponeren()))
            .satisfies(e -> assertThat(e.getVorderingnummer()).as("check vorderingnummer").isEqualTo(actual.getVorderingnummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMulderfeitUpdatableRelationshipsEquals(Mulderfeit expected, Mulderfeit actual) {}
}
