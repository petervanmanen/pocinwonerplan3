package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FactuurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurAllPropertiesEquals(Factuur expected, Factuur actual) {
        assertFactuurAutoGeneratedPropertiesEquals(expected, actual);
        assertFactuurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurAllUpdatablePropertiesEquals(Factuur expected, Factuur actual) {
        assertFactuurUpdatableFieldsEquals(expected, actual);
        assertFactuurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurAutoGeneratedPropertiesEquals(Factuur expected, Factuur actual) {
        assertThat(expected)
            .as("Verify Factuur auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurUpdatableFieldsEquals(Factuur expected, Factuur actual) {
        assertThat(expected)
            .as("Verify Factuur relevant properties")
            .satisfies(e -> assertThat(e.getBetaalbaarper()).as("check betaalbaarper").isEqualTo(actual.getBetaalbaarper()))
            .satisfies(e -> assertThat(e.getBetaaltermijn()).as("check betaaltermijn").isEqualTo(actual.getBetaaltermijn()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDatumfactuur()).as("check datumfactuur").isEqualTo(actual.getDatumfactuur()))
            .satisfies(
                e ->
                    assertThat(e.getFactuurbedragbtw())
                        .as("check factuurbedragbtw")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFactuurbedragbtw())
            )
            .satisfies(
                e ->
                    assertThat(e.getFactuurbedragexclusiefbtw())
                        .as("check factuurbedragexclusiefbtw")
                        .isEqualTo(actual.getFactuurbedragexclusiefbtw())
            )
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurUpdatableRelationshipsEquals(Factuur expected, Factuur actual) {
        assertThat(expected)
            .as("Verify Factuur relationships")
            .satisfies(
                e ->
                    assertThat(e.getSchrijftopKostenplaats())
                        .as("check schrijftopKostenplaats")
                        .isEqualTo(actual.getSchrijftopKostenplaats())
            )
            .satisfies(
                e -> assertThat(e.getGedektviaInkooporder()).as("check gedektviaInkooporder").isEqualTo(actual.getGedektviaInkooporder())
            )
            .satisfies(
                e -> assertThat(e.getCrediteurLeverancier()).as("check crediteurLeverancier").isEqualTo(actual.getCrediteurLeverancier())
            )
            .satisfies(e -> assertThat(e.getHeeftDebiteur()).as("check heeftDebiteur").isEqualTo(actual.getHeeftDebiteur()));
    }
}
