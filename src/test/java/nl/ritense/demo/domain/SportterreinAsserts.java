package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SportterreinAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportterreinAllPropertiesEquals(Sportterrein expected, Sportterrein actual) {
        assertSportterreinAutoGeneratedPropertiesEquals(expected, actual);
        assertSportterreinAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportterreinAllUpdatablePropertiesEquals(Sportterrein expected, Sportterrein actual) {
        assertSportterreinUpdatableFieldsEquals(expected, actual);
        assertSportterreinUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportterreinAutoGeneratedPropertiesEquals(Sportterrein expected, Sportterrein actual) {
        assertThat(expected)
            .as("Verify Sportterrein auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportterreinUpdatableFieldsEquals(Sportterrein expected, Sportterrein actual) {
        assertThat(expected)
            .as("Verify Sportterrein relevant properties")
            .satisfies(e -> assertThat(e.getDrainage()).as("check drainage").isEqualTo(actual.getDrainage()))
            .satisfies(e -> assertThat(e.getGebruiksvorm()).as("check gebruiksvorm").isEqualTo(actual.getGebruiksvorm()))
            .satisfies(e -> assertThat(e.getSportcomplex()).as("check sportcomplex").isEqualTo(actual.getSportcomplex()))
            .satisfies(
                e -> assertThat(e.getSportterreintypesport()).as("check sportterreintypesport").isEqualTo(actual.getSportterreintypesport())
            )
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()))
            .satisfies(e -> assertThat(e.getVeldnummer()).as("check veldnummer").isEqualTo(actual.getVeldnummer()))
            .satisfies(e -> assertThat(e.getVerlicht()).as("check verlicht").isEqualTo(actual.getVerlicht()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportterreinUpdatableRelationshipsEquals(Sportterrein expected, Sportterrein actual) {}
}
