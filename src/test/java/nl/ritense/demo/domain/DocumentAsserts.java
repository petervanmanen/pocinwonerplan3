package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DocumentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentAllPropertiesEquals(Document expected, Document actual) {
        assertDocumentAutoGeneratedPropertiesEquals(expected, actual);
        assertDocumentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentAllUpdatablePropertiesEquals(Document expected, Document actual) {
        assertDocumentUpdatableFieldsEquals(expected, actual);
        assertDocumentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentAutoGeneratedPropertiesEquals(Document expected, Document actual) {
        assertThat(expected)
            .as("Verify Document auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentUpdatableFieldsEquals(Document expected, Document actual) {
        assertThat(expected)
            .as("Verify Document relevant properties")
            .satisfies(
                e -> assertThat(e.getCocumentbeschrijving()).as("check cocumentbeschrijving").isEqualTo(actual.getCocumentbeschrijving())
            )
            .satisfies(
                e -> assertThat(e.getDatumcreatiedocument()).as("check datumcreatiedocument").isEqualTo(actual.getDatumcreatiedocument())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumontvangstdocument())
                        .as("check datumontvangstdocument")
                        .isEqualTo(actual.getDatumontvangstdocument())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumverzendingdocument())
                        .as("check datumverzendingdocument")
                        .isEqualTo(actual.getDatumverzendingdocument())
            )
            .satisfies(e -> assertThat(e.getDocumentauteur()).as("check documentauteur").isEqualTo(actual.getDocumentauteur()))
            .satisfies(
                e -> assertThat(e.getDocumentidentificatie()).as("check documentidentificatie").isEqualTo(actual.getDocumentidentificatie())
            )
            .satisfies(e -> assertThat(e.getDocumenttitel()).as("check documenttitel").isEqualTo(actual.getDocumenttitel()))
            .satisfies(
                e ->
                    assertThat(e.getVertrouwelijkaanduiding())
                        .as("check vertrouwelijkaanduiding")
                        .isEqualTo(actual.getVertrouwelijkaanduiding())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDocumentUpdatableRelationshipsEquals(Document expected, Document actual) {
        assertThat(expected)
            .as("Verify Document relationships")
            .satisfies(
                e ->
                    assertThat(e.getHeeftkenmerkIdentificatiekenmerk())
                        .as("check heeftkenmerkIdentificatiekenmerk")
                        .isEqualTo(actual.getHeeftkenmerkIdentificatiekenmerk())
            )
            .satisfies(e -> assertThat(e.getIsvanDocumenttype()).as("check isvanDocumenttype").isEqualTo(actual.getIsvanDocumenttype()))
            .satisfies(
                e ->
                    assertThat(e.getInspectierapportBinnenlocatie())
                        .as("check inspectierapportBinnenlocatie")
                        .isEqualTo(actual.getInspectierapportBinnenlocatie())
            )
            .satisfies(
                e -> assertThat(e.getHeeftRapportagemoment()).as("check heeftRapportagemoment").isEqualTo(actual.getHeeftRapportagemoment())
            )
            .satisfies(
                e ->
                    assertThat(e.getHeeftdocumentenApplicaties())
                        .as("check heeftdocumentenApplicaties")
                        .isEqualTo(actual.getHeeftdocumentenApplicaties())
            )
            .satisfies(
                e ->
                    assertThat(e.getKanvastgelegdzijnalsBesluits())
                        .as("check kanvastgelegdzijnalsBesluits")
                        .isEqualTo(actual.getKanvastgelegdzijnalsBesluits())
            )
            .satisfies(e -> assertThat(e.getKentZaaks()).as("check kentZaaks").isEqualTo(actual.getKentZaaks()));
    }
}
