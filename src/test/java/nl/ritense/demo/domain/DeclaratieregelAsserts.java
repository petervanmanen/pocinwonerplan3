package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DeclaratieregelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieregelAllPropertiesEquals(Declaratieregel expected, Declaratieregel actual) {
        assertDeclaratieregelAutoGeneratedPropertiesEquals(expected, actual);
        assertDeclaratieregelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieregelAllUpdatablePropertiesEquals(Declaratieregel expected, Declaratieregel actual) {
        assertDeclaratieregelUpdatableFieldsEquals(expected, actual);
        assertDeclaratieregelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieregelAutoGeneratedPropertiesEquals(Declaratieregel expected, Declaratieregel actual) {
        assertThat(expected)
            .as("Verify Declaratieregel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieregelUpdatableFieldsEquals(Declaratieregel expected, Declaratieregel actual) {
        assertThat(expected)
            .as("Verify Declaratieregel relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieregelUpdatableRelationshipsEquals(Declaratieregel expected, Declaratieregel actual) {
        assertThat(expected)
            .as("Verify Declaratieregel relationships")
            .satisfies(e -> assertThat(e.getIsvoorBeschikking()).as("check isvoorBeschikking").isEqualTo(actual.getIsvoorBeschikking()))
            .satisfies(e -> assertThat(e.getBetreftClient()).as("check betreftClient").isEqualTo(actual.getBetreftClient()))
            .satisfies(
                e -> assertThat(e.getValtbinnenDeclaratie()).as("check valtbinnenDeclaratie").isEqualTo(actual.getValtbinnenDeclaratie())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsopbasisvanToewijzing())
                        .as("check isopbasisvanToewijzing")
                        .isEqualTo(actual.getIsopbasisvanToewijzing())
            );
    }
}
