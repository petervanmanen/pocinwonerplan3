package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GeboorteingeschrevenpersoonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeboorteingeschrevenpersoonAllPropertiesEquals(
        Geboorteingeschrevenpersoon expected,
        Geboorteingeschrevenpersoon actual
    ) {
        assertGeboorteingeschrevenpersoonAutoGeneratedPropertiesEquals(expected, actual);
        assertGeboorteingeschrevenpersoonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeboorteingeschrevenpersoonAllUpdatablePropertiesEquals(
        Geboorteingeschrevenpersoon expected,
        Geboorteingeschrevenpersoon actual
    ) {
        assertGeboorteingeschrevenpersoonUpdatableFieldsEquals(expected, actual);
        assertGeboorteingeschrevenpersoonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeboorteingeschrevenpersoonAutoGeneratedPropertiesEquals(
        Geboorteingeschrevenpersoon expected,
        Geboorteingeschrevenpersoon actual
    ) {
        assertThat(expected)
            .as("Verify Geboorteingeschrevenpersoon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeboorteingeschrevenpersoonUpdatableFieldsEquals(
        Geboorteingeschrevenpersoon expected,
        Geboorteingeschrevenpersoon actual
    ) {
        assertThat(expected)
            .as("Verify Geboorteingeschrevenpersoon relevant properties")
            .satisfies(e -> assertThat(e.getDatumgeboorte()).as("check datumgeboorte").isEqualTo(actual.getDatumgeboorte()))
            .satisfies(e -> assertThat(e.getGeboorteland()).as("check geboorteland").isEqualTo(actual.getGeboorteland()))
            .satisfies(e -> assertThat(e.getGeboorteplaats()).as("check geboorteplaats").isEqualTo(actual.getGeboorteplaats()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeboorteingeschrevenpersoonUpdatableRelationshipsEquals(
        Geboorteingeschrevenpersoon expected,
        Geboorteingeschrevenpersoon actual
    ) {}
}
