package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TaakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaakAllPropertiesEquals(Taak expected, Taak actual) {
        assertTaakAutoGeneratedPropertiesEquals(expected, actual);
        assertTaakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaakAllUpdatablePropertiesEquals(Taak expected, Taak actual) {
        assertTaakUpdatableFieldsEquals(expected, actual);
        assertTaakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaakAutoGeneratedPropertiesEquals(Taak expected, Taak actual) {
        assertThat(expected)
            .as("Verify Taak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaakUpdatableFieldsEquals(Taak expected, Taak actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTaakUpdatableRelationshipsEquals(Taak expected, Taak actual) {
        assertThat(expected)
            .as("Verify Taak relationships")
            .satisfies(
                e ->
                    assertThat(e.getProjectleiderRechtspersoon())
                        .as("check projectleiderRechtspersoon")
                        .isEqualTo(actual.getProjectleiderRechtspersoon())
            )
            .satisfies(e -> assertThat(e.getHeeftSubsidie()).as("check heeftSubsidie").isEqualTo(actual.getHeeftSubsidie()));
    }
}
