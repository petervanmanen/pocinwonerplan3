package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GroenobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroenobjectAllPropertiesEquals(Groenobject expected, Groenobject actual) {
        assertGroenobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertGroenobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroenobjectAllUpdatablePropertiesEquals(Groenobject expected, Groenobject actual) {
        assertGroenobjectUpdatableFieldsEquals(expected, actual);
        assertGroenobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroenobjectAutoGeneratedPropertiesEquals(Groenobject expected, Groenobject actual) {
        assertThat(expected)
            .as("Verify Groenobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroenobjectUpdatableFieldsEquals(Groenobject expected, Groenobject actual) {
        assertThat(expected)
            .as("Verify Groenobject relevant properties")
            .satisfies(e -> assertThat(e.getAantalobstakels()).as("check aantalobstakels").isEqualTo(actual.getAantalobstakels()))
            .satisfies(e -> assertThat(e.getAantalzijden()).as("check aantalzijden").isEqualTo(actual.getAantalzijden()))
            .satisfies(e -> assertThat(e.getAfvoeren()).as("check afvoeren").isEqualTo(actual.getAfvoeren()))
            .satisfies(e -> assertThat(e.getBereikbaarheid()).as("check bereikbaarheid").isEqualTo(actual.getBereikbaarheid()))
            .satisfies(e -> assertThat(e.getBergendvermogen()).as("check bergendvermogen").isEqualTo(actual.getBergendvermogen()))
            .satisfies(
                e -> assertThat(e.getBewerkingspercentage()).as("check bewerkingspercentage").isEqualTo(actual.getBewerkingspercentage())
            )
            .satisfies(e -> assertThat(e.getBgtfysiekvoorkomen()).as("check bgtfysiekvoorkomen").isEqualTo(actual.getBgtfysiekvoorkomen()))
            .satisfies(e -> assertThat(e.getBollen()).as("check bollen").isEqualTo(actual.getBollen()))
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getBreedteklassehaag()).as("check breedteklassehaag").isEqualTo(actual.getBreedteklassehaag()))
            .satisfies(e -> assertThat(e.getBvc()).as("check bvc").isEqualTo(actual.getBvc()))
            .satisfies(
                e ->
                    assertThat(e.getCultuurhistorischwaardevol())
                        .as("check cultuurhistorischwaardevol")
                        .isEqualTo(actual.getCultuurhistorischwaardevol())
            )
            .satisfies(e -> assertThat(e.getDraagkrachtig()).as("check draagkrachtig").isEqualTo(actual.getDraagkrachtig()))
            .satisfies(e -> assertThat(e.getEcologischbeheer()).as("check ecologischbeheer").isEqualTo(actual.getEcologischbeheer()))
            .satisfies(
                e -> assertThat(e.getFysiekvoorkomenimgeo()).as("check fysiekvoorkomenimgeo").isEqualTo(actual.getFysiekvoorkomenimgeo())
            )
            .satisfies(
                e ->
                    assertThat(e.getGewenstsluitingspercentage())
                        .as("check gewenstsluitingspercentage")
                        .isEqualTo(actual.getGewenstsluitingspercentage())
            )
            .satisfies(
                e ->
                    assertThat(e.getGroenobjectbereikbaarheidplus())
                        .as("check groenobjectbereikbaarheidplus")
                        .isEqualTo(actual.getGroenobjectbereikbaarheidplus())
            )
            .satisfies(
                e ->
                    assertThat(e.getGroenobjectconstructielaag())
                        .as("check groenobjectconstructielaag")
                        .isEqualTo(actual.getGroenobjectconstructielaag())
            )
            .satisfies(e -> assertThat(e.getGroenobjectrand()).as("check groenobjectrand").isEqualTo(actual.getGroenobjectrand()))
            .satisfies(
                e -> assertThat(e.getGroenobjectsoortnaam()).as("check groenobjectsoortnaam").isEqualTo(actual.getGroenobjectsoortnaam())
            )
            .satisfies(e -> assertThat(e.getHaagvoetlengte()).as("check haagvoetlengte").isEqualTo(actual.getHaagvoetlengte()))
            .satisfies(
                e -> assertThat(e.getHaagvoetoppervlakte()).as("check haagvoetoppervlakte").isEqualTo(actual.getHaagvoetoppervlakte())
            )
            .satisfies(e -> assertThat(e.getHerplantplicht()).as("check herplantplicht").isEqualTo(actual.getHerplantplicht()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(e -> assertThat(e.getHoogteklassehaag()).as("check hoogteklassehaag").isEqualTo(actual.getHoogteklassehaag()))
            .satisfies(e -> assertThat(e.getKnipfrequentie()).as("check knipfrequentie").isEqualTo(actual.getKnipfrequentie()))
            .satisfies(e -> assertThat(e.getKnipoppervlakte()).as("check knipoppervlakte").isEqualTo(actual.getKnipoppervlakte()))
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveauactueel())
                        .as("check kwaliteitsniveauactueel")
                        .isEqualTo(actual.getKwaliteitsniveauactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveaugewenst())
                        .as("check kwaliteitsniveaugewenst")
                        .isEqualTo(actual.getKwaliteitsniveaugewenst())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getMaaifrequentie()).as("check maaifrequentie").isEqualTo(actual.getMaaifrequentie()))
            .satisfies(e -> assertThat(e.getMaximalevalhoogte()).as("check maximalevalhoogte").isEqualTo(actual.getMaximalevalhoogte()))
            .satisfies(e -> assertThat(e.getEobjectnummer()).as("check eobjectnummer").isEqualTo(actual.getEobjectnummer()))
            .satisfies(e -> assertThat(e.getObstakels()).as("check obstakels").isEqualTo(actual.getObstakels()))
            .satisfies(e -> assertThat(e.getOmtrek()).as("check omtrek").isEqualTo(actual.getOmtrek()))
            .satisfies(e -> assertThat(e.getOndergroei()).as("check ondergroei").isEqualTo(actual.getOndergroei()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(e -> assertThat(e.getOptalud()).as("check optalud").isEqualTo(actual.getOptalud()))
            .satisfies(e -> assertThat(e.getTaludsteilte()).as("check taludsteilte").isEqualTo(actual.getTaludsteilte()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTypebewerking()).as("check typebewerking").isEqualTo(actual.getTypebewerking()))
            .satisfies(
                e ->
                    assertThat(e.getTypeomgevingsrisicoklasse())
                        .as("check typeomgevingsrisicoklasse")
                        .isEqualTo(actual.getTypeomgevingsrisicoklasse())
            )
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()))
            .satisfies(e -> assertThat(e.getTypeplus2()).as("check typeplus2").isEqualTo(actual.getTypeplus2()))
            .satisfies(
                e -> assertThat(e.getVeiligheidsklasseboom()).as("check veiligheidsklasseboom").isEqualTo(actual.getVeiligheidsklasseboom())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGroenobjectUpdatableRelationshipsEquals(Groenobject expected, Groenobject actual) {}
}
