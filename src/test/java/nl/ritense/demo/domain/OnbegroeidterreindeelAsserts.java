package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OnbegroeidterreindeelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbegroeidterreindeelAllPropertiesEquals(Onbegroeidterreindeel expected, Onbegroeidterreindeel actual) {
        assertOnbegroeidterreindeelAutoGeneratedPropertiesEquals(expected, actual);
        assertOnbegroeidterreindeelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbegroeidterreindeelAllUpdatablePropertiesEquals(
        Onbegroeidterreindeel expected,
        Onbegroeidterreindeel actual
    ) {
        assertOnbegroeidterreindeelUpdatableFieldsEquals(expected, actual);
        assertOnbegroeidterreindeelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbegroeidterreindeelAutoGeneratedPropertiesEquals(
        Onbegroeidterreindeel expected,
        Onbegroeidterreindeel actual
    ) {
        assertThat(expected)
            .as("Verify Onbegroeidterreindeel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbegroeidterreindeelUpdatableFieldsEquals(Onbegroeidterreindeel expected, Onbegroeidterreindeel actual) {
        assertThat(expected)
            .as("Verify Onbegroeidterreindeel relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidonbegroeidterreindeel())
                        .as("check datumbegingeldigheidonbegroeidterreindeel")
                        .isEqualTo(actual.getDatumbegingeldigheidonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidonbegroeidterreindeel())
                        .as("check datumeindegeldigheidonbegroeidterreindeel")
                        .isEqualTo(actual.getDatumeindegeldigheidonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getFysiekvoorkomenonbegroeidterreindeel())
                        .as("check fysiekvoorkomenonbegroeidterreindeel")
                        .isEqualTo(actual.getFysiekvoorkomenonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getGeometrieonbegroeidterreindeel())
                        .as("check geometrieonbegroeidterreindeel")
                        .isEqualTo(actual.getGeometrieonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getIdentificatieonbegroeidterreindeel())
                        .as("check identificatieonbegroeidterreindeel")
                        .isEqualTo(actual.getIdentificatieonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKruinlijngeometrieonbegroeidterreindeel())
                        .as("check kruinlijngeometrieonbegroeidterreindeel")
                        .isEqualTo(actual.getKruinlijngeometrieonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getOnbegroeidterreindeeloptalud())
                        .as("check onbegroeidterreindeeloptalud")
                        .isEqualTo(actual.getOnbegroeidterreindeeloptalud())
            )
            .satisfies(
                e ->
                    assertThat(e.getPlusfysiekvoorkomenonbegroeidterreindeel())
                        .as("check plusfysiekvoorkomenonbegroeidterreindeel")
                        .isEqualTo(actual.getPlusfysiekvoorkomenonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getRelatievehoogteliggingonbegroeidterreindeel())
                        .as("check relatievehoogteliggingonbegroeidterreindeel")
                        .isEqualTo(actual.getRelatievehoogteliggingonbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getStatusonbegroeidterreindeel())
                        .as("check statusonbegroeidterreindeel")
                        .isEqualTo(actual.getStatusonbegroeidterreindeel())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbegroeidterreindeelUpdatableRelationshipsEquals(
        Onbegroeidterreindeel expected,
        Onbegroeidterreindeel actual
    ) {}
}
