package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BankafschriftregelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftregelAllPropertiesEquals(Bankafschriftregel expected, Bankafschriftregel actual) {
        assertBankafschriftregelAutoGeneratedPropertiesEquals(expected, actual);
        assertBankafschriftregelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftregelAllUpdatablePropertiesEquals(Bankafschriftregel expected, Bankafschriftregel actual) {
        assertBankafschriftregelUpdatableFieldsEquals(expected, actual);
        assertBankafschriftregelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftregelAutoGeneratedPropertiesEquals(Bankafschriftregel expected, Bankafschriftregel actual) {
        assertThat(expected)
            .as("Verify Bankafschriftregel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftregelUpdatableFieldsEquals(Bankafschriftregel expected, Bankafschriftregel actual) {
        assertThat(expected)
            .as("Verify Bankafschriftregel relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getBij()).as("check bij").isEqualTo(actual.getBij()))
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getRekeningvan()).as("check rekeningvan").isEqualTo(actual.getRekeningvan()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftregelUpdatableRelationshipsEquals(Bankafschriftregel expected, Bankafschriftregel actual) {
        assertThat(expected)
            .as("Verify Bankafschriftregel relationships")
            .satisfies(e -> assertThat(e.getLeidttotMutatie()).as("check leidttotMutatie").isEqualTo(actual.getLeidttotMutatie()))
            .satisfies(e -> assertThat(e.getHeeftBankafschrift()).as("check heeftBankafschrift").isEqualTo(actual.getHeeftBankafschrift()));
    }
}
