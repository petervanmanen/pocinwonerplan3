package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InkomensvoorzieningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkomensvoorzieningAllPropertiesEquals(Inkomensvoorziening expected, Inkomensvoorziening actual) {
        assertInkomensvoorzieningAutoGeneratedPropertiesEquals(expected, actual);
        assertInkomensvoorzieningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkomensvoorzieningAllUpdatablePropertiesEquals(Inkomensvoorziening expected, Inkomensvoorziening actual) {
        assertInkomensvoorzieningUpdatableFieldsEquals(expected, actual);
        assertInkomensvoorzieningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkomensvoorzieningAutoGeneratedPropertiesEquals(Inkomensvoorziening expected, Inkomensvoorziening actual) {
        assertThat(expected)
            .as("Verify Inkomensvoorziening auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkomensvoorzieningUpdatableFieldsEquals(Inkomensvoorziening expected, Inkomensvoorziening actual) {
        assertThat(expected)
            .as("Verify Inkomensvoorziening relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getDatumtoekenning()).as("check datumtoekenning").isEqualTo(actual.getDatumtoekenning()))
            .satisfies(e -> assertThat(e.getEenmalig()).as("check eenmalig").isEqualTo(actual.getEenmalig()))
            .satisfies(e -> assertThat(e.getGroep()).as("check groep").isEqualTo(actual.getGroep()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkomensvoorzieningUpdatableRelationshipsEquals(Inkomensvoorziening expected, Inkomensvoorziening actual) {
        assertThat(expected)
            .as("Verify Inkomensvoorziening relationships")
            .satisfies(
                e -> assertThat(e.getEmptyClientbegeleider()).as("check emptyClientbegeleider").isEqualTo(actual.getEmptyClientbegeleider())
            )
            .satisfies(
                e ->
                    assertThat(e.getIssoortvoorzieningInkomensvoorzieningsoort())
                        .as("check issoortvoorzieningInkomensvoorzieningsoort")
                        .isEqualTo(actual.getIssoortvoorzieningInkomensvoorzieningsoort())
            )
            .satisfies(
                e ->
                    assertThat(e.getVoorzieningbijstandspartijClients())
                        .as("check voorzieningbijstandspartijClients")
                        .isEqualTo(actual.getVoorzieningbijstandspartijClients())
            );
    }
}
