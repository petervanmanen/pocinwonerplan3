package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LeveringAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeveringAllPropertiesEquals(Levering expected, Levering actual) {
        assertLeveringAutoGeneratedPropertiesEquals(expected, actual);
        assertLeveringAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeveringAllUpdatablePropertiesEquals(Levering expected, Levering actual) {
        assertLeveringUpdatableFieldsEquals(expected, actual);
        assertLeveringUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeveringAutoGeneratedPropertiesEquals(Levering expected, Levering actual) {
        assertThat(expected)
            .as("Verify Levering auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeveringUpdatableFieldsEquals(Levering expected, Levering actual) {
        assertThat(expected)
            .as("Verify Levering relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getDatumstop()).as("check datumstop").isEqualTo(actual.getDatumstop()))
            .satisfies(e -> assertThat(e.getEenheid()).as("check eenheid").isEqualTo(actual.getEenheid()))
            .satisfies(e -> assertThat(e.getFrequentie()).as("check frequentie").isEqualTo(actual.getFrequentie()))
            .satisfies(e -> assertThat(e.getOmvang()).as("check omvang").isEqualTo(actual.getOmvang()))
            .satisfies(e -> assertThat(e.getStopreden()).as("check stopreden").isEqualTo(actual.getStopreden()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeveringUpdatableRelationshipsEquals(Levering expected, Levering actual) {
        assertThat(expected)
            .as("Verify Levering relationships")
            .satisfies(
                e ->
                    assertThat(e.getGeleverdeprestatieBeschikking())
                        .as("check geleverdeprestatieBeschikking")
                        .isEqualTo(actual.getGeleverdeprestatieBeschikking())
            )
            .satisfies(
                e -> assertThat(e.getPrestatievoorClient()).as("check prestatievoorClient").isEqualTo(actual.getPrestatievoorClient())
            )
            .satisfies(
                e ->
                    assertThat(e.getGeleverdezorgToewijzing())
                        .as("check geleverdezorgToewijzing")
                        .isEqualTo(actual.getGeleverdezorgToewijzing())
            )
            .satisfies(
                e ->
                    assertThat(e.getVoorzieningVoorziening())
                        .as("check voorzieningVoorziening")
                        .isEqualTo(actual.getVoorzieningVoorziening())
            )
            .satisfies(
                e ->
                    assertThat(e.getLeverdeprestatieLeverancier())
                        .as("check leverdeprestatieLeverancier")
                        .isEqualTo(actual.getLeverdeprestatieLeverancier())
            );
    }
}
