package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerblijfbuitenlandsubjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandsubjectAllPropertiesEquals(
        Verblijfbuitenlandsubject expected,
        Verblijfbuitenlandsubject actual
    ) {
        assertVerblijfbuitenlandsubjectAutoGeneratedPropertiesEquals(expected, actual);
        assertVerblijfbuitenlandsubjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandsubjectAllUpdatablePropertiesEquals(
        Verblijfbuitenlandsubject expected,
        Verblijfbuitenlandsubject actual
    ) {
        assertVerblijfbuitenlandsubjectUpdatableFieldsEquals(expected, actual);
        assertVerblijfbuitenlandsubjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandsubjectAutoGeneratedPropertiesEquals(
        Verblijfbuitenlandsubject expected,
        Verblijfbuitenlandsubject actual
    ) {
        assertThat(expected)
            .as("Verify Verblijfbuitenlandsubject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandsubjectUpdatableFieldsEquals(
        Verblijfbuitenlandsubject expected,
        Verblijfbuitenlandsubject actual
    ) {
        assertThat(expected)
            .as("Verify Verblijfbuitenlandsubject relevant properties")
            .satisfies(e -> assertThat(e.getAdresbuitenland1()).as("check adresbuitenland1").isEqualTo(actual.getAdresbuitenland1()))
            .satisfies(e -> assertThat(e.getAdresbuitenland2()).as("check adresbuitenland2").isEqualTo(actual.getAdresbuitenland2()))
            .satisfies(e -> assertThat(e.getAdresbuitenland3()).as("check adresbuitenland3").isEqualTo(actual.getAdresbuitenland3()))
            .satisfies(e -> assertThat(e.getLandverblijfadres()).as("check landverblijfadres").isEqualTo(actual.getLandverblijfadres()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandsubjectUpdatableRelationshipsEquals(
        Verblijfbuitenlandsubject expected,
        Verblijfbuitenlandsubject actual
    ) {}
}
