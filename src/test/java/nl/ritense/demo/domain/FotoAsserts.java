package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FotoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFotoAllPropertiesEquals(Foto expected, Foto actual) {
        assertFotoAutoGeneratedPropertiesEquals(expected, actual);
        assertFotoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFotoAllUpdatablePropertiesEquals(Foto expected, Foto actual) {
        assertFotoUpdatableFieldsEquals(expected, actual);
        assertFotoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFotoAutoGeneratedPropertiesEquals(Foto expected, Foto actual) {
        assertThat(expected)
            .as("Verify Foto auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFotoUpdatableFieldsEquals(Foto expected, Foto actual) {
        assertThat(expected)
            .as("Verify Foto relevant properties")
            .satisfies(e -> assertThat(e.getBestandsgrootte()).as("check bestandsgrootte").isEqualTo(actual.getBestandsgrootte()))
            .satisfies(e -> assertThat(e.getBestandsnaam()).as("check bestandsnaam").isEqualTo(actual.getBestandsnaam()))
            .satisfies(e -> assertThat(e.getBestandstype()).as("check bestandstype").isEqualTo(actual.getBestandstype()))
            .satisfies(e -> assertThat(e.getDatumtijd()).as("check datumtijd").isEqualTo(actual.getDatumtijd()))
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(e -> assertThat(e.getPixelsx()).as("check pixelsx").isEqualTo(actual.getPixelsx()))
            .satisfies(e -> assertThat(e.getPixelsy()).as("check pixelsy").isEqualTo(actual.getPixelsy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFotoUpdatableRelationshipsEquals(Foto expected, Foto actual) {}
}
