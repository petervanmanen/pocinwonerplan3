package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PgbtoekenningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPgbtoekenningAllPropertiesEquals(Pgbtoekenning expected, Pgbtoekenning actual) {
        assertPgbtoekenningAutoGeneratedPropertiesEquals(expected, actual);
        assertPgbtoekenningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPgbtoekenningAllUpdatablePropertiesEquals(Pgbtoekenning expected, Pgbtoekenning actual) {
        assertPgbtoekenningUpdatableFieldsEquals(expected, actual);
        assertPgbtoekenningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPgbtoekenningAutoGeneratedPropertiesEquals(Pgbtoekenning expected, Pgbtoekenning actual) {
        assertThat(expected)
            .as("Verify Pgbtoekenning auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPgbtoekenningUpdatableFieldsEquals(Pgbtoekenning expected, Pgbtoekenning actual) {
        assertThat(expected)
            .as("Verify Pgbtoekenning relevant properties")
            .satisfies(e -> assertThat(e.getBudget()).as("check budget").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBudget()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumtoekenning()).as("check datumtoekenning").isEqualTo(actual.getDatumtoekenning()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPgbtoekenningUpdatableRelationshipsEquals(Pgbtoekenning expected, Pgbtoekenning actual) {}
}
