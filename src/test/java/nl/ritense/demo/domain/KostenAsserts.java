package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KostenAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenAllPropertiesEquals(Kosten expected, Kosten actual) {
        assertKostenAutoGeneratedPropertiesEquals(expected, actual);
        assertKostenAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenAllUpdatablePropertiesEquals(Kosten expected, Kosten actual) {
        assertKostenUpdatableFieldsEquals(expected, actual);
        assertKostenUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenAutoGeneratedPropertiesEquals(Kosten expected, Kosten actual) {
        assertThat(expected)
            .as("Verify Kosten auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenUpdatableFieldsEquals(Kosten expected, Kosten actual) {
        assertThat(expected)
            .as("Verify Kosten relevant properties")
            .satisfies(e -> assertThat(e.getAangemaaktdoor()).as("check aangemaaktdoor").isEqualTo(actual.getAangemaaktdoor()))
            .satisfies(e -> assertThat(e.getAantal()).as("check aantal").isEqualTo(actual.getAantal()))
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getBedragtotaal()).as("check bedragtotaal").isEqualTo(actual.getBedragtotaal()))
            .satisfies(e -> assertThat(e.getDatumaanmaak()).as("check datumaanmaak").isEqualTo(actual.getDatumaanmaak()))
            .satisfies(e -> assertThat(e.getDatummutatie()).as("check datummutatie").isEqualTo(actual.getDatummutatie()))
            .satisfies(e -> assertThat(e.getEenheid()).as("check eenheid").isEqualTo(actual.getEenheid()))
            .satisfies(e -> assertThat(e.getGeaccordeerd()).as("check geaccordeerd").isEqualTo(actual.getGeaccordeerd()))
            .satisfies(e -> assertThat(e.getGefactureerdop()).as("check gefactureerdop").isEqualTo(actual.getGefactureerdop()))
            .satisfies(e -> assertThat(e.getGemuteerddoor()).as("check gemuteerddoor").isEqualTo(actual.getGemuteerddoor()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e -> assertThat(e.getOpbasisvangrondslag()).as("check opbasisvangrondslag").isEqualTo(actual.getOpbasisvangrondslag())
            )
            .satisfies(e -> assertThat(e.getTarief()).as("check tarief").isEqualTo(actual.getTarief()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getVastgesteldbedrag()).as("check vastgesteldbedrag").isEqualTo(actual.getVastgesteldbedrag()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenUpdatableRelationshipsEquals(Kosten expected, Kosten actual) {}
}
