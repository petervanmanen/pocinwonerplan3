package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArchiefAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchiefAllPropertiesEquals(Archief expected, Archief actual) {
        assertArchiefAutoGeneratedPropertiesEquals(expected, actual);
        assertArchiefAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchiefAllUpdatablePropertiesEquals(Archief expected, Archief actual) {
        assertArchiefUpdatableFieldsEquals(expected, actual);
        assertArchiefUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchiefAutoGeneratedPropertiesEquals(Archief expected, Archief actual) {
        assertThat(expected)
            .as("Verify Archief auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchiefUpdatableFieldsEquals(Archief expected, Archief actual) {
        assertThat(expected)
            .as("Verify Archief relevant properties")
            .satisfies(e -> assertThat(e.getArchiefnummer()).as("check archiefnummer").isEqualTo(actual.getArchiefnummer()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e ->
                    assertThat(e.getOpenbaarheidsbeperking())
                        .as("check openbaarheidsbeperking")
                        .isEqualTo(actual.getOpenbaarheidsbeperking())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArchiefUpdatableRelationshipsEquals(Archief expected, Archief actual) {
        assertThat(expected)
            .as("Verify Archief relationships")
            .satisfies(e -> assertThat(e.getHeeftRechthebbende()).as("check heeftRechthebbende").isEqualTo(actual.getHeeftRechthebbende()))
            .satisfies(
                e ->
                    assertThat(e.getValtbinnenArchiefcategories())
                        .as("check valtbinnenArchiefcategories")
                        .isEqualTo(actual.getValtbinnenArchiefcategories())
            )
            .satisfies(e -> assertThat(e.getStamtuitPeriodes()).as("check stamtuitPeriodes").isEqualTo(actual.getStamtuitPeriodes()));
    }
}
