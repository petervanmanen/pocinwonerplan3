package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProvincieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProvincieAllPropertiesEquals(Provincie expected, Provincie actual) {
        assertProvincieAutoGeneratedPropertiesEquals(expected, actual);
        assertProvincieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProvincieAllUpdatablePropertiesEquals(Provincie expected, Provincie actual) {
        assertProvincieUpdatableFieldsEquals(expected, actual);
        assertProvincieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProvincieAutoGeneratedPropertiesEquals(Provincie expected, Provincie actual) {
        assertThat(expected)
            .as("Verify Provincie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProvincieUpdatableFieldsEquals(Provincie expected, Provincie actual) {
        assertThat(expected)
            .as("Verify Provincie relevant properties")
            .satisfies(
                e -> assertThat(e.getDatumeindeprovincie()).as("check datumeindeprovincie").isEqualTo(actual.getDatumeindeprovincie())
            )
            .satisfies(
                e -> assertThat(e.getDatumingangprovincie()).as("check datumingangprovincie").isEqualTo(actual.getDatumingangprovincie())
            )
            .satisfies(e -> assertThat(e.getHoofdstad()).as("check hoofdstad").isEqualTo(actual.getHoofdstad()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(e -> assertThat(e.getOppervlakteland()).as("check oppervlakteland").isEqualTo(actual.getOppervlakteland()))
            .satisfies(e -> assertThat(e.getProvinciecode()).as("check provinciecode").isEqualTo(actual.getProvinciecode()))
            .satisfies(e -> assertThat(e.getProvincienaam()).as("check provincienaam").isEqualTo(actual.getProvincienaam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProvincieUpdatableRelationshipsEquals(Provincie expected, Provincie actual) {}
}
