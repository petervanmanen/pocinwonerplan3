package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HotelbezoekAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelbezoekAllPropertiesEquals(Hotelbezoek expected, Hotelbezoek actual) {
        assertHotelbezoekAutoGeneratedPropertiesEquals(expected, actual);
        assertHotelbezoekAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelbezoekAllUpdatablePropertiesEquals(Hotelbezoek expected, Hotelbezoek actual) {
        assertHotelbezoekUpdatableFieldsEquals(expected, actual);
        assertHotelbezoekUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelbezoekAutoGeneratedPropertiesEquals(Hotelbezoek expected, Hotelbezoek actual) {
        assertThat(expected)
            .as("Verify Hotelbezoek auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelbezoekUpdatableFieldsEquals(Hotelbezoek expected, Hotelbezoek actual) {
        assertThat(expected)
            .as("Verify Hotelbezoek relevant properties")
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHotelbezoekUpdatableRelationshipsEquals(Hotelbezoek expected, Hotelbezoek actual) {
        assertThat(expected)
            .as("Verify Hotelbezoek relationships")
            .satisfies(e -> assertThat(e.getHeeftHotel()).as("check heeftHotel").isEqualTo(actual.getHeeftHotel()));
    }
}
