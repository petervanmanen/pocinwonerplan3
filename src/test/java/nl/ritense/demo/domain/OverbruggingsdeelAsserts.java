package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OverbruggingsdeelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsdeelAllPropertiesEquals(Overbruggingsdeel expected, Overbruggingsdeel actual) {
        assertOverbruggingsdeelAutoGeneratedPropertiesEquals(expected, actual);
        assertOverbruggingsdeelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsdeelAllUpdatablePropertiesEquals(Overbruggingsdeel expected, Overbruggingsdeel actual) {
        assertOverbruggingsdeelUpdatableFieldsEquals(expected, actual);
        assertOverbruggingsdeelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsdeelAutoGeneratedPropertiesEquals(Overbruggingsdeel expected, Overbruggingsdeel actual) {
        assertThat(expected)
            .as("Verify Overbruggingsdeel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsdeelUpdatableFieldsEquals(Overbruggingsdeel expected, Overbruggingsdeel actual) {
        assertThat(expected)
            .as("Verify Overbruggingsdeel relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidoverbruggingsdeel())
                        .as("check datumbegingeldigheidoverbruggingsdeel")
                        .isEqualTo(actual.getDatumbegingeldigheidoverbruggingsdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidoverbruggingsdeel())
                        .as("check datumeindegeldigheidoverbruggingsdeel")
                        .isEqualTo(actual.getDatumeindegeldigheidoverbruggingsdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getGeometrieoverbruggingsdeel())
                        .as("check geometrieoverbruggingsdeel")
                        .isEqualTo(actual.getGeometrieoverbruggingsdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getHoortbijtypeoverbrugging())
                        .as("check hoortbijtypeoverbrugging")
                        .isEqualTo(actual.getHoortbijtypeoverbrugging())
            )
            .satisfies(
                e ->
                    assertThat(e.getIdentificatieoverbruggingsdeel())
                        .as("check identificatieoverbruggingsdeel")
                        .isEqualTo(actual.getIdentificatieoverbruggingsdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getLod0geometrieoverbruggingsdeel())
                        .as("check lod0geometrieoverbruggingsdeel")
                        .isEqualTo(actual.getLod0geometrieoverbruggingsdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getOverbruggingisbeweegbaar())
                        .as("check overbruggingisbeweegbaar")
                        .isEqualTo(actual.getOverbruggingisbeweegbaar())
            )
            .satisfies(
                e ->
                    assertThat(e.getRelatievehoogteliggingoverbruggingsdeel())
                        .as("check relatievehoogteliggingoverbruggingsdeel")
                        .isEqualTo(actual.getRelatievehoogteliggingoverbruggingsdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getStatusoverbruggingsdeel())
                        .as("check statusoverbruggingsdeel")
                        .isEqualTo(actual.getStatusoverbruggingsdeel())
            )
            .satisfies(
                e -> assertThat(e.getTypeoverbruggingsdeel()).as("check typeoverbruggingsdeel").isEqualTo(actual.getTypeoverbruggingsdeel())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsdeelUpdatableRelationshipsEquals(Overbruggingsdeel expected, Overbruggingsdeel actual) {}
}
