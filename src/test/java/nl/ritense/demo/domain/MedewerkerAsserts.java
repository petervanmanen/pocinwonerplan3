package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MedewerkerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedewerkerAllPropertiesEquals(Medewerker expected, Medewerker actual) {
        assertMedewerkerAutoGeneratedPropertiesEquals(expected, actual);
        assertMedewerkerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedewerkerAllUpdatablePropertiesEquals(Medewerker expected, Medewerker actual) {
        assertMedewerkerUpdatableFieldsEquals(expected, actual);
        assertMedewerkerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedewerkerAutoGeneratedPropertiesEquals(Medewerker expected, Medewerker actual) {
        assertThat(expected)
            .as("Verify Medewerker auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedewerkerUpdatableFieldsEquals(Medewerker expected, Medewerker actual) {
        assertThat(expected)
            .as("Verify Medewerker relevant properties")
            .satisfies(e -> assertThat(e.getAchternaam()).as("check achternaam").isEqualTo(actual.getAchternaam()))
            .satisfies(e -> assertThat(e.getDatumindienst()).as("check datumindienst").isEqualTo(actual.getDatumindienst()))
            .satisfies(e -> assertThat(e.getDatumuitdienst()).as("check datumuitdienst").isEqualTo(actual.getDatumuitdienst()))
            .satisfies(e -> assertThat(e.getEmailadres()).as("check emailadres").isEqualTo(actual.getEmailadres()))
            .satisfies(e -> assertThat(e.getExtern()).as("check extern").isEqualTo(actual.getExtern()))
            .satisfies(e -> assertThat(e.getFunctie()).as("check functie").isEqualTo(actual.getFunctie()))
            .satisfies(
                e -> assertThat(e.getGeslachtsaanduiding()).as("check geslachtsaanduiding").isEqualTo(actual.getGeslachtsaanduiding())
            )
            .satisfies(
                e ->
                    assertThat(e.getMedewerkeridentificatie())
                        .as("check medewerkeridentificatie")
                        .isEqualTo(actual.getMedewerkeridentificatie())
            )
            .satisfies(
                e -> assertThat(e.getMedewerkertoelichting()).as("check medewerkertoelichting").isEqualTo(actual.getMedewerkertoelichting())
            )
            .satisfies(e -> assertThat(e.getRoepnaam()).as("check roepnaam").isEqualTo(actual.getRoepnaam()))
            .satisfies(e -> assertThat(e.getTelefoonnummer()).as("check telefoonnummer").isEqualTo(actual.getTelefoonnummer()))
            .satisfies(e -> assertThat(e.getVoorletters()).as("check voorletters").isEqualTo(actual.getVoorletters()))
            .satisfies(
                e -> assertThat(e.getVoorvoegselachternaam()).as("check voorvoegselachternaam").isEqualTo(actual.getVoorvoegselachternaam())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMedewerkerUpdatableRelationshipsEquals(Medewerker expected, Medewerker actual) {
        assertThat(expected)
            .as("Verify Medewerker relationships")
            .satisfies(
                e ->
                    assertThat(e.getGeleverdviaLeverancier())
                        .as("check geleverdviaLeverancier")
                        .isEqualTo(actual.getGeleverdviaLeverancier())
            )
            .satisfies(e -> assertThat(e.getRollenApplicaties()).as("check rollenApplicaties").isEqualTo(actual.getRollenApplicaties()))
            .satisfies(
                e ->
                    assertThat(e.getAfhandelendmedewerkerZaaks())
                        .as("check afhandelendmedewerkerZaaks")
                        .isEqualTo(actual.getAfhandelendmedewerkerZaaks())
            );
    }
}
