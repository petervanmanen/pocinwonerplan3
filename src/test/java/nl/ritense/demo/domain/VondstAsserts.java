package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VondstAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVondstAllPropertiesEquals(Vondst expected, Vondst actual) {
        assertVondstAutoGeneratedPropertiesEquals(expected, actual);
        assertVondstAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVondstAllUpdatablePropertiesEquals(Vondst expected, Vondst actual) {
        assertVondstUpdatableFieldsEquals(expected, actual);
        assertVondstUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVondstAutoGeneratedPropertiesEquals(Vondst expected, Vondst actual) {
        assertThat(expected)
            .as("Verify Vondst auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVondstUpdatableFieldsEquals(Vondst expected, Vondst actual) {
        assertThat(expected)
            .as("Verify Vondst relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e -> assertThat(e.getKeyvulling()).as("check keyvulling").isEqualTo(actual.getKeyvulling()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getOmstandigheden()).as("check omstandigheden").isEqualTo(actual.getOmstandigheden()))
            .satisfies(e -> assertThat(e.getProjectcd()).as("check projectcd").isEqualTo(actual.getProjectcd()))
            .satisfies(e -> assertThat(e.getPutnummer()).as("check putnummer").isEqualTo(actual.getPutnummer()))
            .satisfies(e -> assertThat(e.getSpoornummer()).as("check spoornummer").isEqualTo(actual.getSpoornummer()))
            .satisfies(e -> assertThat(e.getVlaknummer()).as("check vlaknummer").isEqualTo(actual.getVlaknummer()))
            .satisfies(e -> assertThat(e.getVondstnummer()).as("check vondstnummer").isEqualTo(actual.getVondstnummer()))
            .satisfies(e -> assertThat(e.getVullingnummer()).as("check vullingnummer").isEqualTo(actual.getVullingnummer()))
            .satisfies(e -> assertThat(e.getXcoordinaat()).as("check xcoordinaat").isEqualTo(actual.getXcoordinaat()))
            .satisfies(e -> assertThat(e.getYcoordinaat()).as("check ycoordinaat").isEqualTo(actual.getYcoordinaat()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVondstUpdatableRelationshipsEquals(Vondst expected, Vondst actual) {
        assertThat(expected)
            .as("Verify Vondst relationships")
            .satisfies(e -> assertThat(e.getHeeftVulling()).as("check heeftVulling").isEqualTo(actual.getHeeftVulling()));
    }
}
