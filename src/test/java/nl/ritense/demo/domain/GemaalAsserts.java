package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GemaalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemaalAllPropertiesEquals(Gemaal expected, Gemaal actual) {
        assertGemaalAutoGeneratedPropertiesEquals(expected, actual);
        assertGemaalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemaalAllUpdatablePropertiesEquals(Gemaal expected, Gemaal actual) {
        assertGemaalUpdatableFieldsEquals(expected, actual);
        assertGemaalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemaalAutoGeneratedPropertiesEquals(Gemaal expected, Gemaal actual) {
        assertThat(expected)
            .as("Verify Gemaal auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemaalUpdatableFieldsEquals(Gemaal expected, Gemaal actual) {
        assertThat(expected)
            .as("Verify Gemaal relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getAantalbedrijfsaansluitingen())
                        .as("check aantalbedrijfsaansluitingen")
                        .isEqualTo(actual.getAantalbedrijfsaansluitingen())
            )
            .satisfies(
                e ->
                    assertThat(e.getAantalhuisaansluitingen())
                        .as("check aantalhuisaansluitingen")
                        .isEqualTo(actual.getAantalhuisaansluitingen())
            )
            .satisfies(e -> assertThat(e.getAantalpompen()).as("check aantalpompen").isEqualTo(actual.getAantalpompen()))
            .satisfies(e -> assertThat(e.getBedienaar()).as("check bedienaar").isEqualTo(actual.getBedienaar()))
            .satisfies(
                e ->
                    assertThat(e.getEffectievegemaalcapaciteit())
                        .as("check effectievegemaalcapaciteit")
                        .isEqualTo(actual.getEffectievegemaalcapaciteit())
            )
            .satisfies(e -> assertThat(e.getHijsinrichting()).as("check hijsinrichting").isEqualTo(actual.getHijsinrichting()))
            .satisfies(e -> assertThat(e.getLanceerinrichting()).as("check lanceerinrichting").isEqualTo(actual.getLanceerinrichting()))
            .satisfies(e -> assertThat(e.getPompeninsamenloop()).as("check pompeninsamenloop").isEqualTo(actual.getPompeninsamenloop()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getVeiligheidsrooster()).as("check veiligheidsrooster").isEqualTo(actual.getVeiligheidsrooster()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemaalUpdatableRelationshipsEquals(Gemaal expected, Gemaal actual) {}
}
