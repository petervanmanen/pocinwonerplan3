package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AankondigingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAankondigingAllPropertiesEquals(Aankondiging expected, Aankondiging actual) {
        assertAankondigingAutoGeneratedPropertiesEquals(expected, actual);
        assertAankondigingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAankondigingAllUpdatablePropertiesEquals(Aankondiging expected, Aankondiging actual) {
        assertAankondigingUpdatableFieldsEquals(expected, actual);
        assertAankondigingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAankondigingAutoGeneratedPropertiesEquals(Aankondiging expected, Aankondiging actual) {
        assertThat(expected)
            .as("Verify Aankondiging auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAankondigingUpdatableFieldsEquals(Aankondiging expected, Aankondiging actual) {
        assertThat(expected)
            .as("Verify Aankondiging relevant properties")
            .satisfies(e -> assertThat(e.getBeschrijving()).as("check beschrijving").isEqualTo(actual.getBeschrijving()))
            .satisfies(e -> assertThat(e.getCategorie()).as("check categorie").isEqualTo(actual.getCategorie()))
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAankondigingUpdatableRelationshipsEquals(Aankondiging expected, Aankondiging actual) {
        assertThat(expected)
            .as("Verify Aankondiging relationships")
            .satisfies(
                e -> assertThat(e.getMondtuitAanbesteding()).as("check mondtuitAanbesteding").isEqualTo(actual.getMondtuitAanbesteding())
            );
    }
}
