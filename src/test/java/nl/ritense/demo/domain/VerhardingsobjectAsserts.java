package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerhardingsobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhardingsobjectAllPropertiesEquals(Verhardingsobject expected, Verhardingsobject actual) {
        assertVerhardingsobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertVerhardingsobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhardingsobjectAllUpdatablePropertiesEquals(Verhardingsobject expected, Verhardingsobject actual) {
        assertVerhardingsobjectUpdatableFieldsEquals(expected, actual);
        assertVerhardingsobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhardingsobjectAutoGeneratedPropertiesEquals(Verhardingsobject expected, Verhardingsobject actual) {
        assertThat(expected)
            .as("Verify Verhardingsobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhardingsobjectUpdatableFieldsEquals(Verhardingsobject expected, Verhardingsobject actual) {
        assertThat(expected)
            .as("Verify Verhardingsobject relevant properties")
            .satisfies(e -> assertThat(e.getAanleghoogte()).as("check aanleghoogte").isEqualTo(actual.getAanleghoogte()))
            .satisfies(e -> assertThat(e.getAanofvrijliggend()).as("check aanofvrijliggend").isEqualTo(actual.getAanofvrijliggend()))
            .satisfies(e -> assertThat(e.getAantaldeklagen()).as("check aantaldeklagen").isEqualTo(actual.getAantaldeklagen()))
            .satisfies(e -> assertThat(e.getAantalonderlagen()).as("check aantalonderlagen").isEqualTo(actual.getAantalonderlagen()))
            .satisfies(e -> assertThat(e.getAantaltussenlagen()).as("check aantaltussenlagen").isEqualTo(actual.getAantaltussenlagen()))
            .satisfies(e -> assertThat(e.getAfmeting()).as("check afmeting").isEqualTo(actual.getAfmeting()))
            .satisfies(e -> assertThat(e.getBelasting()).as("check belasting").isEqualTo(actual.getBelasting()))
            .satisfies(e -> assertThat(e.getBergendvermogen()).as("check bergendvermogen").isEqualTo(actual.getBergendvermogen()))
            .satisfies(e -> assertThat(e.getBgtfysiekvoorkomen()).as("check bgtfysiekvoorkomen").isEqualTo(actual.getBgtfysiekvoorkomen()))
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getDikteconstructie()).as("check dikteconstructie").isEqualTo(actual.getDikteconstructie()))
            .satisfies(e -> assertThat(e.getDraagkrachtig()).as("check draagkrachtig").isEqualTo(actual.getDraagkrachtig()))
            .satisfies(e -> assertThat(e.getFormaat()).as("check formaat").isEqualTo(actual.getFormaat()))
            .satisfies(
                e -> assertThat(e.getFysiekvoorkomenimgeo()).as("check fysiekvoorkomenimgeo").isEqualTo(actual.getFysiekvoorkomenimgeo())
            )
            .satisfies(e -> assertThat(e.getGeluidsreducerend()).as("check geluidsreducerend").isEqualTo(actual.getGeluidsreducerend()))
            .satisfies(e -> assertThat(e.getJaarconserveren()).as("check jaarconserveren").isEqualTo(actual.getJaarconserveren()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(e -> assertThat(e.getJaarpraktischeinde()).as("check jaarpraktischeinde").isEqualTo(actual.getJaarpraktischeinde()))
            .satisfies(e -> assertThat(e.getKleur()).as("check kleur").isEqualTo(actual.getKleur()))
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveauactueel())
                        .as("check kwaliteitsniveauactueel")
                        .isEqualTo(actual.getKwaliteitsniveauactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveaugewenst())
                        .as("check kwaliteitsniveaugewenst")
                        .isEqualTo(actual.getKwaliteitsniveaugewenst())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLengtekunstgras()).as("check lengtekunstgras").isEqualTo(actual.getLengtekunstgras()))
            .satisfies(e -> assertThat(e.getLengtevoegen()).as("check lengtevoegen").isEqualTo(actual.getLengtevoegen()))
            .satisfies(e -> assertThat(e.getLevensduur()).as("check levensduur").isEqualTo(actual.getLevensduur()))
            .satisfies(e -> assertThat(e.getMateriaal()).as("check materiaal").isEqualTo(actual.getMateriaal()))
            .satisfies(e -> assertThat(e.getMaximalevalhoogte()).as("check maximalevalhoogte").isEqualTo(actual.getMaximalevalhoogte()))
            .satisfies(e -> assertThat(e.getOmtrek()).as("check omtrek").isEqualTo(actual.getOmtrek()))
            .satisfies(e -> assertThat(e.getOndergrondcode()).as("check ondergrondcode").isEqualTo(actual.getOndergrondcode()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(e -> assertThat(e.getOptalud()).as("check optalud").isEqualTo(actual.getOptalud()))
            .satisfies(e -> assertThat(e.getPlaatsorientatie()).as("check plaatsorientatie").isEqualTo(actual.getPlaatsorientatie()))
            .satisfies(e -> assertThat(e.getPrijsaanschaf()).as("check prijsaanschaf").isEqualTo(actual.getPrijsaanschaf()))
            .satisfies(e -> assertThat(e.getRijstrook()).as("check rijstrook").isEqualTo(actual.getRijstrook()))
            .satisfies(e -> assertThat(e.getSoortvoeg()).as("check soortvoeg").isEqualTo(actual.getSoortvoeg()))
            .satisfies(
                e ->
                    assertThat(e.getToelichtinggemengdebestrating())
                        .as("check toelichtinggemengdebestrating")
                        .isEqualTo(actual.getToelichtinggemengdebestrating())
            )
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTypeconstructie()).as("check typeconstructie").isEqualTo(actual.getTypeconstructie()))
            .satisfies(e -> assertThat(e.getTypefundering()).as("check typefundering").isEqualTo(actual.getTypefundering()))
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()))
            .satisfies(e -> assertThat(e.getTypeplus2()).as("check typeplus2").isEqualTo(actual.getTypeplus2()))
            .satisfies(e -> assertThat(e.getTyperijstrook()).as("check typerijstrook").isEqualTo(actual.getTyperijstrook()))
            .satisfies(e -> assertThat(e.getTypevoeg()).as("check typevoeg").isEqualTo(actual.getTypevoeg()))
            .satisfies(e -> assertThat(e.getTypevoegvulling()).as("check typevoegvulling").isEqualTo(actual.getTypevoegvulling()))
            .satisfies(e -> assertThat(e.getVegen()).as("check vegen").isEqualTo(actual.getVegen()))
            .satisfies(
                e ->
                    assertThat(e.getVerhardingsobjectconstructielaag())
                        .as("check verhardingsobjectconstructielaag")
                        .isEqualTo(actual.getVerhardingsobjectconstructielaag())
            )
            .satisfies(
                e ->
                    assertThat(e.getVerhardingsobjectmodaliteit())
                        .as("check verhardingsobjectmodaliteit")
                        .isEqualTo(actual.getVerhardingsobjectmodaliteit())
            )
            .satisfies(
                e -> assertThat(e.getVerhardingsobjectrand()).as("check verhardingsobjectrand").isEqualTo(actual.getVerhardingsobjectrand())
            )
            .satisfies(
                e ->
                    assertThat(e.getVerhardingsobjectwegfunctie())
                        .as("check verhardingsobjectwegfunctie")
                        .isEqualTo(actual.getVerhardingsobjectwegfunctie())
            )
            .satisfies(e -> assertThat(e.getVerhoogdeligging()).as("check verhoogdeligging").isEqualTo(actual.getVerhoogdeligging()))
            .satisfies(
                e -> assertThat(e.getVulmateriaalkunstgras()).as("check vulmateriaalkunstgras").isEqualTo(actual.getVulmateriaalkunstgras())
            )
            .satisfies(
                e -> assertThat(e.getWaterdoorlatendheid()).as("check waterdoorlatendheid").isEqualTo(actual.getWaterdoorlatendheid())
            )
            .satisfies(e -> assertThat(e.getWegas()).as("check wegas").isEqualTo(actual.getWegas()))
            .satisfies(e -> assertThat(e.getWegcategoriedv()).as("check wegcategoriedv").isEqualTo(actual.getWegcategoriedv()))
            .satisfies(e -> assertThat(e.getWegcategoriedvplus()).as("check wegcategoriedvplus").isEqualTo(actual.getWegcategoriedvplus()))
            .satisfies(e -> assertThat(e.getWegnummer()).as("check wegnummer").isEqualTo(actual.getWegnummer()))
            .satisfies(e -> assertThat(e.getWegtypebestaand()).as("check wegtypebestaand").isEqualTo(actual.getWegtypebestaand()))
            .satisfies(e -> assertThat(e.getWegvak()).as("check wegvak").isEqualTo(actual.getWegvak()))
            .satisfies(e -> assertThat(e.getWegvaknummer()).as("check wegvaknummer").isEqualTo(actual.getWegvaknummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhardingsobjectUpdatableRelationshipsEquals(Verhardingsobject expected, Verhardingsobject actual) {}
}
