package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AanwezigedeelnemerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanwezigedeelnemerAllPropertiesEquals(Aanwezigedeelnemer expected, Aanwezigedeelnemer actual) {
        assertAanwezigedeelnemerAutoGeneratedPropertiesEquals(expected, actual);
        assertAanwezigedeelnemerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanwezigedeelnemerAllUpdatablePropertiesEquals(Aanwezigedeelnemer expected, Aanwezigedeelnemer actual) {
        assertAanwezigedeelnemerUpdatableFieldsEquals(expected, actual);
        assertAanwezigedeelnemerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanwezigedeelnemerAutoGeneratedPropertiesEquals(Aanwezigedeelnemer expected, Aanwezigedeelnemer actual) {
        assertThat(expected)
            .as("Verify Aanwezigedeelnemer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanwezigedeelnemerUpdatableFieldsEquals(Aanwezigedeelnemer expected, Aanwezigedeelnemer actual) {
        assertThat(expected)
            .as("Verify Aanwezigedeelnemer relevant properties")
            .satisfies(
                e -> assertThat(e.getAanvangaanwezigheid()).as("check aanvangaanwezigheid").isEqualTo(actual.getAanvangaanwezigheid())
            )
            .satisfies(e -> assertThat(e.getEindeaanwezigheid()).as("check eindeaanwezigheid").isEqualTo(actual.getEindeaanwezigheid()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getRol()).as("check rol").isEqualTo(actual.getRol()))
            .satisfies(
                e ->
                    assertThat(e.getVertegenwoordigtorganisatie())
                        .as("check vertegenwoordigtorganisatie")
                        .isEqualTo(actual.getVertegenwoordigtorganisatie())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanwezigedeelnemerUpdatableRelationshipsEquals(Aanwezigedeelnemer expected, Aanwezigedeelnemer actual) {}
}
