package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PrijsregelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijsregelAllPropertiesEquals(Prijsregel expected, Prijsregel actual) {
        assertPrijsregelAutoGeneratedPropertiesEquals(expected, actual);
        assertPrijsregelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijsregelAllUpdatablePropertiesEquals(Prijsregel expected, Prijsregel actual) {
        assertPrijsregelUpdatableFieldsEquals(expected, actual);
        assertPrijsregelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijsregelAutoGeneratedPropertiesEquals(Prijsregel expected, Prijsregel actual) {
        assertThat(expected)
            .as("Verify Prijsregel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijsregelUpdatableFieldsEquals(Prijsregel expected, Prijsregel actual) {
        assertThat(expected)
            .as("Verify Prijsregel relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getCredit()).as("check credit").isEqualTo(actual.getCredit()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijsregelUpdatableRelationshipsEquals(Prijsregel expected, Prijsregel actual) {
        assertThat(expected)
            .as("Verify Prijsregel relationships")
            .satisfies(e -> assertThat(e.getHeeftPrijsafspraak()).as("check heeftPrijsafspraak").isEqualTo(actual.getHeeftPrijsafspraak()));
    }
}
