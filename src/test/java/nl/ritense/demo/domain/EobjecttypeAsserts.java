package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EobjecttypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjecttypeAllPropertiesEquals(Eobjecttype expected, Eobjecttype actual) {
        assertEobjecttypeAutoGeneratedPropertiesEquals(expected, actual);
        assertEobjecttypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjecttypeAllUpdatablePropertiesEquals(Eobjecttype expected, Eobjecttype actual) {
        assertEobjecttypeUpdatableFieldsEquals(expected, actual);
        assertEobjecttypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjecttypeAutoGeneratedPropertiesEquals(Eobjecttype expected, Eobjecttype actual) {
        assertThat(expected)
            .as("Verify Eobjecttype auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjecttypeUpdatableFieldsEquals(Eobjecttype expected, Eobjecttype actual) {
        assertThat(expected)
            .as("Verify Eobjecttype relevant properties")
            .satisfies(e -> assertThat(e.getDatumopname()).as("check datumopname").isEqualTo(actual.getDatumopname()))
            .satisfies(e -> assertThat(e.getDefinitie()).as("check definitie").isEqualTo(actual.getDefinitie()))
            .satisfies(e -> assertThat(e.getEaguid()).as("check eaguid").isEqualTo(actual.getEaguid()))
            .satisfies(e -> assertThat(e.getHerkomst()).as("check herkomst").isEqualTo(actual.getHerkomst()))
            .satisfies(e -> assertThat(e.getHerkomstdefinitie()).as("check herkomstdefinitie").isEqualTo(actual.getHerkomstdefinitie()))
            .satisfies(e -> assertThat(e.getIndicatieabstract()).as("check indicatieabstract").isEqualTo(actual.getIndicatieabstract()))
            .satisfies(e -> assertThat(e.getKwaliteit()).as("check kwaliteit").isEqualTo(actual.getKwaliteit()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getPopulatie()).as("check populatie").isEqualTo(actual.getPopulatie()))
            .satisfies(e -> assertThat(e.getStereotype()).as("check stereotype").isEqualTo(actual.getStereotype()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()))
            .satisfies(e -> assertThat(e.getUniekeaanduiding()).as("check uniekeaanduiding").isEqualTo(actual.getUniekeaanduiding()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjecttypeUpdatableRelationshipsEquals(Eobjecttype expected, Eobjecttype actual) {}
}
