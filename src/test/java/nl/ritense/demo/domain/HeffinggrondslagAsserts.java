package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class HeffinggrondslagAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHeffinggrondslagAllPropertiesEquals(Heffinggrondslag expected, Heffinggrondslag actual) {
        assertHeffinggrondslagAutoGeneratedPropertiesEquals(expected, actual);
        assertHeffinggrondslagAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHeffinggrondslagAllUpdatablePropertiesEquals(Heffinggrondslag expected, Heffinggrondslag actual) {
        assertHeffinggrondslagUpdatableFieldsEquals(expected, actual);
        assertHeffinggrondslagUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHeffinggrondslagAutoGeneratedPropertiesEquals(Heffinggrondslag expected, Heffinggrondslag actual) {
        assertThat(expected)
            .as("Verify Heffinggrondslag auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHeffinggrondslagUpdatableFieldsEquals(Heffinggrondslag expected, Heffinggrondslag actual) {
        assertThat(expected)
            .as("Verify Heffinggrondslag relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getDomein()).as("check domein").isEqualTo(actual.getDomein()))
            .satisfies(e -> assertThat(e.getHoofdstuk()).as("check hoofdstuk").isEqualTo(actual.getHoofdstuk()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getParagraaf()).as("check paragraaf").isEqualTo(actual.getParagraaf()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHeffinggrondslagUpdatableRelationshipsEquals(Heffinggrondslag expected, Heffinggrondslag actual) {
        assertThat(expected)
            .as("Verify Heffinggrondslag relationships")
            .satisfies(
                e ->
                    assertThat(e.getVermeldinHeffingsverordening())
                        .as("check vermeldinHeffingsverordening")
                        .isEqualTo(actual.getVermeldinHeffingsverordening())
            )
            .satisfies(e -> assertThat(e.getHeeftZaaktype()).as("check heeftZaaktype").isEqualTo(actual.getHeeftZaaktype()));
    }
}
