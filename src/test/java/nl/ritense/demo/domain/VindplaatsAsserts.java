package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VindplaatsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVindplaatsAllPropertiesEquals(Vindplaats expected, Vindplaats actual) {
        assertVindplaatsAutoGeneratedPropertiesEquals(expected, actual);
        assertVindplaatsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVindplaatsAllUpdatablePropertiesEquals(Vindplaats expected, Vindplaats actual) {
        assertVindplaatsUpdatableFieldsEquals(expected, actual);
        assertVindplaatsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVindplaatsAutoGeneratedPropertiesEquals(Vindplaats expected, Vindplaats actual) {
        assertThat(expected)
            .as("Verify Vindplaats auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVindplaatsUpdatableFieldsEquals(Vindplaats expected, Vindplaats actual) {
        assertThat(expected)
            .as("Verify Vindplaats relevant properties")
            .satisfies(e -> assertThat(e.getAard()).as("check aard").isEqualTo(actual.getAard()))
            .satisfies(e -> assertThat(e.getBegindatering()).as("check begindatering").isEqualTo(actual.getBegindatering()))
            .satisfies(e -> assertThat(e.getBeschrijving()).as("check beschrijving").isEqualTo(actual.getBeschrijving()))
            .satisfies(e -> assertThat(e.getBibliografie()).as("check bibliografie").isEqualTo(actual.getBibliografie()))
            .satisfies(e -> assertThat(e.getDatering()).as("check datering").isEqualTo(actual.getDatering()))
            .satisfies(e -> assertThat(e.getDepot()).as("check depot").isEqualTo(actual.getDepot()))
            .satisfies(e -> assertThat(e.getDocumentatie()).as("check documentatie").isEqualTo(actual.getDocumentatie()))
            .satisfies(e -> assertThat(e.getEinddatering()).as("check einddatering").isEqualTo(actual.getEinddatering()))
            .satisfies(e -> assertThat(e.getGemeente()).as("check gemeente").isEqualTo(actual.getGemeente()))
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(e -> assertThat(e.getMobilia()).as("check mobilia").isEqualTo(actual.getMobilia()))
            .satisfies(e -> assertThat(e.getOnderzoek()).as("check onderzoek").isEqualTo(actual.getOnderzoek()))
            .satisfies(e -> assertThat(e.getProjectcode()).as("check projectcode").isEqualTo(actual.getProjectcode()))
            .satisfies(e -> assertThat(e.getVindplaats()).as("check vindplaats").isEqualTo(actual.getVindplaats()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVindplaatsUpdatableRelationshipsEquals(Vindplaats expected, Vindplaats actual) {
        assertThat(expected)
            .as("Verify Vindplaats relationships")
            .satisfies(e -> assertThat(e.getHoortbijProject()).as("check hoortbijProject").isEqualTo(actual.getHoortbijProject()))
            .satisfies(e -> assertThat(e.getIstevindeninDepot()).as("check istevindeninDepot").isEqualTo(actual.getIstevindeninDepot()))
            .satisfies(e -> assertThat(e.getIstevindeninKast()).as("check istevindeninKast").isEqualTo(actual.getIstevindeninKast()))
            .satisfies(e -> assertThat(e.getIstevindeninPlank()).as("check istevindeninPlank").isEqualTo(actual.getIstevindeninPlank()))
            .satisfies(
                e -> assertThat(e.getIstevindeninStelling()).as("check istevindeninStelling").isEqualTo(actual.getIstevindeninStelling())
            );
    }
}
