package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StrooidagAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrooidagAllPropertiesEquals(Strooidag expected, Strooidag actual) {
        assertStrooidagAutoGeneratedPropertiesEquals(expected, actual);
        assertStrooidagAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrooidagAllUpdatablePropertiesEquals(Strooidag expected, Strooidag actual) {
        assertStrooidagUpdatableFieldsEquals(expected, actual);
        assertStrooidagUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrooidagAutoGeneratedPropertiesEquals(Strooidag expected, Strooidag actual) {
        assertThat(expected)
            .as("Verify Strooidag auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrooidagUpdatableFieldsEquals(Strooidag expected, Strooidag actual) {
        assertThat(expected)
            .as("Verify Strooidag relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getMaximumtemperatuur()).as("check maximumtemperatuur").isEqualTo(actual.getMaximumtemperatuur()))
            .satisfies(e -> assertThat(e.getMinimumtemperatuur()).as("check minimumtemperatuur").isEqualTo(actual.getMinimumtemperatuur()))
            .satisfies(
                e ->
                    assertThat(e.getTijdmaximumtemperatuur())
                        .as("check tijdmaximumtemperatuur")
                        .isEqualTo(actual.getTijdmaximumtemperatuur())
            )
            .satisfies(
                e ->
                    assertThat(e.getTijdminimumtemperatuur())
                        .as("check tijdminimumtemperatuur")
                        .isEqualTo(actual.getTijdminimumtemperatuur())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStrooidagUpdatableRelationshipsEquals(Strooidag expected, Strooidag actual) {}
}
