package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OrganisatorischeeenheidAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisatorischeeenheidAllPropertiesEquals(Organisatorischeeenheid expected, Organisatorischeeenheid actual) {
        assertOrganisatorischeeenheidAutoGeneratedPropertiesEquals(expected, actual);
        assertOrganisatorischeeenheidAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisatorischeeenheidAllUpdatablePropertiesEquals(
        Organisatorischeeenheid expected,
        Organisatorischeeenheid actual
    ) {
        assertOrganisatorischeeenheidUpdatableFieldsEquals(expected, actual);
        assertOrganisatorischeeenheidUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisatorischeeenheidAutoGeneratedPropertiesEquals(
        Organisatorischeeenheid expected,
        Organisatorischeeenheid actual
    ) {
        assertThat(expected)
            .as("Verify Organisatorischeeenheid auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisatorischeeenheidUpdatableFieldsEquals(
        Organisatorischeeenheid expected,
        Organisatorischeeenheid actual
    ) {
        assertThat(expected)
            .as("Verify Organisatorischeeenheid relevant properties")
            .satisfies(e -> assertThat(e.getDatumontstaan()).as("check datumontstaan").isEqualTo(actual.getDatumontstaan()))
            .satisfies(e -> assertThat(e.getDatumopheffing()).as("check datumopheffing").isEqualTo(actual.getDatumopheffing()))
            .satisfies(e -> assertThat(e.getEmailadres()).as("check emailadres").isEqualTo(actual.getEmailadres()))
            .satisfies(e -> assertThat(e.getFaxnummer()).as("check faxnummer").isEqualTo(actual.getFaxnummer()))
            .satisfies(e -> assertThat(e.getFormatie()).as("check formatie").isEqualTo(actual.getFormatie()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getNaamverkort()).as("check naamverkort").isEqualTo(actual.getNaamverkort()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e ->
                    assertThat(e.getOrganisatieidentificatie())
                        .as("check organisatieidentificatie")
                        .isEqualTo(actual.getOrganisatieidentificatie())
            )
            .satisfies(e -> assertThat(e.getTelefoonnummer()).as("check telefoonnummer").isEqualTo(actual.getTelefoonnummer()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOrganisatorischeeenheidUpdatableRelationshipsEquals(
        Organisatorischeeenheid expected,
        Organisatorischeeenheid actual
    ) {}
}
