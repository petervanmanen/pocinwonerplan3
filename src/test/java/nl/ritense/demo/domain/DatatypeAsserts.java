package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DatatypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatatypeAllPropertiesEquals(Datatype expected, Datatype actual) {
        assertDatatypeAutoGeneratedPropertiesEquals(expected, actual);
        assertDatatypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatatypeAllUpdatablePropertiesEquals(Datatype expected, Datatype actual) {
        assertDatatypeUpdatableFieldsEquals(expected, actual);
        assertDatatypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatatypeAutoGeneratedPropertiesEquals(Datatype expected, Datatype actual) {
        assertThat(expected)
            .as("Verify Datatype auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatatypeUpdatableFieldsEquals(Datatype expected, Datatype actual) {
        assertThat(expected)
            .as("Verify Datatype relevant properties")
            .satisfies(e -> assertThat(e.getDatumopname()).as("check datumopname").isEqualTo(actual.getDatumopname()))
            .satisfies(e -> assertThat(e.getDefinitie()).as("check definitie").isEqualTo(actual.getDefinitie()))
            .satisfies(e -> assertThat(e.getDomein()).as("check domein").isEqualTo(actual.getDomein()))
            .satisfies(e -> assertThat(e.getEaguid()).as("check eaguid").isEqualTo(actual.getEaguid()))
            .satisfies(e -> assertThat(e.getHerkomst()).as("check herkomst").isEqualTo(actual.getHerkomst()))
            .satisfies(e -> assertThat(e.getKardinaliteit()).as("check kardinaliteit").isEqualTo(actual.getKardinaliteit()))
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getPatroon()).as("check patroon").isEqualTo(actual.getPatroon()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatatypeUpdatableRelationshipsEquals(Datatype expected, Datatype actual) {}
}
