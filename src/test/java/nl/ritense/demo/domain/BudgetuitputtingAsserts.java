package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BudgetuitputtingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetuitputtingAllPropertiesEquals(Budgetuitputting expected, Budgetuitputting actual) {
        assertBudgetuitputtingAutoGeneratedPropertiesEquals(expected, actual);
        assertBudgetuitputtingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetuitputtingAllUpdatablePropertiesEquals(Budgetuitputting expected, Budgetuitputting actual) {
        assertBudgetuitputtingUpdatableFieldsEquals(expected, actual);
        assertBudgetuitputtingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetuitputtingAutoGeneratedPropertiesEquals(Budgetuitputting expected, Budgetuitputting actual) {
        assertThat(expected)
            .as("Verify Budgetuitputting auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetuitputtingUpdatableFieldsEquals(Budgetuitputting expected, Budgetuitputting actual) {
        assertThat(expected)
            .as("Verify Budgetuitputting relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(
                e ->
                    assertThat(e.getUitgenutbedrag())
                        .as("check uitgenutbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getUitgenutbedrag())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBudgetuitputtingUpdatableRelationshipsEquals(Budgetuitputting expected, Budgetuitputting actual) {}
}
