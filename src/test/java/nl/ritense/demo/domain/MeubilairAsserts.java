package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MeubilairAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeubilairAllPropertiesEquals(Meubilair expected, Meubilair actual) {
        assertMeubilairAutoGeneratedPropertiesEquals(expected, actual);
        assertMeubilairAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeubilairAllUpdatablePropertiesEquals(Meubilair expected, Meubilair actual) {
        assertMeubilairUpdatableFieldsEquals(expected, actual);
        assertMeubilairUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeubilairAutoGeneratedPropertiesEquals(Meubilair expected, Meubilair actual) {
        assertThat(expected)
            .as("Verify Meubilair auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeubilairUpdatableFieldsEquals(Meubilair expected, Meubilair actual) {
        assertThat(expected)
            .as("Verify Meubilair relevant properties")
            .satisfies(e -> assertThat(e.getAanleghoogte()).as("check aanleghoogte").isEqualTo(actual.getAanleghoogte()))
            .satisfies(e -> assertThat(e.getBouwjaar()).as("check bouwjaar").isEqualTo(actual.getBouwjaar()))
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getDatumaanschaf()).as("check datumaanschaf").isEqualTo(actual.getDatumaanschaf()))
            .satisfies(e -> assertThat(e.getDiameter()).as("check diameter").isEqualTo(actual.getDiameter()))
            .satisfies(e -> assertThat(e.getFabrikant()).as("check fabrikant").isEqualTo(actual.getFabrikant()))
            .satisfies(e -> assertThat(e.getGewicht()).as("check gewicht").isEqualTo(actual.getGewicht()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(e -> assertThat(e.getInstallateur()).as("check installateur").isEqualTo(actual.getInstallateur()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(e -> assertThat(e.getJaarpraktischeinde()).as("check jaarpraktischeinde").isEqualTo(actual.getJaarpraktischeinde()))
            .satisfies(e -> assertThat(e.getKleur()).as("check kleur").isEqualTo(actual.getKleur()))
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveauactueel())
                        .as("check kwaliteitsniveauactueel")
                        .isEqualTo(actual.getKwaliteitsniveauactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveaugewenst())
                        .as("check kwaliteitsniveaugewenst")
                        .isEqualTo(actual.getKwaliteitsniveaugewenst())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getMeubilairmateriaal()).as("check meubilairmateriaal").isEqualTo(actual.getMeubilairmateriaal()))
            .satisfies(e -> assertThat(e.getModel()).as("check model").isEqualTo(actual.getModel()))
            .satisfies(e -> assertThat(e.getOndergrond()).as("check ondergrond").isEqualTo(actual.getOndergrond()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(e -> assertThat(e.getPrijsaanschaf()).as("check prijsaanschaf").isEqualTo(actual.getPrijsaanschaf()))
            .satisfies(e -> assertThat(e.getSerienummer()).as("check serienummer").isEqualTo(actual.getSerienummer()))
            .satisfies(e -> assertThat(e.getTransponder()).as("check transponder").isEqualTo(actual.getTransponder()))
            .satisfies(e -> assertThat(e.getTransponderlocatie()).as("check transponderlocatie").isEqualTo(actual.getTransponderlocatie()))
            .satisfies(e -> assertThat(e.getTypefundering()).as("check typefundering").isEqualTo(actual.getTypefundering()))
            .satisfies(e -> assertThat(e.getTypeplaat()).as("check typeplaat").isEqualTo(actual.getTypeplaat()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeubilairUpdatableRelationshipsEquals(Meubilair expected, Meubilair actual) {}
}
