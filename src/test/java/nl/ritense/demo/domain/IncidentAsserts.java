package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class IncidentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentAllPropertiesEquals(Incident expected, Incident actual) {
        assertIncidentAutoGeneratedPropertiesEquals(expected, actual);
        assertIncidentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentAllUpdatablePropertiesEquals(Incident expected, Incident actual) {
        assertIncidentUpdatableFieldsEquals(expected, actual);
        assertIncidentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentAutoGeneratedPropertiesEquals(Incident expected, Incident actual) {
        assertThat(expected)
            .as("Verify Incident auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentUpdatableFieldsEquals(Incident expected, Incident actual) {
        assertThat(expected)
            .as("Verify Incident relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIncidentUpdatableRelationshipsEquals(Incident expected, Incident actual) {
        assertThat(expected)
            .as("Verify Incident relationships")
            .satisfies(
                e -> assertThat(e.getBetreftMuseumobjects()).as("check betreftMuseumobjects").isEqualTo(actual.getBetreftMuseumobjects())
            );
    }
}
