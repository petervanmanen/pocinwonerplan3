package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SubsidiecomponentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiecomponentAllPropertiesEquals(Subsidiecomponent expected, Subsidiecomponent actual) {
        assertSubsidiecomponentAutoGeneratedPropertiesEquals(expected, actual);
        assertSubsidiecomponentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiecomponentAllUpdatablePropertiesEquals(Subsidiecomponent expected, Subsidiecomponent actual) {
        assertSubsidiecomponentUpdatableFieldsEquals(expected, actual);
        assertSubsidiecomponentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiecomponentAutoGeneratedPropertiesEquals(Subsidiecomponent expected, Subsidiecomponent actual) {
        assertThat(expected)
            .as("Verify Subsidiecomponent auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiecomponentUpdatableFieldsEquals(Subsidiecomponent expected, Subsidiecomponent actual) {
        assertThat(expected)
            .as("Verify Subsidiecomponent relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getGereserveerdbedrag())
                        .as("check gereserveerdbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGereserveerdbedrag())
            )
            .satisfies(
                e ->
                    assertThat(e.getToegekendbedrag())
                        .as("check toegekendbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getToegekendbedrag())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiecomponentUpdatableRelationshipsEquals(Subsidiecomponent expected, Subsidiecomponent actual) {
        assertThat(expected)
            .as("Verify Subsidiecomponent relationships")
            .satisfies(e -> assertThat(e.getHeeftKostenplaats()).as("check heeftKostenplaats").isEqualTo(actual.getHeeftKostenplaats()));
    }
}
