package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MapAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMapAllPropertiesEquals(Map expected, Map actual) {
        assertMapAutoGeneratedPropertiesEquals(expected, actual);
        assertMapAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMapAllUpdatablePropertiesEquals(Map expected, Map actual) {
        assertMapUpdatableFieldsEquals(expected, actual);
        assertMapUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMapAutoGeneratedPropertiesEquals(Map expected, Map actual) {
        assertThat(expected)
            .as("Verify Map auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMapUpdatableFieldsEquals(Map expected, Map actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMapUpdatableRelationshipsEquals(Map expected, Map actual) {}
}
