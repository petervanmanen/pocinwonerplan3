package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerhuurbaareenheidAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhuurbaareenheidAllPropertiesEquals(Verhuurbaareenheid expected, Verhuurbaareenheid actual) {
        assertVerhuurbaareenheidAutoGeneratedPropertiesEquals(expected, actual);
        assertVerhuurbaareenheidAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhuurbaareenheidAllUpdatablePropertiesEquals(Verhuurbaareenheid expected, Verhuurbaareenheid actual) {
        assertVerhuurbaareenheidUpdatableFieldsEquals(expected, actual);
        assertVerhuurbaareenheidUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhuurbaareenheidAutoGeneratedPropertiesEquals(Verhuurbaareenheid expected, Verhuurbaareenheid actual) {
        assertThat(expected)
            .as("Verify Verhuurbaareenheid auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhuurbaareenheidUpdatableFieldsEquals(Verhuurbaareenheid expected, Verhuurbaareenheid actual) {
        assertThat(expected)
            .as("Verify Verhuurbaareenheid relevant properties")
            .satisfies(e -> assertThat(e.getAdres()).as("check adres").isEqualTo(actual.getAdres()))
            .satisfies(e -> assertThat(e.getAfmeting()).as("check afmeting").isEqualTo(actual.getAfmeting()))
            .satisfies(e -> assertThat(e.getBezetting()).as("check bezetting").isEqualTo(actual.getBezetting()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(
                e -> assertThat(e.getDatumwerkelijkbegin()).as("check datumwerkelijkbegin").isEqualTo(actual.getDatumwerkelijkbegin())
            )
            .satisfies(
                e -> assertThat(e.getDatumwerkelijkeinde()).as("check datumwerkelijkeinde").isEqualTo(actual.getDatumwerkelijkeinde())
            )
            .satisfies(e -> assertThat(e.getHuurprijs()).as("check huurprijs").isEqualTo(actual.getHuurprijs()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getNettoomtrek()).as("check nettoomtrek").isEqualTo(actual.getNettoomtrek()))
            .satisfies(e -> assertThat(e.getNettooppervlak()).as("check nettooppervlak").isEqualTo(actual.getNettooppervlak()))
            .satisfies(e -> assertThat(e.getOpmerkingen()).as("check opmerkingen").isEqualTo(actual.getOpmerkingen()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerhuurbaareenheidUpdatableRelationshipsEquals(Verhuurbaareenheid expected, Verhuurbaareenheid actual) {}
}
