package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class AanvraaginkooporderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanvraaginkooporderAllPropertiesEquals(Aanvraaginkooporder expected, Aanvraaginkooporder actual) {
        assertAanvraaginkooporderAutoGeneratedPropertiesEquals(expected, actual);
        assertAanvraaginkooporderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanvraaginkooporderAllUpdatablePropertiesEquals(Aanvraaginkooporder expected, Aanvraaginkooporder actual) {
        assertAanvraaginkooporderUpdatableFieldsEquals(expected, actual);
        assertAanvraaginkooporderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanvraaginkooporderAutoGeneratedPropertiesEquals(Aanvraaginkooporder expected, Aanvraaginkooporder actual) {
        assertThat(expected)
            .as("Verify Aanvraaginkooporder auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanvraaginkooporderUpdatableFieldsEquals(Aanvraaginkooporder expected, Aanvraaginkooporder actual) {
        assertThat(expected)
            .as("Verify Aanvraaginkooporder relevant properties")
            .satisfies(
                e -> assertThat(e.getBetalingovermeerjaren()).as("check betalingovermeerjaren").isEqualTo(actual.getBetalingovermeerjaren())
            )
            .satisfies(
                e -> assertThat(e.getCorrespondentienummer()).as("check correspondentienummer").isEqualTo(actual.getCorrespondentienummer())
            )
            .satisfies(e -> assertThat(e.getInhuuranders()).as("check inhuuranders").isEqualTo(actual.getInhuuranders()))
            .satisfies(e -> assertThat(e.getLeveringofdienst()).as("check leveringofdienst").isEqualTo(actual.getLeveringofdienst()))
            .satisfies(
                e ->
                    assertThat(e.getNettototaalbedrag())
                        .as("check nettototaalbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getNettototaalbedrag())
            )
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getOnderwerp()).as("check onderwerp").isEqualTo(actual.getOnderwerp()))
            .satisfies(e -> assertThat(e.getReactie()).as("check reactie").isEqualTo(actual.getReactie()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getWijzevaninhuur()).as("check wijzevaninhuur").isEqualTo(actual.getWijzevaninhuur()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanvraaginkooporderUpdatableRelationshipsEquals(Aanvraaginkooporder expected, Aanvraaginkooporder actual) {}
}
