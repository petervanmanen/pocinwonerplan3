package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RegelingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegelingAllPropertiesEquals(Regeling expected, Regeling actual) {
        assertRegelingAutoGeneratedPropertiesEquals(expected, actual);
        assertRegelingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegelingAllUpdatablePropertiesEquals(Regeling expected, Regeling actual) {
        assertRegelingUpdatableFieldsEquals(expected, actual);
        assertRegelingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegelingAutoGeneratedPropertiesEquals(Regeling expected, Regeling actual) {
        assertThat(expected)
            .as("Verify Regeling auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegelingUpdatableFieldsEquals(Regeling expected, Regeling actual) {
        assertThat(expected)
            .as("Verify Regeling relevant properties")
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getDatumtoekenning()).as("check datumtoekenning").isEqualTo(actual.getDatumtoekenning()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegelingUpdatableRelationshipsEquals(Regeling expected, Regeling actual) {
        assertThat(expected)
            .as("Verify Regeling relationships")
            .satisfies(
                e ->
                    assertThat(e.getIsregelingsoortRegelingsoort())
                        .as("check isregelingsoortRegelingsoort")
                        .isEqualTo(actual.getIsregelingsoortRegelingsoort())
            )
            .satisfies(
                e -> assertThat(e.getHeeftregelingClient()).as("check heeftregelingClient").isEqualTo(actual.getHeeftregelingClient())
            );
    }
}
