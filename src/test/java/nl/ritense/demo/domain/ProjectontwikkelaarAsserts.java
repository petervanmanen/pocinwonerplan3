package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectontwikkelaarAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectontwikkelaarAllPropertiesEquals(Projectontwikkelaar expected, Projectontwikkelaar actual) {
        assertProjectontwikkelaarAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectontwikkelaarAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectontwikkelaarAllUpdatablePropertiesEquals(Projectontwikkelaar expected, Projectontwikkelaar actual) {
        assertProjectontwikkelaarUpdatableFieldsEquals(expected, actual);
        assertProjectontwikkelaarUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectontwikkelaarAutoGeneratedPropertiesEquals(Projectontwikkelaar expected, Projectontwikkelaar actual) {
        assertThat(expected)
            .as("Verify Projectontwikkelaar auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectontwikkelaarUpdatableFieldsEquals(Projectontwikkelaar expected, Projectontwikkelaar actual) {
        assertThat(expected)
            .as("Verify Projectontwikkelaar relevant properties")
            .satisfies(e -> assertThat(e.getAdres()).as("check adres").isEqualTo(actual.getAdres()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectontwikkelaarUpdatableRelationshipsEquals(Projectontwikkelaar expected, Projectontwikkelaar actual) {
        assertThat(expected)
            .as("Verify Projectontwikkelaar relationships")
            .satisfies(e -> assertThat(e.getHeeftPlans()).as("check heeftPlans").isEqualTo(actual.getHeeftPlans()));
    }
}
