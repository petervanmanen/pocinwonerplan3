package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BegrotingregelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegrotingregelAllPropertiesEquals(Begrotingregel expected, Begrotingregel actual) {
        assertBegrotingregelAutoGeneratedPropertiesEquals(expected, actual);
        assertBegrotingregelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegrotingregelAllUpdatablePropertiesEquals(Begrotingregel expected, Begrotingregel actual) {
        assertBegrotingregelUpdatableFieldsEquals(expected, actual);
        assertBegrotingregelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegrotingregelAutoGeneratedPropertiesEquals(Begrotingregel expected, Begrotingregel actual) {
        assertThat(expected)
            .as("Verify Begrotingregel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegrotingregelUpdatableFieldsEquals(Begrotingregel expected, Begrotingregel actual) {
        assertThat(expected)
            .as("Verify Begrotingregel relevant properties")
            .satisfies(e -> assertThat(e.getBatenlasten()).as("check batenlasten").isEqualTo(actual.getBatenlasten()))
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getSoortregel()).as("check soortregel").isEqualTo(actual.getSoortregel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegrotingregelUpdatableRelationshipsEquals(Begrotingregel expected, Begrotingregel actual) {
        assertThat(expected)
            .as("Verify Begrotingregel relationships")
            .satisfies(
                e -> assertThat(e.getBetreftDoelstelling()).as("check betreftDoelstelling").isEqualTo(actual.getBetreftDoelstelling())
            )
            .satisfies(e -> assertThat(e.getBetreftProduct()).as("check betreftProduct").isEqualTo(actual.getBetreftProduct()))
            .satisfies(
                e -> assertThat(e.getBetreftKostenplaats()).as("check betreftKostenplaats").isEqualTo(actual.getBetreftKostenplaats())
            )
            .satisfies(
                e -> assertThat(e.getBetreftHoofdrekening()).as("check betreftHoofdrekening").isEqualTo(actual.getBetreftHoofdrekening())
            )
            .satisfies(e -> assertThat(e.getBetreftHoofdstuk()).as("check betreftHoofdstuk").isEqualTo(actual.getBetreftHoofdstuk()))
            .satisfies(e -> assertThat(e.getHeeftBegroting()).as("check heeftBegroting").isEqualTo(actual.getHeeftBegroting()));
    }
}
