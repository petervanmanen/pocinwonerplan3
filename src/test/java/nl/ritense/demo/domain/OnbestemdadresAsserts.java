package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OnbestemdadresAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbestemdadresAllPropertiesEquals(Onbestemdadres expected, Onbestemdadres actual) {
        assertOnbestemdadresAutoGeneratedPropertiesEquals(expected, actual);
        assertOnbestemdadresAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbestemdadresAllUpdatablePropertiesEquals(Onbestemdadres expected, Onbestemdadres actual) {
        assertOnbestemdadresUpdatableFieldsEquals(expected, actual);
        assertOnbestemdadresUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbestemdadresAutoGeneratedPropertiesEquals(Onbestemdadres expected, Onbestemdadres actual) {
        assertThat(expected)
            .as("Verify Onbestemdadres auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbestemdadresUpdatableFieldsEquals(Onbestemdadres expected, Onbestemdadres actual) {
        assertThat(expected)
            .as("Verify Onbestemdadres relevant properties")
            .satisfies(e -> assertThat(e.getHuisletter()).as("check huisletter").isEqualTo(actual.getHuisletter()))
            .satisfies(e -> assertThat(e.getHuisnummer()).as("check huisnummer").isEqualTo(actual.getHuisnummer()))
            .satisfies(
                e -> assertThat(e.getHuisnummertoevoeging()).as("check huisnummertoevoeging").isEqualTo(actual.getHuisnummertoevoeging())
            )
            .satisfies(e -> assertThat(e.getPostcode()).as("check postcode").isEqualTo(actual.getPostcode()))
            .satisfies(e -> assertThat(e.getStraatnaam()).as("check straatnaam").isEqualTo(actual.getStraatnaam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnbestemdadresUpdatableRelationshipsEquals(Onbestemdadres expected, Onbestemdadres actual) {}
}
