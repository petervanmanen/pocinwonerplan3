package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NietnatuurlijkpersoonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNietnatuurlijkpersoonAllPropertiesEquals(Nietnatuurlijkpersoon expected, Nietnatuurlijkpersoon actual) {
        assertNietnatuurlijkpersoonAutoGeneratedPropertiesEquals(expected, actual);
        assertNietnatuurlijkpersoonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNietnatuurlijkpersoonAllUpdatablePropertiesEquals(
        Nietnatuurlijkpersoon expected,
        Nietnatuurlijkpersoon actual
    ) {
        assertNietnatuurlijkpersoonUpdatableFieldsEquals(expected, actual);
        assertNietnatuurlijkpersoonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNietnatuurlijkpersoonAutoGeneratedPropertiesEquals(
        Nietnatuurlijkpersoon expected,
        Nietnatuurlijkpersoon actual
    ) {
        assertThat(expected)
            .as("Verify Nietnatuurlijkpersoon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNietnatuurlijkpersoonUpdatableFieldsEquals(Nietnatuurlijkpersoon expected, Nietnatuurlijkpersoon actual) {
        assertThat(expected)
            .as("Verify Nietnatuurlijkpersoon relevant properties")
            .satisfies(e -> assertThat(e.getDatumaanvang()).as("check datumaanvang").isEqualTo(actual.getDatumaanvang()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumuitschrijving()).as("check datumuitschrijving").isEqualTo(actual.getDatumuitschrijving()))
            .satisfies(e -> assertThat(e.getDatumvoortzetting()).as("check datumvoortzetting").isEqualTo(actual.getDatumvoortzetting()))
            .satisfies(e -> assertThat(e.getFaxnummer()).as("check faxnummer").isEqualTo(actual.getFaxnummer()))
            .satisfies(e -> assertThat(e.getIngeschreven()).as("check ingeschreven").isEqualTo(actual.getIngeschreven()))
            .satisfies(e -> assertThat(e.getInoprichting()).as("check inoprichting").isEqualTo(actual.getInoprichting()))
            .satisfies(e -> assertThat(e.getKvknummer()).as("check kvknummer").isEqualTo(actual.getKvknummer()))
            .satisfies(e -> assertThat(e.getNnpid()).as("check nnpid").isEqualTo(actual.getNnpid()))
            .satisfies(e -> assertThat(e.getRechtsvorm()).as("check rechtsvorm").isEqualTo(actual.getRechtsvorm()))
            .satisfies(e -> assertThat(e.getRsinnummer()).as("check rsinnummer").isEqualTo(actual.getRsinnummer()))
            .satisfies(e -> assertThat(e.getStatutairenaam()).as("check statutairenaam").isEqualTo(actual.getStatutairenaam()))
            .satisfies(e -> assertThat(e.getStatutairezetel()).as("check statutairezetel").isEqualTo(actual.getStatutairezetel()))
            .satisfies(e -> assertThat(e.getWebsiteurl()).as("check websiteurl").isEqualTo(actual.getWebsiteurl()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNietnatuurlijkpersoonUpdatableRelationshipsEquals(
        Nietnatuurlijkpersoon expected,
        Nietnatuurlijkpersoon actual
    ) {}
}
