package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class IndividueelkeuzebudgetAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividueelkeuzebudgetAllPropertiesEquals(Individueelkeuzebudget expected, Individueelkeuzebudget actual) {
        assertIndividueelkeuzebudgetAutoGeneratedPropertiesEquals(expected, actual);
        assertIndividueelkeuzebudgetAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividueelkeuzebudgetAllUpdatablePropertiesEquals(
        Individueelkeuzebudget expected,
        Individueelkeuzebudget actual
    ) {
        assertIndividueelkeuzebudgetUpdatableFieldsEquals(expected, actual);
        assertIndividueelkeuzebudgetUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividueelkeuzebudgetAutoGeneratedPropertiesEquals(
        Individueelkeuzebudget expected,
        Individueelkeuzebudget actual
    ) {
        assertThat(expected)
            .as("Verify Individueelkeuzebudget auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividueelkeuzebudgetUpdatableFieldsEquals(Individueelkeuzebudget expected, Individueelkeuzebudget actual) {
        assertThat(expected)
            .as("Verify Individueelkeuzebudget relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getDatumtoekenning()).as("check datumtoekenning").isEqualTo(actual.getDatumtoekenning()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertIndividueelkeuzebudgetUpdatableRelationshipsEquals(
        Individueelkeuzebudget expected,
        Individueelkeuzebudget actual
    ) {}
}
