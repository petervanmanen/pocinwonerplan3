package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AnderzaakobjectzaakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnderzaakobjectzaakAllPropertiesEquals(Anderzaakobjectzaak expected, Anderzaakobjectzaak actual) {
        assertAnderzaakobjectzaakAutoGeneratedPropertiesEquals(expected, actual);
        assertAnderzaakobjectzaakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnderzaakobjectzaakAllUpdatablePropertiesEquals(Anderzaakobjectzaak expected, Anderzaakobjectzaak actual) {
        assertAnderzaakobjectzaakUpdatableFieldsEquals(expected, actual);
        assertAnderzaakobjectzaakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnderzaakobjectzaakAutoGeneratedPropertiesEquals(Anderzaakobjectzaak expected, Anderzaakobjectzaak actual) {
        assertThat(expected)
            .as("Verify Anderzaakobjectzaak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnderzaakobjectzaakUpdatableFieldsEquals(Anderzaakobjectzaak expected, Anderzaakobjectzaak actual) {
        assertThat(expected)
            .as("Verify Anderzaakobjectzaak relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getAnderzaakobjectaanduiding())
                        .as("check anderzaakobjectaanduiding")
                        .isEqualTo(actual.getAnderzaakobjectaanduiding())
            )
            .satisfies(
                e ->
                    assertThat(e.getAnderzaakobjectlocatie())
                        .as("check anderzaakobjectlocatie")
                        .isEqualTo(actual.getAnderzaakobjectlocatie())
            )
            .satisfies(
                e ->
                    assertThat(e.getAnderzaakobjectomschrijving())
                        .as("check anderzaakobjectomschrijving")
                        .isEqualTo(actual.getAnderzaakobjectomschrijving())
            )
            .satisfies(
                e ->
                    assertThat(e.getAnderzaakobjectregistratie())
                        .as("check anderzaakobjectregistratie")
                        .isEqualTo(actual.getAnderzaakobjectregistratie())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAnderzaakobjectzaakUpdatableRelationshipsEquals(Anderzaakobjectzaak expected, Anderzaakobjectzaak actual) {}
}
