package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class FactuurregelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurregelAllPropertiesEquals(Factuurregel expected, Factuurregel actual) {
        assertFactuurregelAutoGeneratedPropertiesEquals(expected, actual);
        assertFactuurregelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurregelAllUpdatablePropertiesEquals(Factuurregel expected, Factuurregel actual) {
        assertFactuurregelUpdatableFieldsEquals(expected, actual);
        assertFactuurregelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurregelAutoGeneratedPropertiesEquals(Factuurregel expected, Factuurregel actual) {
        assertThat(expected)
            .as("Verify Factuurregel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurregelUpdatableFieldsEquals(Factuurregel expected, Factuurregel actual) {
        assertThat(expected)
            .as("Verify Factuurregel relevant properties")
            .satisfies(e -> assertThat(e.getAantal()).as("check aantal").isEqualTo(actual.getAantal()))
            .satisfies(
                e ->
                    assertThat(e.getBedragbtw()).as("check bedragbtw").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedragbtw())
            )
            .satisfies(
                e ->
                    assertThat(e.getBedragexbtw())
                        .as("check bedragexbtw")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBedragexbtw())
            )
            .satisfies(e -> assertThat(e.getBtwpercentage()).as("check btwpercentage").isEqualTo(actual.getBtwpercentage()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFactuurregelUpdatableRelationshipsEquals(Factuurregel expected, Factuurregel actual) {
        assertThat(expected)
            .as("Verify Factuurregel relationships")
            .satisfies(e -> assertThat(e.getLeidttotMutatie()).as("check leidttotMutatie").isEqualTo(actual.getLeidttotMutatie()))
            .satisfies(e -> assertThat(e.getHeeftFactuur()).as("check heeftFactuur").isEqualTo(actual.getHeeftFactuur()));
    }
}
