package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ScoreAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScoreAllPropertiesEquals(Score expected, Score actual) {
        assertScoreAutoGeneratedPropertiesEquals(expected, actual);
        assertScoreAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScoreAllUpdatablePropertiesEquals(Score expected, Score actual) {
        assertScoreUpdatableFieldsEquals(expected, actual);
        assertScoreUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScoreAutoGeneratedPropertiesEquals(Score expected, Score actual) {
        assertThat(expected)
            .as("Verify Score auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScoreUpdatableFieldsEquals(Score expected, Score actual) {
        assertThat(expected)
            .as("Verify Score relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScoreUpdatableRelationshipsEquals(Score expected, Score actual) {
        assertThat(expected)
            .as("Verify Score relationships")
            .satisfies(
                e ->
                    assertThat(e.getScorebijleeggebiedLeefgebied())
                        .as("check scorebijleeggebiedLeefgebied")
                        .isEqualTo(actual.getScorebijleeggebiedLeefgebied())
            )
            .satisfies(
                e -> assertThat(e.getHoogtescoreScoresoort()).as("check hoogtescoreScoresoort").isEqualTo(actual.getHoogtescoreScoresoort())
            )
            .satisfies(e -> assertThat(e.getHeeftClient()).as("check heeftClient").isEqualTo(actual.getHeeftClient()));
    }
}
