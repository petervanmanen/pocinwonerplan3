package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BoringAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoringAllPropertiesEquals(Boring expected, Boring actual) {
        assertBoringAutoGeneratedPropertiesEquals(expected, actual);
        assertBoringAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoringAllUpdatablePropertiesEquals(Boring expected, Boring actual) {
        assertBoringUpdatableFieldsEquals(expected, actual);
        assertBoringUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoringAutoGeneratedPropertiesEquals(Boring expected, Boring actual) {
        assertThat(expected)
            .as("Verify Boring auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoringUpdatableFieldsEquals(Boring expected, Boring actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoringUpdatableRelationshipsEquals(Boring expected, Boring actual) {
        assertThat(expected)
            .as("Verify Boring relationships")
            .satisfies(e -> assertThat(e.getHeeftProject()).as("check heeftProject").isEqualTo(actual.getHeeftProject()));
    }
}
