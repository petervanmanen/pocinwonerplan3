package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class TariefAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTariefAllPropertiesEquals(Tarief expected, Tarief actual) {
        assertTariefAutoGeneratedPropertiesEquals(expected, actual);
        assertTariefAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTariefAllUpdatablePropertiesEquals(Tarief expected, Tarief actual) {
        assertTariefUpdatableFieldsEquals(expected, actual);
        assertTariefUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTariefAutoGeneratedPropertiesEquals(Tarief expected, Tarief actual) {
        assertThat(expected)
            .as("Verify Tarief auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTariefUpdatableFieldsEquals(Tarief expected, Tarief actual) {
        assertThat(expected)
            .as("Verify Tarief relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getEenheid()).as("check eenheid").isEqualTo(actual.getEenheid()))
            .satisfies(e -> assertThat(e.getWet()).as("check wet").isEqualTo(actual.getWet()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTariefUpdatableRelationshipsEquals(Tarief expected, Tarief actual) {
        assertThat(expected)
            .as("Verify Tarief relationships")
            .satisfies(e -> assertThat(e.getHeeftLeverancier()).as("check heeftLeverancier").isEqualTo(actual.getHeeftLeverancier()))
            .satisfies(e -> assertThat(e.getBevatContract()).as("check bevatContract").isEqualTo(actual.getBevatContract()))
            .satisfies(e -> assertThat(e.getHeeftVoorziening()).as("check heeftVoorziening").isEqualTo(actual.getHeeftVoorziening()));
    }
}
