package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SubrekeningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubrekeningAllPropertiesEquals(Subrekening expected, Subrekening actual) {
        assertSubrekeningAutoGeneratedPropertiesEquals(expected, actual);
        assertSubrekeningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubrekeningAllUpdatablePropertiesEquals(Subrekening expected, Subrekening actual) {
        assertSubrekeningUpdatableFieldsEquals(expected, actual);
        assertSubrekeningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubrekeningAutoGeneratedPropertiesEquals(Subrekening expected, Subrekening actual) {
        assertThat(expected)
            .as("Verify Subrekening auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubrekeningUpdatableFieldsEquals(Subrekening expected, Subrekening actual) {
        assertThat(expected)
            .as("Verify Subrekening relevant properties")
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubrekeningUpdatableRelationshipsEquals(Subrekening expected, Subrekening actual) {
        assertThat(expected)
            .as("Verify Subrekening relationships")
            .satisfies(e -> assertThat(e.getHeeftHoofdrekening()).as("check heeftHoofdrekening").isEqualTo(actual.getHeeftHoofdrekening()))
            .satisfies(e -> assertThat(e.getHeeftKostenplaats()).as("check heeftKostenplaats").isEqualTo(actual.getHeeftKostenplaats()));
    }
}
