package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InspectieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectieAllPropertiesEquals(Inspectie expected, Inspectie actual) {
        assertInspectieAutoGeneratedPropertiesEquals(expected, actual);
        assertInspectieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectieAllUpdatablePropertiesEquals(Inspectie expected, Inspectie actual) {
        assertInspectieUpdatableFieldsEquals(expected, actual);
        assertInspectieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectieAutoGeneratedPropertiesEquals(Inspectie expected, Inspectie actual) {
        assertThat(expected)
            .as("Verify Inspectie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectieUpdatableFieldsEquals(Inspectie expected, Inspectie actual) {
        assertThat(expected)
            .as("Verify Inspectie relevant properties")
            .satisfies(e -> assertThat(e.getAangemaaktdoor()).as("check aangemaaktdoor").isEqualTo(actual.getAangemaaktdoor()))
            .satisfies(e -> assertThat(e.getDatumaanmaak()).as("check datumaanmaak").isEqualTo(actual.getDatumaanmaak()))
            .satisfies(e -> assertThat(e.getDatumgepland()).as("check datumgepland").isEqualTo(actual.getDatumgepland()))
            .satisfies(e -> assertThat(e.getDatuminspectie()).as("check datuminspectie").isEqualTo(actual.getDatuminspectie()))
            .satisfies(e -> assertThat(e.getDatummutatie()).as("check datummutatie").isEqualTo(actual.getDatummutatie()))
            .satisfies(e -> assertThat(e.getGemuteerddoor()).as("check gemuteerddoor").isEqualTo(actual.getGemuteerddoor()))
            .satisfies(e -> assertThat(e.getInspectietype()).as("check inspectietype").isEqualTo(actual.getInspectietype()))
            .satisfies(e -> assertThat(e.getKenmerk()).as("check kenmerk").isEqualTo(actual.getKenmerk()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getOpmerkingen()).as("check opmerkingen").isEqualTo(actual.getOpmerkingen()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInspectieUpdatableRelationshipsEquals(Inspectie expected, Inspectie actual) {
        assertThat(expected)
            .as("Verify Inspectie relationships")
            .satisfies(
                e -> assertThat(e.getBetreftVastgoedobject()).as("check betreftVastgoedobject").isEqualTo(actual.getBetreftVastgoedobject())
            );
    }
}
