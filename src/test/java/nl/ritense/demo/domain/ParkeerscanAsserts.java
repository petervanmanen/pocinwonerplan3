package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParkeerscanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerscanAllPropertiesEquals(Parkeerscan expected, Parkeerscan actual) {
        assertParkeerscanAutoGeneratedPropertiesEquals(expected, actual);
        assertParkeerscanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerscanAllUpdatablePropertiesEquals(Parkeerscan expected, Parkeerscan actual) {
        assertParkeerscanUpdatableFieldsEquals(expected, actual);
        assertParkeerscanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerscanAutoGeneratedPropertiesEquals(Parkeerscan expected, Parkeerscan actual) {
        assertThat(expected)
            .as("Verify Parkeerscan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerscanUpdatableFieldsEquals(Parkeerscan expected, Parkeerscan actual) {
        assertThat(expected)
            .as("Verify Parkeerscan relevant properties")
            .satisfies(e -> assertThat(e.getCodegebruiker()).as("check codegebruiker").isEqualTo(actual.getCodegebruiker()))
            .satisfies(e -> assertThat(e.getCodescanvoertuig()).as("check codescanvoertuig").isEqualTo(actual.getCodescanvoertuig()))
            .satisfies(e -> assertThat(e.getCoordinaten()).as("check coordinaten").isEqualTo(actual.getCoordinaten()))
            .satisfies(e -> assertThat(e.getFoto()).as("check foto").isEqualTo(actual.getFoto()))
            .satisfies(e -> assertThat(e.getKenteken()).as("check kenteken").isEqualTo(actual.getKenteken()))
            .satisfies(e -> assertThat(e.getParkeerrecht()).as("check parkeerrecht").isEqualTo(actual.getParkeerrecht()))
            .satisfies(e -> assertThat(e.getTijdstip()).as("check tijdstip").isEqualTo(actual.getTijdstip()))
            .satisfies(e -> assertThat(e.getTransactieid()).as("check transactieid").isEqualTo(actual.getTransactieid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerscanUpdatableRelationshipsEquals(Parkeerscan expected, Parkeerscan actual) {
        assertThat(expected)
            .as("Verify Parkeerscan relationships")
            .satisfies(
                e -> assertThat(e.getKomtvoortuitNaheffing()).as("check komtvoortuitNaheffing").isEqualTo(actual.getKomtvoortuitNaheffing())
            )
            .satisfies(
                e ->
                    assertThat(e.getUitgevoerddoorMedewerker())
                        .as("check uitgevoerddoorMedewerker")
                        .isEqualTo(actual.getUitgevoerddoorMedewerker())
            )
            .satisfies(e -> assertThat(e.getBetreftVoertuig()).as("check betreftVoertuig").isEqualTo(actual.getBetreftVoertuig()))
            .satisfies(e -> assertThat(e.getBetreftParkeervlak()).as("check betreftParkeervlak").isEqualTo(actual.getBetreftParkeervlak()));
    }
}
