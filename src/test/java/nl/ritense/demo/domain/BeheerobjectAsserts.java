package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BeheerobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeheerobjectAllPropertiesEquals(Beheerobject expected, Beheerobject actual) {
        assertBeheerobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertBeheerobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeheerobjectAllUpdatablePropertiesEquals(Beheerobject expected, Beheerobject actual) {
        assertBeheerobjectUpdatableFieldsEquals(expected, actual);
        assertBeheerobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeheerobjectAutoGeneratedPropertiesEquals(Beheerobject expected, Beheerobject actual) {
        assertThat(expected)
            .as("Verify Beheerobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeheerobjectUpdatableFieldsEquals(Beheerobject expected, Beheerobject actual) {
        assertThat(expected)
            .as("Verify Beheerobject relevant properties")
            .satisfies(e -> assertThat(e.getAangemaaktdoor()).as("check aangemaaktdoor").isEqualTo(actual.getAangemaaktdoor()))
            .satisfies(
                e -> assertThat(e.getBegingarantieperiode()).as("check begingarantieperiode").isEqualTo(actual.getBegingarantieperiode())
            )
            .satisfies(e -> assertThat(e.getBeheergebied()).as("check beheergebied").isEqualTo(actual.getBeheergebied()))
            .satisfies(
                e -> assertThat(e.getBeheerobjectbeheervak()).as("check beheerobjectbeheervak").isEqualTo(actual.getBeheerobjectbeheervak())
            )
            .satisfies(
                e ->
                    assertThat(e.getBeheerobjectgebruiksfunctie())
                        .as("check beheerobjectgebruiksfunctie")
                        .isEqualTo(actual.getBeheerobjectgebruiksfunctie())
            )
            .satisfies(e -> assertThat(e.getBeheerobjectmemo()).as("check beheerobjectmemo").isEqualTo(actual.getBeheerobjectmemo()))
            .satisfies(
                e ->
                    assertThat(e.getBeschermdefloraenfauna())
                        .as("check beschermdefloraenfauna")
                        .isEqualTo(actual.getBeschermdefloraenfauna())
            )
            .satisfies(e -> assertThat(e.getBuurt()).as("check buurt").isEqualTo(actual.getBuurt()))
            .satisfies(e -> assertThat(e.getConversieid()).as("check conversieid").isEqualTo(actual.getConversieid()))
            .satisfies(e -> assertThat(e.getDatummutatie()).as("check datummutatie").isEqualTo(actual.getDatummutatie()))
            .satisfies(e -> assertThat(e.getDatumoplevering()).as("check datumoplevering").isEqualTo(actual.getDatumoplevering()))
            .satisfies(e -> assertThat(e.getDatumpublicatielv()).as("check datumpublicatielv").isEqualTo(actual.getDatumpublicatielv()))
            .satisfies(e -> assertThat(e.getDatumverwijdering()).as("check datumverwijdering").isEqualTo(actual.getDatumverwijdering()))
            .satisfies(
                e -> assertThat(e.getEindegarantieperiode()).as("check eindegarantieperiode").isEqualTo(actual.getEindegarantieperiode())
            )
            .satisfies(e -> assertThat(e.getGebiedstype()).as("check gebiedstype").isEqualTo(actual.getGebiedstype()))
            .satisfies(e -> assertThat(e.getGemeente()).as("check gemeente").isEqualTo(actual.getGemeente()))
            .satisfies(e -> assertThat(e.getGeometrie()).as("check geometrie").isEqualTo(actual.getGeometrie()))
            .satisfies(e -> assertThat(e.getGewijzigddoor()).as("check gewijzigddoor").isEqualTo(actual.getGewijzigddoor()))
            .satisfies(e -> assertThat(e.getGrondsoort()).as("check grondsoort").isEqualTo(actual.getGrondsoort()))
            .satisfies(e -> assertThat(e.getGrondsoortplus()).as("check grondsoortplus").isEqualTo(actual.getGrondsoortplus()))
            .satisfies(e -> assertThat(e.getIdentificatieimbor()).as("check identificatieimbor").isEqualTo(actual.getIdentificatieimbor()))
            .satisfies(e -> assertThat(e.getIdentificatieimgeo()).as("check identificatieimgeo").isEqualTo(actual.getIdentificatieimgeo()))
            .satisfies(e -> assertThat(e.getJaarvanaanleg()).as("check jaarvanaanleg").isEqualTo(actual.getJaarvanaanleg()))
            .satisfies(e -> assertThat(e.getEobjectbegintijd()).as("check eobjectbegintijd").isEqualTo(actual.getEobjectbegintijd()))
            .satisfies(e -> assertThat(e.getEobjecteindtijd()).as("check eobjecteindtijd").isEqualTo(actual.getEobjecteindtijd()))
            .satisfies(
                e -> assertThat(e.getOnderhoudsplichtige()).as("check onderhoudsplichtige").isEqualTo(actual.getOnderhoudsplichtige())
            )
            .satisfies(e -> assertThat(e.getOpenbareruimte()).as("check openbareruimte").isEqualTo(actual.getOpenbareruimte()))
            .satisfies(e -> assertThat(e.getPostcode()).as("check postcode").isEqualTo(actual.getPostcode()))
            .satisfies(
                e ->
                    assertThat(e.getRelatievehoogteligging())
                        .as("check relatievehoogteligging")
                        .isEqualTo(actual.getRelatievehoogteligging())
            )
            .satisfies(e -> assertThat(e.getStadsdeel()).as("check stadsdeel").isEqualTo(actual.getStadsdeel()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e -> assertThat(e.getTheoretischeindejaar()).as("check theoretischeindejaar").isEqualTo(actual.getTheoretischeindejaar())
            )
            .satisfies(
                e -> assertThat(e.getTijdstipregistratie()).as("check tijdstipregistratie").isEqualTo(actual.getTijdstipregistratie())
            )
            .satisfies(e -> assertThat(e.getTypebeheerder()).as("check typebeheerder").isEqualTo(actual.getTypebeheerder()))
            .satisfies(e -> assertThat(e.getTypebeheerderplus()).as("check typebeheerderplus").isEqualTo(actual.getTypebeheerderplus()))
            .satisfies(e -> assertThat(e.getTypeeigenaar()).as("check typeeigenaar").isEqualTo(actual.getTypeeigenaar()))
            .satisfies(e -> assertThat(e.getTypeeigenaarplus()).as("check typeeigenaarplus").isEqualTo(actual.getTypeeigenaarplus()))
            .satisfies(e -> assertThat(e.getTypeligging()).as("check typeligging").isEqualTo(actual.getTypeligging()))
            .satisfies(e -> assertThat(e.getWaterschap()).as("check waterschap").isEqualTo(actual.getWaterschap()))
            .satisfies(e -> assertThat(e.getWijk()).as("check wijk").isEqualTo(actual.getWijk()))
            .satisfies(e -> assertThat(e.getWoonplaats()).as("check woonplaats").isEqualTo(actual.getWoonplaats()))
            .satisfies(
                e -> assertThat(e.getZettingsgevoeligheid()).as("check zettingsgevoeligheid").isEqualTo(actual.getZettingsgevoeligheid())
            )
            .satisfies(
                e ->
                    assertThat(e.getZettingsgevoeligheidplus())
                        .as("check zettingsgevoeligheidplus")
                        .isEqualTo(actual.getZettingsgevoeligheidplus())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeheerobjectUpdatableRelationshipsEquals(Beheerobject expected, Beheerobject actual) {
        assertThat(expected)
            .as("Verify Beheerobject relationships")
            .satisfies(e -> assertThat(e.getBetreftMeldings()).as("check betreftMeldings").isEqualTo(actual.getBetreftMeldings()));
    }
}
