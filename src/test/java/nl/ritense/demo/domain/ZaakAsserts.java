package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ZaakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakAllPropertiesEquals(Zaak expected, Zaak actual) {
        assertZaakAutoGeneratedPropertiesEquals(expected, actual);
        assertZaakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakAllUpdatablePropertiesEquals(Zaak expected, Zaak actual) {
        assertZaakUpdatableFieldsEquals(expected, actual);
        assertZaakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakAutoGeneratedPropertiesEquals(Zaak expected, Zaak actual) {
        assertThat(expected)
            .as("Verify Zaak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakUpdatableFieldsEquals(Zaak expected, Zaak actual) {
        assertThat(expected)
            .as("Verify Zaak relevant properties")
            .satisfies(e -> assertThat(e.getEmpty()).as("check empty").isEqualTo(actual.getEmpty()))
            .satisfies(e -> assertThat(e.getArchiefnominatie()).as("check archiefnominatie").isEqualTo(actual.getArchiefnominatie()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumeindegepland()).as("check datumeindegepland").isEqualTo(actual.getDatumeindegepland()))
            .satisfies(
                e ->
                    assertThat(e.getDatumeindeuiterlijkeafdoening())
                        .as("check datumeindeuiterlijkeafdoening")
                        .isEqualTo(actual.getDatumeindeuiterlijkeafdoening())
            )
            .satisfies(
                e -> assertThat(e.getDatumlaatstebetaling()).as("check datumlaatstebetaling").isEqualTo(actual.getDatumlaatstebetaling())
            )
            .satisfies(e -> assertThat(e.getDatumpublicatie()).as("check datumpublicatie").isEqualTo(actual.getDatumpublicatie()))
            .satisfies(e -> assertThat(e.getDatumregistratie()).as("check datumregistratie").isEqualTo(actual.getDatumregistratie()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(
                e ->
                    assertThat(e.getDatumvernietigingdossier())
                        .as("check datumvernietigingdossier")
                        .isEqualTo(actual.getDatumvernietigingdossier())
            )
            .satisfies(e -> assertThat(e.getDocument()).as("check document").isEqualTo(actual.getDocument()))
            .satisfies(e -> assertThat(e.getDuurverlenging()).as("check duurverlenging").isEqualTo(actual.getDuurverlenging()))
            .satisfies(e -> assertThat(e.getIndicatiebetaling()).as("check indicatiebetaling").isEqualTo(actual.getIndicatiebetaling()))
            .satisfies(e -> assertThat(e.getIndicatiedeelzaken()).as("check indicatiedeelzaken").isEqualTo(actual.getIndicatiedeelzaken()))
            .satisfies(
                e -> assertThat(e.getIndicatieopschorting()).as("check indicatieopschorting").isEqualTo(actual.getIndicatieopschorting())
            )
            .satisfies(e -> assertThat(e.getLeges()).as("check leges").isEqualTo(actual.getLeges()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e -> assertThat(e.getOmschrijvingresultaat()).as("check omschrijvingresultaat").isEqualTo(actual.getOmschrijvingresultaat())
            )
            .satisfies(e -> assertThat(e.getRedenopschorting()).as("check redenopschorting").isEqualTo(actual.getRedenopschorting()))
            .satisfies(e -> assertThat(e.getRedenverlenging()).as("check redenverlenging").isEqualTo(actual.getRedenverlenging()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()))
            .satisfies(
                e -> assertThat(e.getToelichtingresultaat()).as("check toelichtingresultaat").isEqualTo(actual.getToelichtingresultaat())
            )
            .satisfies(e -> assertThat(e.getVertrouwelijkheid()).as("check vertrouwelijkheid").isEqualTo(actual.getVertrouwelijkheid()))
            .satisfies(e -> assertThat(e.getZaakidentificatie()).as("check zaakidentificatie").isEqualTo(actual.getZaakidentificatie()))
            .satisfies(e -> assertThat(e.getZaakniveau()).as("check zaakniveau").isEqualTo(actual.getZaakniveau()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakUpdatableRelationshipsEquals(Zaak expected, Zaak actual) {
        assertThat(expected)
            .as("Verify Zaak relationships")
            .satisfies(
                e ->
                    assertThat(e.getHeeftproductProducttype())
                        .as("check heeftproductProducttype")
                        .isEqualTo(actual.getHeeftproductProducttype())
            )
            .satisfies(
                e -> assertThat(e.getHeeftKlantbeoordeling()).as("check heeftKlantbeoordeling").isEqualTo(actual.getHeeftKlantbeoordeling())
            )
            .satisfies(e -> assertThat(e.getHeeftHeffing()).as("check heeftHeffing").isEqualTo(actual.getHeeftHeffing()))
            .satisfies(e -> assertThat(e.getBetreftProject()).as("check betreftProject").isEqualTo(actual.getBetreftProject()))
            .satisfies(e -> assertThat(e.getIsvanZaaktype()).as("check isvanZaaktype").isEqualTo(actual.getIsvanZaaktype()))
            .satisfies(e -> assertThat(e.getKentDocuments()).as("check kentDocuments").isEqualTo(actual.getKentDocuments()))
            .satisfies(
                e ->
                    assertThat(e.getAfhandelendmedewerkerMedewerkers())
                        .as("check afhandelendmedewerkerMedewerkers")
                        .isEqualTo(actual.getAfhandelendmedewerkerMedewerkers())
            )
            .satisfies(e -> assertThat(e.getHeeftGrondslags()).as("check heeftGrondslags").isEqualTo(actual.getHeeftGrondslags()))
            .satisfies(
                e ->
                    assertThat(e.getUitgevoerdbinnenBedrijfsproces())
                        .as("check uitgevoerdbinnenBedrijfsproces")
                        .isEqualTo(actual.getUitgevoerdbinnenBedrijfsproces())
            )
            .satisfies(
                e -> assertThat(e.getOefentuitBetrokkenes()).as("check oefentuitBetrokkenes").isEqualTo(actual.getOefentuitBetrokkenes())
            );
    }
}
