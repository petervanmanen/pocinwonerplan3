package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OpenbareruimteAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpenbareruimteAllPropertiesEquals(Openbareruimte expected, Openbareruimte actual) {
        assertOpenbareruimteAutoGeneratedPropertiesEquals(expected, actual);
        assertOpenbareruimteAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpenbareruimteAllUpdatablePropertiesEquals(Openbareruimte expected, Openbareruimte actual) {
        assertOpenbareruimteUpdatableFieldsEquals(expected, actual);
        assertOpenbareruimteUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpenbareruimteAutoGeneratedPropertiesEquals(Openbareruimte expected, Openbareruimte actual) {
        assertThat(expected)
            .as("Verify Openbareruimte auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpenbareruimteUpdatableFieldsEquals(Openbareruimte expected, Openbareruimte actual) {
        assertThat(expected)
            .as("Verify Openbareruimte relevant properties")
            .satisfies(
                e -> assertThat(e.getDatumbegingeldigheid()).as("check datumbegingeldigheid").isEqualTo(actual.getDatumbegingeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(
                e -> assertThat(e.getDatumeindegeldigheid()).as("check datumeindegeldigheid").isEqualTo(actual.getDatumeindegeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumingang()).as("check datumingang").isEqualTo(actual.getDatumingang()))
            .satisfies(e -> assertThat(e.getGeconstateerd()).as("check geconstateerd").isEqualTo(actual.getGeconstateerd()))
            .satisfies(e -> assertThat(e.getGeometrie()).as("check geometrie").isEqualTo(actual.getGeometrie()))
            .satisfies(
                e ->
                    assertThat(e.getHuisnummerrangeevenenonevennummers())
                        .as("check huisnummerrangeevenenonevennummers")
                        .isEqualTo(actual.getHuisnummerrangeevenenonevennummers())
            )
            .satisfies(
                e ->
                    assertThat(e.getHuisnummerrangeevennummers())
                        .as("check huisnummerrangeevennummers")
                        .isEqualTo(actual.getHuisnummerrangeevennummers())
            )
            .satisfies(
                e ->
                    assertThat(e.getHuisnummerrangeonevennummers())
                        .as("check huisnummerrangeonevennummers")
                        .isEqualTo(actual.getHuisnummerrangeonevennummers())
            )
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getInonderzoek()).as("check inonderzoek").isEqualTo(actual.getInonderzoek()))
            .satisfies(e -> assertThat(e.getLabelnaam()).as("check labelnaam").isEqualTo(actual.getLabelnaam()))
            .satisfies(e -> assertThat(e.getNaamopenbareruimte()).as("check naamopenbareruimte").isEqualTo(actual.getNaamopenbareruimte()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getStraatcode()).as("check straatcode").isEqualTo(actual.getStraatcode()))
            .satisfies(e -> assertThat(e.getStraatnaam()).as("check straatnaam").isEqualTo(actual.getStraatnaam()))
            .satisfies(e -> assertThat(e.getTypeopenbareruimte()).as("check typeopenbareruimte").isEqualTo(actual.getTypeopenbareruimte()))
            .satisfies(e -> assertThat(e.getVersie()).as("check versie").isEqualTo(actual.getVersie()))
            .satisfies(e -> assertThat(e.getWegsegment()).as("check wegsegment").isEqualTo(actual.getWegsegment()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpenbareruimteUpdatableRelationshipsEquals(Openbareruimte expected, Openbareruimte actual) {}
}
