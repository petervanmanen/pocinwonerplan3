package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FraudegegevensAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFraudegegevensAllPropertiesEquals(Fraudegegevens expected, Fraudegegevens actual) {
        assertFraudegegevensAutoGeneratedPropertiesEquals(expected, actual);
        assertFraudegegevensAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFraudegegevensAllUpdatablePropertiesEquals(Fraudegegevens expected, Fraudegegevens actual) {
        assertFraudegegevensUpdatableFieldsEquals(expected, actual);
        assertFraudegegevensUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFraudegegevensAutoGeneratedPropertiesEquals(Fraudegegevens expected, Fraudegegevens actual) {
        assertThat(expected)
            .as("Verify Fraudegegevens auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFraudegegevensUpdatableFieldsEquals(Fraudegegevens expected, Fraudegegevens actual) {
        assertThat(expected)
            .as("Verify Fraudegegevens relevant properties")
            .satisfies(e -> assertThat(e.getBedragfraude()).as("check bedragfraude").isEqualTo(actual.getBedragfraude()))
            .satisfies(e -> assertThat(e.getDatumeindefraude()).as("check datumeindefraude").isEqualTo(actual.getDatumeindefraude()))
            .satisfies(e -> assertThat(e.getDatumgeconstateerd()).as("check datumgeconstateerd").isEqualTo(actual.getDatumgeconstateerd()))
            .satisfies(e -> assertThat(e.getDatumstartfraude()).as("check datumstartfraude").isEqualTo(actual.getDatumstartfraude()))
            .satisfies(e -> assertThat(e.getVerrekening()).as("check verrekening").isEqualTo(actual.getVerrekening()))
            .satisfies(e -> assertThat(e.getVorderingen()).as("check vorderingen").isEqualTo(actual.getVorderingen()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFraudegegevensUpdatableRelationshipsEquals(Fraudegegevens expected, Fraudegegevens actual) {
        assertThat(expected)
            .as("Verify Fraudegegevens relationships")
            .satisfies(
                e -> assertThat(e.getIsvansoortFraudesoort()).as("check isvansoortFraudesoort").isEqualTo(actual.getIsvansoortFraudesoort())
            )
            .satisfies(
                e ->
                    assertThat(e.getHeeftfraudegegevensClient())
                        .as("check heeftfraudegegevensClient")
                        .isEqualTo(actual.getHeeftfraudegegevensClient())
            );
    }
}
