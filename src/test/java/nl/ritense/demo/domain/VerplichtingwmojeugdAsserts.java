package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerplichtingwmojeugdAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerplichtingwmojeugdAllPropertiesEquals(Verplichtingwmojeugd expected, Verplichtingwmojeugd actual) {
        assertVerplichtingwmojeugdAutoGeneratedPropertiesEquals(expected, actual);
        assertVerplichtingwmojeugdAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerplichtingwmojeugdAllUpdatablePropertiesEquals(Verplichtingwmojeugd expected, Verplichtingwmojeugd actual) {
        assertVerplichtingwmojeugdUpdatableFieldsEquals(expected, actual);
        assertVerplichtingwmojeugdUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerplichtingwmojeugdAutoGeneratedPropertiesEquals(Verplichtingwmojeugd expected, Verplichtingwmojeugd actual) {
        assertThat(expected)
            .as("Verify Verplichtingwmojeugd auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerplichtingwmojeugdUpdatableFieldsEquals(Verplichtingwmojeugd expected, Verplichtingwmojeugd actual) {
        assertThat(expected)
            .as("Verify Verplichtingwmojeugd relevant properties")
            .satisfies(e -> assertThat(e.getBudgetsoort()).as("check budgetsoort").isEqualTo(actual.getBudgetsoort()))
            .satisfies(e -> assertThat(e.getBudgetsoortgroep()).as("check budgetsoortgroep").isEqualTo(actual.getBudgetsoortgroep()))
            .satisfies(e -> assertThat(e.getEinddatumgepland()).as("check einddatumgepland").isEqualTo(actual.getEinddatumgepland()))
            .satisfies(
                e -> assertThat(e.getFeitelijkeeinddatum()).as("check feitelijkeeinddatum").isEqualTo(actual.getFeitelijkeeinddatum())
            )
            .satisfies(e -> assertThat(e.getJaar()).as("check jaar").isEqualTo(actual.getJaar()))
            .satisfies(e -> assertThat(e.getPeriodiciteit()).as("check periodiciteit").isEqualTo(actual.getPeriodiciteit()))
            .satisfies(e -> assertThat(e.getVerplichtingsoort()).as("check verplichtingsoort").isEqualTo(actual.getVerplichtingsoort()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerplichtingwmojeugdUpdatableRelationshipsEquals(Verplichtingwmojeugd expected, Verplichtingwmojeugd actual) {}
}
