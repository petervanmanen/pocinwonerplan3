package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DatabaseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatabaseAllPropertiesEquals(Database expected, Database actual) {
        assertDatabaseAutoGeneratedPropertiesEquals(expected, actual);
        assertDatabaseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatabaseAllUpdatablePropertiesEquals(Database expected, Database actual) {
        assertDatabaseUpdatableFieldsEquals(expected, actual);
        assertDatabaseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatabaseAutoGeneratedPropertiesEquals(Database expected, Database actual) {
        assertThat(expected)
            .as("Verify Database auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatabaseUpdatableFieldsEquals(Database expected, Database actual) {
        assertThat(expected)
            .as("Verify Database relevant properties")
            .satisfies(e -> assertThat(e.getArchitectuur()).as("check architectuur").isEqualTo(actual.getArchitectuur()))
            .satisfies(e -> assertThat(e.getDatabase()).as("check database").isEqualTo(actual.getDatabase()))
            .satisfies(e -> assertThat(e.getDatabaseversie()).as("check databaseversie").isEqualTo(actual.getDatabaseversie()))
            .satisfies(e -> assertThat(e.getDbms()).as("check dbms").isEqualTo(actual.getDbms()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getOtap()).as("check otap").isEqualTo(actual.getOtap()))
            .satisfies(e -> assertThat(e.getVlan()).as("check vlan").isEqualTo(actual.getVlan()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDatabaseUpdatableRelationshipsEquals(Database expected, Database actual) {
        assertThat(expected)
            .as("Verify Database relationships")
            .satisfies(
                e ->
                    assertThat(e.getServervandatabaseServer())
                        .as("check servervandatabaseServer")
                        .isEqualTo(actual.getServervandatabaseServer())
            );
    }
}
