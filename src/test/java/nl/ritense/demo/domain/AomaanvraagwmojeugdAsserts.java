package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AomaanvraagwmojeugdAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAomaanvraagwmojeugdAllPropertiesEquals(Aomaanvraagwmojeugd expected, Aomaanvraagwmojeugd actual) {
        assertAomaanvraagwmojeugdAutoGeneratedPropertiesEquals(expected, actual);
        assertAomaanvraagwmojeugdAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAomaanvraagwmojeugdAllUpdatablePropertiesEquals(Aomaanvraagwmojeugd expected, Aomaanvraagwmojeugd actual) {
        assertAomaanvraagwmojeugdUpdatableFieldsEquals(expected, actual);
        assertAomaanvraagwmojeugdUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAomaanvraagwmojeugdAutoGeneratedPropertiesEquals(Aomaanvraagwmojeugd expected, Aomaanvraagwmojeugd actual) {
        assertThat(expected)
            .as("Verify Aomaanvraagwmojeugd auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAomaanvraagwmojeugdUpdatableFieldsEquals(Aomaanvraagwmojeugd expected, Aomaanvraagwmojeugd actual) {
        assertThat(expected)
            .as("Verify Aomaanvraagwmojeugd relevant properties")
            .satisfies(e -> assertThat(e.getClientreactie()).as("check clientreactie").isEqualTo(actual.getClientreactie()))
            .satisfies(e -> assertThat(e.getDatumbeschikking()).as("check datumbeschikking").isEqualTo(actual.getDatumbeschikking()))
            .satisfies(
                e -> assertThat(e.getDatumeersteafspraak()).as("check datumeersteafspraak").isEqualTo(actual.getDatumeersteafspraak())
            )
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(
                e -> assertThat(e.getDatumplanvastgesteld()).as("check datumplanvastgesteld").isEqualTo(actual.getDatumplanvastgesteld())
            )
            .satisfies(e -> assertThat(e.getDatumstartaanvraag()).as("check datumstartaanvraag").isEqualTo(actual.getDatumstartaanvraag()))
            .satisfies(e -> assertThat(e.getDeskundigheid()).as("check deskundigheid").isEqualTo(actual.getDeskundigheid()))
            .satisfies(e -> assertThat(e.getDoorloopmethodiek()).as("check doorloopmethodiek").isEqualTo(actual.getDoorloopmethodiek()))
            .satisfies(
                e -> assertThat(e.getMaximaledoorlooptijd()).as("check maximaledoorlooptijd").isEqualTo(actual.getMaximaledoorlooptijd())
            )
            .satisfies(e -> assertThat(e.getRedenafsluiting()).as("check redenafsluiting").isEqualTo(actual.getRedenafsluiting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAomaanvraagwmojeugdUpdatableRelationshipsEquals(Aomaanvraagwmojeugd expected, Aomaanvraagwmojeugd actual) {}
}
