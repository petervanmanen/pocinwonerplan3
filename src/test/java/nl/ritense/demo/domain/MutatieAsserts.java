package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class MutatieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutatieAllPropertiesEquals(Mutatie expected, Mutatie actual) {
        assertMutatieAutoGeneratedPropertiesEquals(expected, actual);
        assertMutatieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutatieAllUpdatablePropertiesEquals(Mutatie expected, Mutatie actual) {
        assertMutatieUpdatableFieldsEquals(expected, actual);
        assertMutatieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutatieAutoGeneratedPropertiesEquals(Mutatie expected, Mutatie actual) {
        assertThat(expected)
            .as("Verify Mutatie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutatieUpdatableFieldsEquals(Mutatie expected, Mutatie actual) {
        assertThat(expected)
            .as("Verify Mutatie relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMutatieUpdatableRelationshipsEquals(Mutatie expected, Mutatie actual) {
        assertThat(expected)
            .as("Verify Mutatie relationships")
            .satisfies(e -> assertThat(e.getVanHoofdrekening()).as("check vanHoofdrekening").isEqualTo(actual.getVanHoofdrekening()))
            .satisfies(e -> assertThat(e.getNaarHoofdrekening()).as("check naarHoofdrekening").isEqualTo(actual.getNaarHoofdrekening()))
            .satisfies(
                e ->
                    assertThat(e.getHeeftbetrekkingopKostenplaats())
                        .as("check heeftbetrekkingopKostenplaats")
                        .isEqualTo(actual.getHeeftbetrekkingopKostenplaats())
            );
    }
}
