package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BeperkingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeperkingAllPropertiesEquals(Beperking expected, Beperking actual) {
        assertBeperkingAutoGeneratedPropertiesEquals(expected, actual);
        assertBeperkingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeperkingAllUpdatablePropertiesEquals(Beperking expected, Beperking actual) {
        assertBeperkingUpdatableFieldsEquals(expected, actual);
        assertBeperkingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeperkingAutoGeneratedPropertiesEquals(Beperking expected, Beperking actual) {
        assertThat(expected)
            .as("Verify Beperking auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeperkingUpdatableFieldsEquals(Beperking expected, Beperking actual) {
        assertThat(expected)
            .as("Verify Beperking relevant properties")
            .satisfies(e -> assertThat(e.getCategorie()).as("check categorie").isEqualTo(actual.getCategorie()))
            .satisfies(e -> assertThat(e.getCommentaar()).as("check commentaar").isEqualTo(actual.getCommentaar()))
            .satisfies(e -> assertThat(e.getDuur()).as("check duur").isEqualTo(actual.getDuur()))
            .satisfies(e -> assertThat(e.getWet()).as("check wet").isEqualTo(actual.getWet()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeperkingUpdatableRelationshipsEquals(Beperking expected, Beperking actual) {
        assertThat(expected)
            .as("Verify Beperking relationships")
            .satisfies(
                e ->
                    assertThat(e.getIseenBeperkingscategorie())
                        .as("check iseenBeperkingscategorie")
                        .isEqualTo(actual.getIseenBeperkingscategorie())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsgebaseerdopBeschikking())
                        .as("check isgebaseerdopBeschikking")
                        .isEqualTo(actual.getIsgebaseerdopBeschikking())
            );
    }
}
