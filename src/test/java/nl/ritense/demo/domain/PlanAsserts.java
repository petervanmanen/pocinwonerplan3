package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PlanAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAllPropertiesEquals(Plan expected, Plan actual) {
        assertPlanAutoGeneratedPropertiesEquals(expected, actual);
        assertPlanAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAllUpdatablePropertiesEquals(Plan expected, Plan actual) {
        assertPlanUpdatableFieldsEquals(expected, actual);
        assertPlanUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanAutoGeneratedPropertiesEquals(Plan expected, Plan actual) {
        assertThat(expected)
            .as("Verify Plan auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanUpdatableFieldsEquals(Plan expected, Plan actual) {
        assertThat(expected)
            .as("Verify Plan relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getZeventigprocentverkocht())
                        .as("check zeventigprocentverkocht")
                        .isEqualTo(actual.getZeventigprocentverkocht())
            )
            .satisfies(e -> assertThat(e.getAardgasloos()).as("check aardgasloos").isEqualTo(actual.getAardgasloos()))
            .satisfies(
                e -> assertThat(e.getBestemminggoedgekeurd()).as("check bestemminggoedgekeurd").isEqualTo(actual.getBestemminggoedgekeurd())
            )
            .satisfies(e -> assertThat(e.getEersteoplevering()).as("check eersteoplevering").isEqualTo(actual.getEersteoplevering()))
            .satisfies(e -> assertThat(e.getEigendomgemeente()).as("check eigendomgemeente").isEqualTo(actual.getEigendomgemeente()))
            .satisfies(
                e -> assertThat(e.getGebiedstransformatie()).as("check gebiedstransformatie").isEqualTo(actual.getGebiedstransformatie())
            )
            .satisfies(e -> assertThat(e.getIntentie()).as("check intentie").isEqualTo(actual.getIntentie()))
            .satisfies(e -> assertThat(e.getLaatsteoplevering()).as("check laatsteoplevering").isEqualTo(actual.getLaatsteoplevering()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()))
            .satisfies(e -> assertThat(e.getOnherroepelijk()).as("check onherroepelijk").isEqualTo(actual.getOnherroepelijk()))
            .satisfies(e -> assertThat(e.getPercelen()).as("check percelen").isEqualTo(actual.getPercelen()))
            .satisfies(e -> assertThat(e.getStartbouw()).as("check startbouw").isEqualTo(actual.getStartbouw()))
            .satisfies(e -> assertThat(e.getStartverkoop()).as("check startverkoop").isEqualTo(actual.getStartverkoop()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPlanUpdatableRelationshipsEquals(Plan expected, Plan actual) {
        assertThat(expected)
            .as("Verify Plan relationships")
            .satisfies(
                e ->
                    assertThat(e.getBinnenprogrammaProgramma())
                        .as("check binnenprogrammaProgramma")
                        .isEqualTo(actual.getBinnenprogrammaProgramma())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsprojectleidervanProjectleider())
                        .as("check isprojectleidervanProjectleider")
                        .isEqualTo(actual.getIsprojectleidervanProjectleider())
            )
            .satisfies(
                e ->
                    assertThat(e.getHeeftProjectontwikkelaars())
                        .as("check heeftProjectontwikkelaars")
                        .isEqualTo(actual.getHeeftProjectontwikkelaars())
            );
    }
}
