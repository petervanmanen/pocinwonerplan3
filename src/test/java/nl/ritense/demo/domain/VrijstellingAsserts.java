package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VrijstellingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVrijstellingAllPropertiesEquals(Vrijstelling expected, Vrijstelling actual) {
        assertVrijstellingAutoGeneratedPropertiesEquals(expected, actual);
        assertVrijstellingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVrijstellingAllUpdatablePropertiesEquals(Vrijstelling expected, Vrijstelling actual) {
        assertVrijstellingUpdatableFieldsEquals(expected, actual);
        assertVrijstellingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVrijstellingAutoGeneratedPropertiesEquals(Vrijstelling expected, Vrijstelling actual) {
        assertThat(expected)
            .as("Verify Vrijstelling auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVrijstellingUpdatableFieldsEquals(Vrijstelling expected, Vrijstelling actual) {
        assertThat(expected)
            .as("Verify Vrijstelling relevant properties")
            .satisfies(e -> assertThat(e.getAanvraagtoegekend()).as("check aanvraagtoegekend").isEqualTo(actual.getAanvraagtoegekend()))
            .satisfies(
                e ->
                    assertThat(e.getBuitenlandseschoollocatie())
                        .as("check buitenlandseschoollocatie")
                        .isEqualTo(actual.getBuitenlandseschoollocatie())
            )
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getVerzuimsoort()).as("check verzuimsoort").isEqualTo(actual.getVerzuimsoort()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVrijstellingUpdatableRelationshipsEquals(Vrijstelling expected, Vrijstelling actual) {
        assertThat(expected)
            .as("Verify Vrijstelling relationships")
            .satisfies(e -> assertThat(e.getHeeftSchool()).as("check heeftSchool").isEqualTo(actual.getHeeftSchool()))
            .satisfies(e -> assertThat(e.getHeeftLeerling()).as("check heeftLeerling").isEqualTo(actual.getHeeftLeerling()));
    }
}
