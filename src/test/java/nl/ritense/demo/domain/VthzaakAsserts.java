package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VthzaakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVthzaakAllPropertiesEquals(Vthzaak expected, Vthzaak actual) {
        assertVthzaakAutoGeneratedPropertiesEquals(expected, actual);
        assertVthzaakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVthzaakAllUpdatablePropertiesEquals(Vthzaak expected, Vthzaak actual) {
        assertVthzaakUpdatableFieldsEquals(expected, actual);
        assertVthzaakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVthzaakAutoGeneratedPropertiesEquals(Vthzaak expected, Vthzaak actual) {
        assertThat(expected)
            .as("Verify Vthzaak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVthzaakUpdatableFieldsEquals(Vthzaak expected, Vthzaak actual) {
        assertThat(expected)
            .as("Verify Vthzaak relevant properties")
            .satisfies(e -> assertThat(e.getBehandelaar()).as("check behandelaar").isEqualTo(actual.getBehandelaar()))
            .satisfies(e -> assertThat(e.getBevoegdgezag()).as("check bevoegdgezag").isEqualTo(actual.getBevoegdgezag()))
            .satisfies(e -> assertThat(e.getPrioritering()).as("check prioritering").isEqualTo(actual.getPrioritering()))
            .satisfies(e -> assertThat(e.getTeambehandelaar()).as("check teambehandelaar").isEqualTo(actual.getTeambehandelaar()))
            .satisfies(
                e -> assertThat(e.getUitvoerendeinstantie()).as("check uitvoerendeinstantie").isEqualTo(actual.getUitvoerendeinstantie())
            )
            .satisfies(e -> assertThat(e.getVerkamering()).as("check verkamering").isEqualTo(actual.getVerkamering()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVthzaakUpdatableRelationshipsEquals(Vthzaak expected, Vthzaak actual) {}
}
