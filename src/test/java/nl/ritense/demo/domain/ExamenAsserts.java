package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ExamenAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamenAllPropertiesEquals(Examen expected, Examen actual) {
        assertExamenAutoGeneratedPropertiesEquals(expected, actual);
        assertExamenAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamenAllUpdatablePropertiesEquals(Examen expected, Examen actual) {
        assertExamenUpdatableFieldsEquals(expected, actual);
        assertExamenUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamenAutoGeneratedPropertiesEquals(Examen expected, Examen actual) {
        assertThat(expected)
            .as("Verify Examen auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamenUpdatableFieldsEquals(Examen expected, Examen actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertExamenUpdatableRelationshipsEquals(Examen expected, Examen actual) {
        assertThat(expected)
            .as("Verify Examen relationships")
            .satisfies(
                e ->
                    assertThat(e.getAfgerondmetInburgeringstraject())
                        .as("check afgerondmetInburgeringstraject")
                        .isEqualTo(actual.getAfgerondmetInburgeringstraject())
            );
    }
}
