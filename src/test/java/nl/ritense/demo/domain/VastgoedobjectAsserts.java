package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VastgoedobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedobjectAllPropertiesEquals(Vastgoedobject expected, Vastgoedobject actual) {
        assertVastgoedobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertVastgoedobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedobjectAllUpdatablePropertiesEquals(Vastgoedobject expected, Vastgoedobject actual) {
        assertVastgoedobjectUpdatableFieldsEquals(expected, actual);
        assertVastgoedobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedobjectAutoGeneratedPropertiesEquals(Vastgoedobject expected, Vastgoedobject actual) {
        assertThat(expected)
            .as("Verify Vastgoedobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedobjectUpdatableFieldsEquals(Vastgoedobject expected, Vastgoedobject actual) {
        assertThat(expected)
            .as("Verify Vastgoedobject relevant properties")
            .satisfies(e -> assertThat(e.getAantaletages()).as("check aantaletages").isEqualTo(actual.getAantaletages()))
            .satisfies(
                e -> assertThat(e.getAantalparkeerplaatsen()).as("check aantalparkeerplaatsen").isEqualTo(actual.getAantalparkeerplaatsen())
            )
            .satisfies(e -> assertThat(e.getAantalrioleringen()).as("check aantalrioleringen").isEqualTo(actual.getAantalrioleringen()))
            .satisfies(e -> assertThat(e.getAdresaanduiding()).as("check adresaanduiding").isEqualTo(actual.getAdresaanduiding()))
            .satisfies(e -> assertThat(e.getAfgekochteerfpacht()).as("check afgekochteerfpacht").isEqualTo(actual.getAfgekochteerfpacht()))
            .satisfies(
                e ->
                    assertThat(e.getAfgesprokenconditiescore())
                        .as("check afgesprokenconditiescore")
                        .isEqualTo(actual.getAfgesprokenconditiescore())
            )
            .satisfies(
                e ->
                    assertThat(e.getAfkoopwaarde())
                        .as("check afkoopwaarde")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getAfkoopwaarde())
            )
            .satisfies(
                e ->
                    assertThat(e.getAsbestrapportageaanwezig())
                        .as("check asbestrapportageaanwezig")
                        .isEqualTo(actual.getAsbestrapportageaanwezig())
            )
            .satisfies(
                e ->
                    assertThat(e.getBedragaankoop())
                        .as("check bedragaankoop")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBedragaankoop())
            )
            .satisfies(e -> assertThat(e.getBestemmingsplan()).as("check bestemmingsplan").isEqualTo(actual.getBestemmingsplan()))
            .satisfies(
                e ->
                    assertThat(e.getBoekwaarde())
                        .as("check boekwaarde")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBoekwaarde())
            )
            .satisfies(e -> assertThat(e.getBouwjaar()).as("check bouwjaar").isEqualTo(actual.getBouwjaar()))
            .satisfies(e -> assertThat(e.getBouwwerk()).as("check bouwwerk").isEqualTo(actual.getBouwwerk()))
            .satisfies(e -> assertThat(e.getBovenliggendniveau()).as("check bovenliggendniveau").isEqualTo(actual.getBovenliggendniveau()))
            .satisfies(
                e ->
                    assertThat(e.getBovenliggendniveaucode())
                        .as("check bovenliggendniveaucode")
                        .isEqualTo(actual.getBovenliggendniveaucode())
            )
            .satisfies(
                e -> assertThat(e.getBrutovloeroppervlakte()).as("check brutovloeroppervlakte").isEqualTo(actual.getBrutovloeroppervlakte())
            )
            .satisfies(e -> assertThat(e.getCo2uitstoot()).as("check co2uitstoot").isEqualTo(actual.getCo2uitstoot()))
            .satisfies(e -> assertThat(e.getConditiescore()).as("check conditiescore").isEqualTo(actual.getConditiescore()))
            .satisfies(e -> assertThat(e.getDatumafstoten()).as("check datumafstoten").isEqualTo(actual.getDatumafstoten()))
            .satisfies(
                e ->
                    assertThat(e.getDatumberekeningoppervlak())
                        .as("check datumberekeningoppervlak")
                        .isEqualTo(actual.getDatumberekeningoppervlak())
            )
            .satisfies(e -> assertThat(e.getDatumeigendom()).as("check datumeigendom").isEqualTo(actual.getDatumeigendom()))
            .satisfies(e -> assertThat(e.getDatumverkoop()).as("check datumverkoop").isEqualTo(actual.getDatumverkoop()))
            .satisfies(e -> assertThat(e.getDeelportefeuille()).as("check deelportefeuille").isEqualTo(actual.getDeelportefeuille()))
            .satisfies(
                e ->
                    assertThat(e.getEnergiekosten())
                        .as("check energiekosten")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getEnergiekosten())
            )
            .satisfies(e -> assertThat(e.getEnergielabel()).as("check energielabel").isEqualTo(actual.getEnergielabel()))
            .satisfies(e -> assertThat(e.getEnergieverbruik()).as("check energieverbruik").isEqualTo(actual.getEnergieverbruik()))
            .satisfies(
                e ->
                    assertThat(e.getFiscalewaarde())
                        .as("check fiscalewaarde")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getFiscalewaarde())
            )
            .satisfies(e -> assertThat(e.getFoto()).as("check foto").isEqualTo(actual.getFoto()))
            .satisfies(e -> assertThat(e.getGearchiveerd()).as("check gearchiveerd").isEqualTo(actual.getGearchiveerd()))
            .satisfies(
                e ->
                    assertThat(e.getHerbouwwaarde())
                        .as("check herbouwwaarde")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getHerbouwwaarde())
            )
            .satisfies(e -> assertThat(e.getHoofdstuk()).as("check hoofdstuk").isEqualTo(actual.getHoofdstuk()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(
                e -> assertThat(e.getJaarlaatsterenovatie()).as("check jaarlaatsterenovatie").isEqualTo(actual.getJaarlaatsterenovatie())
            )
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(
                e ->
                    assertThat(e.getMarktwaarde())
                        .as("check marktwaarde")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMarktwaarde())
            )
            .satisfies(e -> assertThat(e.getMonument()).as("check monument").isEqualTo(actual.getMonument()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getEobjectstatus()).as("check eobjectstatus").isEqualTo(actual.getEobjectstatus()))
            .satisfies(e -> assertThat(e.getEobjectstatuscode()).as("check eobjectstatuscode").isEqualTo(actual.getEobjectstatuscode()))
            .satisfies(e -> assertThat(e.getEobjecttype()).as("check eobjecttype").isEqualTo(actual.getEobjecttype()))
            .satisfies(e -> assertThat(e.getEobjecttypecode()).as("check eobjecttypecode").isEqualTo(actual.getEobjecttypecode()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e -> assertThat(e.getOnderhoudscategorie()).as("check onderhoudscategorie").isEqualTo(actual.getOnderhoudscategorie())
            )
            .satisfies(e -> assertThat(e.getOppervlaktekantoor()).as("check oppervlaktekantoor").isEqualTo(actual.getOppervlaktekantoor()))
            .satisfies(e -> assertThat(e.getPortefeuille()).as("check portefeuille").isEqualTo(actual.getPortefeuille()))
            .satisfies(e -> assertThat(e.getPortefeuillecode()).as("check portefeuillecode").isEqualTo(actual.getPortefeuillecode()))
            .satisfies(e -> assertThat(e.getProvincie()).as("check provincie").isEqualTo(actual.getProvincie()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()))
            .satisfies(
                e ->
                    assertThat(e.getVerhuurbaarvloeroppervlak())
                        .as("check verhuurbaarvloeroppervlak")
                        .isEqualTo(actual.getVerhuurbaarvloeroppervlak())
            )
            .satisfies(e -> assertThat(e.getVerkoopbaarheid()).as("check verkoopbaarheid").isEqualTo(actual.getVerkoopbaarheid()))
            .satisfies(
                e ->
                    assertThat(e.getVerkoopbedrag())
                        .as("check verkoopbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getVerkoopbedrag())
            )
            .satisfies(
                e ->
                    assertThat(e.getVerzekerdewaarde())
                        .as("check verzekerdewaarde")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getVerzekerdewaarde())
            )
            .satisfies(
                e ->
                    assertThat(e.getWaardegrond())
                        .as("check waardegrond")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getWaardegrond())
            )
            .satisfies(
                e ->
                    assertThat(e.getWaardeopstal())
                        .as("check waardeopstal")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getWaardeopstal())
            )
            .satisfies(e -> assertThat(e.getWijk()).as("check wijk").isEqualTo(actual.getWijk()))
            .satisfies(
                e ->
                    assertThat(e.getWozwaarde()).as("check wozwaarde").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getWozwaarde())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedobjectUpdatableRelationshipsEquals(Vastgoedobject expected, Vastgoedobject actual) {
        assertThat(expected)
            .as("Verify Vastgoedobject relationships")
            .satisfies(e -> assertThat(e.getBetreftPand()).as("check betreftPand").isEqualTo(actual.getBetreftPand()))
            .satisfies(e -> assertThat(e.getHeeftKostenplaats()).as("check heeftKostenplaats").isEqualTo(actual.getHeeftKostenplaats()));
    }
}
