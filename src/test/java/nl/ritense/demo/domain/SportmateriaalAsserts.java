package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SportmateriaalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportmateriaalAllPropertiesEquals(Sportmateriaal expected, Sportmateriaal actual) {
        assertSportmateriaalAutoGeneratedPropertiesEquals(expected, actual);
        assertSportmateriaalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportmateriaalAllUpdatablePropertiesEquals(Sportmateriaal expected, Sportmateriaal actual) {
        assertSportmateriaalUpdatableFieldsEquals(expected, actual);
        assertSportmateriaalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportmateriaalAutoGeneratedPropertiesEquals(Sportmateriaal expected, Sportmateriaal actual) {
        assertThat(expected)
            .as("Verify Sportmateriaal auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportmateriaalUpdatableFieldsEquals(Sportmateriaal expected, Sportmateriaal actual) {
        assertThat(expected)
            .as("Verify Sportmateriaal relevant properties")
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSportmateriaalUpdatableRelationshipsEquals(Sportmateriaal expected, Sportmateriaal actual) {
        assertThat(expected)
            .as("Verify Sportmateriaal relationships")
            .satisfies(
                e -> assertThat(e.getHeeftBinnenlocaties()).as("check heeftBinnenlocaties").isEqualTo(actual.getHeeftBinnenlocaties())
            );
    }
}
