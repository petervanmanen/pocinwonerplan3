package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PaalAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaalAllPropertiesEquals(Paal expected, Paal actual) {
        assertPaalAutoGeneratedPropertiesEquals(expected, actual);
        assertPaalAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaalAllUpdatablePropertiesEquals(Paal expected, Paal actual) {
        assertPaalUpdatableFieldsEquals(expected, actual);
        assertPaalUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaalAutoGeneratedPropertiesEquals(Paal expected, Paal actual) {
        assertThat(expected)
            .as("Verify Paal auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaalUpdatableFieldsEquals(Paal expected, Paal actual) {
        assertThat(expected)
            .as("Verify Paal relevant properties")
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getDiameter()).as("check diameter").isEqualTo(actual.getDiameter()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveauactueel())
                        .as("check kwaliteitsniveauactueel")
                        .isEqualTo(actual.getKwaliteitsniveauactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveaugewenst())
                        .as("check kwaliteitsniveaugewenst")
                        .isEqualTo(actual.getKwaliteitsniveaugewenst())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getMateriaal()).as("check materiaal").isEqualTo(actual.getMateriaal()))
            .satisfies(e -> assertThat(e.getVorm()).as("check vorm").isEqualTo(actual.getVorm()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPaalUpdatableRelationshipsEquals(Paal expected, Paal actual) {}
}
