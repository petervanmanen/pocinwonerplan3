package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NatuurlijkpersoonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNatuurlijkpersoonAllPropertiesEquals(Natuurlijkpersoon expected, Natuurlijkpersoon actual) {
        assertNatuurlijkpersoonAutoGeneratedPropertiesEquals(expected, actual);
        assertNatuurlijkpersoonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNatuurlijkpersoonAllUpdatablePropertiesEquals(Natuurlijkpersoon expected, Natuurlijkpersoon actual) {
        assertNatuurlijkpersoonUpdatableFieldsEquals(expected, actual);
        assertNatuurlijkpersoonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNatuurlijkpersoonAutoGeneratedPropertiesEquals(Natuurlijkpersoon expected, Natuurlijkpersoon actual) {
        assertThat(expected)
            .as("Verify Natuurlijkpersoon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNatuurlijkpersoonUpdatableFieldsEquals(Natuurlijkpersoon expected, Natuurlijkpersoon actual) {
        assertThat(expected)
            .as("Verify Natuurlijkpersoon relevant properties")
            .satisfies(e -> assertThat(e.getEmpty()).as("check empty").isEqualTo(actual.getEmpty()))
            .satisfies(
                e ->
                    assertThat(e.getAanduidingbijzondernederlanderschappersoon())
                        .as("check aanduidingbijzondernederlanderschappersoon")
                        .isEqualTo(actual.getAanduidingbijzondernederlanderschappersoon())
            )
            .satisfies(
                e -> assertThat(e.getAanduidingnaamgebruik()).as("check aanduidingnaamgebruik").isEqualTo(actual.getAanduidingnaamgebruik())
            )
            .satisfies(
                e -> assertThat(e.getAanhefaanschrijving()).as("check aanhefaanschrijving").isEqualTo(actual.getAanhefaanschrijving())
            )
            .satisfies(e -> assertThat(e.getAcademischetitel()).as("check academischetitel").isEqualTo(actual.getAcademischetitel()))
            .satisfies(e -> assertThat(e.getAchternaam()).as("check achternaam").isEqualTo(actual.getAchternaam()))
            .satisfies(
                e ->
                    assertThat(e.getAdellijketitelofpredikaat())
                        .as("check adellijketitelofpredikaat")
                        .isEqualTo(actual.getAdellijketitelofpredikaat())
            )
            .satisfies(e -> assertThat(e.getAnummer()).as("check anummer").isEqualTo(actual.getAnummer()))
            .satisfies(
                e -> assertThat(e.getBurgerservicenummer()).as("check burgerservicenummer").isEqualTo(actual.getBurgerservicenummer())
            )
            .satisfies(e -> assertThat(e.getDatumgeboorte()).as("check datumgeboorte").isEqualTo(actual.getDatumgeboorte()))
            .satisfies(e -> assertThat(e.getDatumoverlijden()).as("check datumoverlijden").isEqualTo(actual.getDatumoverlijden()))
            .satisfies(e -> assertThat(e.getGeboorteland()).as("check geboorteland").isEqualTo(actual.getGeboorteland()))
            .satisfies(e -> assertThat(e.getGeboorteplaats()).as("check geboorteplaats").isEqualTo(actual.getGeboorteplaats()))
            .satisfies(
                e -> assertThat(e.getGeslachtsaanduiding()).as("check geslachtsaanduiding").isEqualTo(actual.getGeslachtsaanduiding())
            )
            .satisfies(e -> assertThat(e.getGeslachtsnaam()).as("check geslachtsnaam").isEqualTo(actual.getGeslachtsnaam()))
            .satisfies(
                e ->
                    assertThat(e.getGeslachtsnaamaanschrijving())
                        .as("check geslachtsnaamaanschrijving")
                        .isEqualTo(actual.getGeslachtsnaamaanschrijving())
            )
            .satisfies(e -> assertThat(e.getHandlichting()).as("check handlichting").isEqualTo(actual.getHandlichting()))
            .satisfies(
                e ->
                    assertThat(e.getIndicatieafschermingpersoonsgegevens())
                        .as("check indicatieafschermingpersoonsgegevens")
                        .isEqualTo(actual.getIndicatieafschermingpersoonsgegevens())
            )
            .satisfies(e -> assertThat(e.getIndicatieoverleden()).as("check indicatieoverleden").isEqualTo(actual.getIndicatieoverleden()))
            .satisfies(e -> assertThat(e.getLandoverlijden()).as("check landoverlijden").isEqualTo(actual.getLandoverlijden()))
            .satisfies(e -> assertThat(e.getNationaliteit()).as("check nationaliteit").isEqualTo(actual.getNationaliteit()))
            .satisfies(e -> assertThat(e.getOverlijdensplaats()).as("check overlijdensplaats").isEqualTo(actual.getOverlijdensplaats()))
            .satisfies(
                e ->
                    assertThat(e.getVoorlettersaanschrijving())
                        .as("check voorlettersaanschrijving")
                        .isEqualTo(actual.getVoorlettersaanschrijving())
            )
            .satisfies(e -> assertThat(e.getVoornamen()).as("check voornamen").isEqualTo(actual.getVoornamen()))
            .satisfies(
                e ->
                    assertThat(e.getVoornamenaanschrijving())
                        .as("check voornamenaanschrijving")
                        .isEqualTo(actual.getVoornamenaanschrijving())
            )
            .satisfies(
                e ->
                    assertThat(e.getVoorvoegselgeslachtsnaam())
                        .as("check voorvoegselgeslachtsnaam")
                        .isEqualTo(actual.getVoorvoegselgeslachtsnaam())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNatuurlijkpersoonUpdatableRelationshipsEquals(Natuurlijkpersoon expected, Natuurlijkpersoon actual) {}
}
