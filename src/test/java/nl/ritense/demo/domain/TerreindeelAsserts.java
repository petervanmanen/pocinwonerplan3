package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TerreindeelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTerreindeelAllPropertiesEquals(Terreindeel expected, Terreindeel actual) {
        assertTerreindeelAutoGeneratedPropertiesEquals(expected, actual);
        assertTerreindeelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTerreindeelAllUpdatablePropertiesEquals(Terreindeel expected, Terreindeel actual) {
        assertTerreindeelUpdatableFieldsEquals(expected, actual);
        assertTerreindeelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTerreindeelAutoGeneratedPropertiesEquals(Terreindeel expected, Terreindeel actual) {
        assertThat(expected)
            .as("Verify Terreindeel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTerreindeelUpdatableFieldsEquals(Terreindeel expected, Terreindeel actual) {
        assertThat(expected)
            .as("Verify Terreindeel relevant properties")
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(
                e ->
                    assertThat(e.getCultuurhistorischwaardevol())
                        .as("check cultuurhistorischwaardevol")
                        .isEqualTo(actual.getCultuurhistorischwaardevol())
            )
            .satisfies(e -> assertThat(e.getHerplantplicht()).as("check herplantplicht").isEqualTo(actual.getHerplantplicht()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(e -> assertThat(e.getOptalud()).as("check optalud").isEqualTo(actual.getOptalud()))
            .satisfies(e -> assertThat(e.getPercentageloofbos()).as("check percentageloofbos").isEqualTo(actual.getPercentageloofbos()))
            .satisfies(
                e -> assertThat(e.getTerreindeelsoortnaam()).as("check terreindeelsoortnaam").isEqualTo(actual.getTerreindeelsoortnaam())
            )
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTypebewerking()).as("check typebewerking").isEqualTo(actual.getTypebewerking()))
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()))
            .satisfies(e -> assertThat(e.getTypeplus2()).as("check typeplus2").isEqualTo(actual.getTypeplus2()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTerreindeelUpdatableRelationshipsEquals(Terreindeel expected, Terreindeel actual) {}
}
