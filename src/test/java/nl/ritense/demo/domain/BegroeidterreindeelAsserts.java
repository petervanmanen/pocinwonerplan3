package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BegroeidterreindeelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegroeidterreindeelAllPropertiesEquals(Begroeidterreindeel expected, Begroeidterreindeel actual) {
        assertBegroeidterreindeelAutoGeneratedPropertiesEquals(expected, actual);
        assertBegroeidterreindeelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegroeidterreindeelAllUpdatablePropertiesEquals(Begroeidterreindeel expected, Begroeidterreindeel actual) {
        assertBegroeidterreindeelUpdatableFieldsEquals(expected, actual);
        assertBegroeidterreindeelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegroeidterreindeelAutoGeneratedPropertiesEquals(Begroeidterreindeel expected, Begroeidterreindeel actual) {
        assertThat(expected)
            .as("Verify Begroeidterreindeel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegroeidterreindeelUpdatableFieldsEquals(Begroeidterreindeel expected, Begroeidterreindeel actual) {
        assertThat(expected)
            .as("Verify Begroeidterreindeel relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getBegroeidterreindeeloptalud())
                        .as("check begroeidterreindeeloptalud")
                        .isEqualTo(actual.getBegroeidterreindeeloptalud())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidbegroeidterreindeel())
                        .as("check datumbegingeldigheidbegroeidterreindeel")
                        .isEqualTo(actual.getDatumbegingeldigheidbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidbegroeidterreindeel())
                        .as("check datumeindegeldigheidbegroeidterreindeel")
                        .isEqualTo(actual.getDatumeindegeldigheidbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getFysiekvoorkomenbegroeidterreindeel())
                        .as("check fysiekvoorkomenbegroeidterreindeel")
                        .isEqualTo(actual.getFysiekvoorkomenbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getGeometriebegroeidterreindeel())
                        .as("check geometriebegroeidterreindeel")
                        .isEqualTo(actual.getGeometriebegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getIdentificatiebegroeidterreindeel())
                        .as("check identificatiebegroeidterreindeel")
                        .isEqualTo(actual.getIdentificatiebegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKruinlijngeometriebegroeidterreindeel())
                        .as("check kruinlijngeometriebegroeidterreindeel")
                        .isEqualTo(actual.getKruinlijngeometriebegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getLod0geometriebegroeidterreindeel())
                        .as("check lod0geometriebegroeidterreindeel")
                        .isEqualTo(actual.getLod0geometriebegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getPlusfysiekvoorkomenbegroeidterreindeel())
                        .as("check plusfysiekvoorkomenbegroeidterreindeel")
                        .isEqualTo(actual.getPlusfysiekvoorkomenbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getRelatievehoogteliggingbegroeidterreindeel())
                        .as("check relatievehoogteliggingbegroeidterreindeel")
                        .isEqualTo(actual.getRelatievehoogteliggingbegroeidterreindeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getStatusbegroeidterreindeel())
                        .as("check statusbegroeidterreindeel")
                        .isEqualTo(actual.getStatusbegroeidterreindeel())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBegroeidterreindeelUpdatableRelationshipsEquals(Begroeidterreindeel expected, Begroeidterreindeel actual) {}
}
