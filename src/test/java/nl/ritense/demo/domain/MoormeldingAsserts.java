package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MoormeldingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoormeldingAllPropertiesEquals(Moormelding expected, Moormelding actual) {
        assertMoormeldingAutoGeneratedPropertiesEquals(expected, actual);
        assertMoormeldingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoormeldingAllUpdatablePropertiesEquals(Moormelding expected, Moormelding actual) {
        assertMoormeldingUpdatableFieldsEquals(expected, actual);
        assertMoormeldingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoormeldingAutoGeneratedPropertiesEquals(Moormelding expected, Moormelding actual) {
        assertThat(expected)
            .as("Verify Moormelding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoormeldingUpdatableFieldsEquals(Moormelding expected, Moormelding actual) {
        assertThat(expected)
            .as("Verify Moormelding relevant properties")
            .satisfies(e -> assertThat(e.getAdresaanduiding()).as("check adresaanduiding").isEqualTo(actual.getAdresaanduiding()))
            .satisfies(e -> assertThat(e.getDatumaanmelding()).as("check datumaanmelding").isEqualTo(actual.getDatumaanmelding()))
            .satisfies(e -> assertThat(e.getDatumgoedkeuring()).as("check datumgoedkeuring").isEqualTo(actual.getDatumgoedkeuring()))
            .satisfies(e -> assertThat(e.getEindtijd()).as("check eindtijd").isEqualTo(actual.getEindtijd()))
            .satisfies(e -> assertThat(e.getGoedgekeurd()).as("check goedgekeurd").isEqualTo(actual.getGoedgekeurd()))
            .satisfies(
                e ->
                    assertThat(e.getHerstelwerkzaamhedenvereist())
                        .as("check herstelwerkzaamhedenvereist")
                        .isEqualTo(actual.getHerstelwerkzaamhedenvereist())
            )
            .satisfies(
                e ->
                    assertThat(e.getOmschrijvingherstelwerkzaamheden())
                        .as("check omschrijvingherstelwerkzaamheden")
                        .isEqualTo(actual.getOmschrijvingherstelwerkzaamheden())
            )
            .satisfies(e -> assertThat(e.getPubliceren()).as("check publiceren").isEqualTo(actual.getPubliceren()))
            .satisfies(e -> assertThat(e.getStarttijd()).as("check starttijd").isEqualTo(actual.getStarttijd()))
            .satisfies(e -> assertThat(e.getWegbeheerder()).as("check wegbeheerder").isEqualTo(actual.getWegbeheerder()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoormeldingUpdatableRelationshipsEquals(Moormelding expected, Moormelding actual) {}
}
