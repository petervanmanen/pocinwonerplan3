package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RechtspersoonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRechtspersoonAllPropertiesEquals(Rechtspersoon expected, Rechtspersoon actual) {
        assertRechtspersoonAutoGeneratedPropertiesEquals(expected, actual);
        assertRechtspersoonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRechtspersoonAllUpdatablePropertiesEquals(Rechtspersoon expected, Rechtspersoon actual) {
        assertRechtspersoonUpdatableFieldsEquals(expected, actual);
        assertRechtspersoonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRechtspersoonAutoGeneratedPropertiesEquals(Rechtspersoon expected, Rechtspersoon actual) {
        assertThat(expected)
            .as("Verify Rechtspersoon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRechtspersoonUpdatableFieldsEquals(Rechtspersoon expected, Rechtspersoon actual) {
        assertThat(expected)
            .as("Verify Rechtspersoon relevant properties")
            .satisfies(e -> assertThat(e.getAdresbinnenland()).as("check adresbinnenland").isEqualTo(actual.getAdresbinnenland()))
            .satisfies(e -> assertThat(e.getAdresbuitenland()).as("check adresbuitenland").isEqualTo(actual.getAdresbuitenland()))
            .satisfies(
                e -> assertThat(e.getAdrescorrespondentie()).as("check adrescorrespondentie").isEqualTo(actual.getAdrescorrespondentie())
            )
            .satisfies(e -> assertThat(e.getEmailadres()).as("check emailadres").isEqualTo(actual.getEmailadres()))
            .satisfies(e -> assertThat(e.getFaxnummer()).as("check faxnummer").isEqualTo(actual.getFaxnummer()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getKvknummer()).as("check kvknummer").isEqualTo(actual.getKvknummer()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getRechtsvorm()).as("check rechtsvorm").isEqualTo(actual.getRechtsvorm()))
            .satisfies(e -> assertThat(e.getRekeningnummer()).as("check rekeningnummer").isEqualTo(actual.getRekeningnummer()))
            .satisfies(e -> assertThat(e.getTelefoonnummer()).as("check telefoonnummer").isEqualTo(actual.getTelefoonnummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRechtspersoonUpdatableRelationshipsEquals(Rechtspersoon expected, Rechtspersoon actual) {
        assertThat(expected)
            .as("Verify Rechtspersoon relationships")
            .satisfies(
                e ->
                    assertThat(e.getBetrokkenenKadastralemutaties())
                        .as("check betrokkenenKadastralemutaties")
                        .isEqualTo(actual.getBetrokkenenKadastralemutaties())
            );
    }
}
