package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AsielstatushouderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAsielstatushouderAllPropertiesEquals(Asielstatushouder expected, Asielstatushouder actual) {
        assertAsielstatushouderAutoGeneratedPropertiesEquals(expected, actual);
        assertAsielstatushouderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAsielstatushouderAllUpdatablePropertiesEquals(Asielstatushouder expected, Asielstatushouder actual) {
        assertAsielstatushouderUpdatableFieldsEquals(expected, actual);
        assertAsielstatushouderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAsielstatushouderAutoGeneratedPropertiesEquals(Asielstatushouder expected, Asielstatushouder actual) {
        assertThat(expected)
            .as("Verify Asielstatushouder auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAsielstatushouderUpdatableFieldsEquals(Asielstatushouder expected, Asielstatushouder actual) {
        assertThat(expected)
            .as("Verify Asielstatushouder relevant properties")
            .satisfies(e -> assertThat(e.getDigidaangevraagd()).as("check digidaangevraagd").isEqualTo(actual.getDigidaangevraagd()))
            .satisfies(
                e -> assertThat(e.getEmailadresverblijfazc()).as("check emailadresverblijfazc").isEqualTo(actual.getEmailadresverblijfazc())
            )
            .satisfies(e -> assertThat(e.getIsgekoppeldaan()).as("check isgekoppeldaan").isEqualTo(actual.getIsgekoppeldaan()))
            .satisfies(e -> assertThat(e.getLandrijbewijs()).as("check landrijbewijs").isEqualTo(actual.getLandrijbewijs()))
            .satisfies(e -> assertThat(e.getRijbewijs()).as("check rijbewijs").isEqualTo(actual.getRijbewijs()))
            .satisfies(
                e ->
                    assertThat(e.getTelefoonnummerverblijfazc())
                        .as("check telefoonnummerverblijfazc")
                        .isEqualTo(actual.getTelefoonnummerverblijfazc())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAsielstatushouderUpdatableRelationshipsEquals(Asielstatushouder expected, Asielstatushouder actual) {
        assertThat(expected)
            .as("Verify Asielstatushouder relationships")
            .satisfies(
                e ->
                    assertThat(e.getIsgekoppeldaanGemeente())
                        .as("check isgekoppeldaanGemeente")
                        .isEqualTo(actual.getIsgekoppeldaanGemeente())
            );
    }
}
