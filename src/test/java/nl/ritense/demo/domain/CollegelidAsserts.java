package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CollegelidAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollegelidAllPropertiesEquals(Collegelid expected, Collegelid actual) {
        assertCollegelidAutoGeneratedPropertiesEquals(expected, actual);
        assertCollegelidAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollegelidAllUpdatablePropertiesEquals(Collegelid expected, Collegelid actual) {
        assertCollegelidUpdatableFieldsEquals(expected, actual);
        assertCollegelidUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollegelidAutoGeneratedPropertiesEquals(Collegelid expected, Collegelid actual) {
        assertThat(expected)
            .as("Verify Collegelid auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollegelidUpdatableFieldsEquals(Collegelid expected, Collegelid actual) {
        assertThat(expected)
            .as("Verify Collegelid relevant properties")
            .satisfies(e -> assertThat(e.getAchternaam()).as("check achternaam").isEqualTo(actual.getAchternaam()))
            .satisfies(e -> assertThat(e.getDatumaanstelling()).as("check datumaanstelling").isEqualTo(actual.getDatumaanstelling()))
            .satisfies(e -> assertThat(e.getDatumuittreding()).as("check datumuittreding").isEqualTo(actual.getDatumuittreding()))
            .satisfies(e -> assertThat(e.getFractie()).as("check fractie").isEqualTo(actual.getFractie()))
            .satisfies(e -> assertThat(e.getPortefeuille()).as("check portefeuille").isEqualTo(actual.getPortefeuille()))
            .satisfies(e -> assertThat(e.getTitel()).as("check titel").isEqualTo(actual.getTitel()))
            .satisfies(e -> assertThat(e.getVoornaam()).as("check voornaam").isEqualTo(actual.getVoornaam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCollegelidUpdatableRelationshipsEquals(Collegelid expected, Collegelid actual) {}
}
