package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GebouwAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwAllPropertiesEquals(Gebouw expected, Gebouw actual) {
        assertGebouwAutoGeneratedPropertiesEquals(expected, actual);
        assertGebouwAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwAllUpdatablePropertiesEquals(Gebouw expected, Gebouw actual) {
        assertGebouwUpdatableFieldsEquals(expected, actual);
        assertGebouwUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwAutoGeneratedPropertiesEquals(Gebouw expected, Gebouw actual) {
        assertThat(expected)
            .as("Verify Gebouw auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwUpdatableFieldsEquals(Gebouw expected, Gebouw actual) {
        assertThat(expected)
            .as("Verify Gebouw relevant properties")
            .satisfies(e -> assertThat(e.getAantal()).as("check aantal").isEqualTo(actual.getAantal()))
            .satisfies(e -> assertThat(e.getAantaladressen()).as("check aantaladressen").isEqualTo(actual.getAantaladressen()))
            .satisfies(e -> assertThat(e.getAantalkamers()).as("check aantalkamers").isEqualTo(actual.getAantalkamers()))
            .satisfies(e -> assertThat(e.getAardgasloos()).as("check aardgasloos").isEqualTo(actual.getAardgasloos()))
            .satisfies(e -> assertThat(e.getDuurzaam()).as("check duurzaam").isEqualTo(actual.getDuurzaam()))
            .satisfies(e -> assertThat(e.getEnergielabel()).as("check energielabel").isEqualTo(actual.getEnergielabel()))
            .satisfies(e -> assertThat(e.getNatuurinclusief()).as("check natuurinclusief").isEqualTo(actual.getNatuurinclusief()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(e -> assertThat(e.getRegenwater()).as("check regenwater").isEqualTo(actual.getRegenwater()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwUpdatableRelationshipsEquals(Gebouw expected, Gebouw actual) {
        assertThat(expected)
            .as("Verify Gebouw relationships")
            .satisfies(e -> assertThat(e.getBestaatuitPlan()).as("check bestaatuitPlan").isEqualTo(actual.getBestaatuitPlan()));
    }
}
