package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParkeervlakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervlakAllPropertiesEquals(Parkeervlak expected, Parkeervlak actual) {
        assertParkeervlakAutoGeneratedPropertiesEquals(expected, actual);
        assertParkeervlakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervlakAllUpdatablePropertiesEquals(Parkeervlak expected, Parkeervlak actual) {
        assertParkeervlakUpdatableFieldsEquals(expected, actual);
        assertParkeervlakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervlakAutoGeneratedPropertiesEquals(Parkeervlak expected, Parkeervlak actual) {
        assertThat(expected)
            .as("Verify Parkeervlak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervlakUpdatableFieldsEquals(Parkeervlak expected, Parkeervlak actual) {
        assertThat(expected)
            .as("Verify Parkeervlak relevant properties")
            .satisfies(e -> assertThat(e.getAantal()).as("check aantal").isEqualTo(actual.getAantal()))
            .satisfies(e -> assertThat(e.getCoordinaten()).as("check coordinaten").isEqualTo(actual.getCoordinaten()))
            .satisfies(e -> assertThat(e.getDoelgroep()).as("check doelgroep").isEqualTo(actual.getDoelgroep()))
            .satisfies(e -> assertThat(e.getFiscaal()).as("check fiscaal").isEqualTo(actual.getFiscaal()))
            .satisfies(e -> assertThat(e.getPlaats()).as("check plaats").isEqualTo(actual.getPlaats()))
            .satisfies(e -> assertThat(e.getVlakid()).as("check vlakid").isEqualTo(actual.getVlakid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervlakUpdatableRelationshipsEquals(Parkeervlak expected, Parkeervlak actual) {
        assertThat(expected)
            .as("Verify Parkeervlak relationships")
            .satisfies(e -> assertThat(e.getBevatStraatsectie()).as("check bevatStraatsectie").isEqualTo(actual.getBevatStraatsectie()));
    }
}
