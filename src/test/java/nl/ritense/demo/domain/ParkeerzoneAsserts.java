package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ParkeerzoneAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerzoneAllPropertiesEquals(Parkeerzone expected, Parkeerzone actual) {
        assertParkeerzoneAutoGeneratedPropertiesEquals(expected, actual);
        assertParkeerzoneAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerzoneAllUpdatablePropertiesEquals(Parkeerzone expected, Parkeerzone actual) {
        assertParkeerzoneUpdatableFieldsEquals(expected, actual);
        assertParkeerzoneUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerzoneAutoGeneratedPropertiesEquals(Parkeerzone expected, Parkeerzone actual) {
        assertThat(expected)
            .as("Verify Parkeerzone auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerzoneUpdatableFieldsEquals(Parkeerzone expected, Parkeerzone actual) {
        assertThat(expected)
            .as("Verify Parkeerzone relevant properties")
            .satisfies(
                e -> assertThat(e.getAantalparkeervlakken()).as("check aantalparkeervlakken").isEqualTo(actual.getAantalparkeervlakken())
            )
            .satisfies(e -> assertThat(e.getAlleendagtarief()).as("check alleendagtarief").isEqualTo(actual.getAlleendagtarief()))
            .satisfies(
                e ->
                    assertThat(e.getDagtarief()).as("check dagtarief").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getDagtarief())
            )
            .satisfies(e -> assertThat(e.getEindedag()).as("check eindedag").isEqualTo(actual.getEindedag()))
            .satisfies(e -> assertThat(e.getEindtijd()).as("check eindtijd").isEqualTo(actual.getEindtijd()))
            .satisfies(e -> assertThat(e.getGebruik()).as("check gebruik").isEqualTo(actual.getGebruik()))
            .satisfies(e -> assertThat(e.getGeometrie()).as("check geometrie").isEqualTo(actual.getGeometrie()))
            .satisfies(e -> assertThat(e.getIpmcode()).as("check ipmcode").isEqualTo(actual.getIpmcode()))
            .satisfies(e -> assertThat(e.getIpmnaam()).as("check ipmnaam").isEqualTo(actual.getIpmnaam()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getParkeergarage()).as("check parkeergarage").isEqualTo(actual.getParkeergarage()))
            .satisfies(e -> assertThat(e.getSectorcode()).as("check sectorcode").isEqualTo(actual.getSectorcode()))
            .satisfies(e -> assertThat(e.getSoortcode()).as("check soortcode").isEqualTo(actual.getSoortcode()))
            .satisfies(e -> assertThat(e.getStartdag()).as("check startdag").isEqualTo(actual.getStartdag()))
            .satisfies(
                e ->
                    assertThat(e.getStarttarief())
                        .as("check starttarief")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getStarttarief())
            )
            .satisfies(e -> assertThat(e.getStarttijd()).as("check starttijd").isEqualTo(actual.getStarttijd()))
            .satisfies(e -> assertThat(e.getTypecode()).as("check typecode").isEqualTo(actual.getTypecode()))
            .satisfies(e -> assertThat(e.getTypenaam()).as("check typenaam").isEqualTo(actual.getTypenaam()))
            .satisfies(
                e ->
                    assertThat(e.getUurtarief()).as("check uurtarief").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getUurtarief())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeerzoneUpdatableRelationshipsEquals(Parkeerzone expected, Parkeerzone actual) {}
}
