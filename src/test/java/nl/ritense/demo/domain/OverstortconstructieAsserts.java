package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OverstortconstructieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverstortconstructieAllPropertiesEquals(Overstortconstructie expected, Overstortconstructie actual) {
        assertOverstortconstructieAutoGeneratedPropertiesEquals(expected, actual);
        assertOverstortconstructieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverstortconstructieAllUpdatablePropertiesEquals(Overstortconstructie expected, Overstortconstructie actual) {
        assertOverstortconstructieUpdatableFieldsEquals(expected, actual);
        assertOverstortconstructieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverstortconstructieAutoGeneratedPropertiesEquals(Overstortconstructie expected, Overstortconstructie actual) {
        assertThat(expected)
            .as("Verify Overstortconstructie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverstortconstructieUpdatableFieldsEquals(Overstortconstructie expected, Overstortconstructie actual) {
        assertThat(expected)
            .as("Verify Overstortconstructie relevant properties")
            .satisfies(e -> assertThat(e.getBassin()).as("check bassin").isEqualTo(actual.getBassin()))
            .satisfies(e -> assertThat(e.getDrempelbreedte()).as("check drempelbreedte").isEqualTo(actual.getDrempelbreedte()))
            .satisfies(e -> assertThat(e.getDrempelniveau()).as("check drempelniveau").isEqualTo(actual.getDrempelniveau()))
            .satisfies(e -> assertThat(e.getKlep()).as("check klep").isEqualTo(actual.getKlep()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getVormdrempel()).as("check vormdrempel").isEqualTo(actual.getVormdrempel()))
            .satisfies(e -> assertThat(e.getWaking()).as("check waking").isEqualTo(actual.getWaking()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverstortconstructieUpdatableRelationshipsEquals(Overstortconstructie expected, Overstortconstructie actual) {}
}
