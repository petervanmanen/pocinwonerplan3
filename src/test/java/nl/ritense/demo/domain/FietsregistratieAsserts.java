package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class FietsregistratieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFietsregistratieAllPropertiesEquals(Fietsregistratie expected, Fietsregistratie actual) {
        assertFietsregistratieAutoGeneratedPropertiesEquals(expected, actual);
        assertFietsregistratieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFietsregistratieAllUpdatablePropertiesEquals(Fietsregistratie expected, Fietsregistratie actual) {
        assertFietsregistratieUpdatableFieldsEquals(expected, actual);
        assertFietsregistratieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFietsregistratieAutoGeneratedPropertiesEquals(Fietsregistratie expected, Fietsregistratie actual) {
        assertThat(expected)
            .as("Verify Fietsregistratie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFietsregistratieUpdatableFieldsEquals(Fietsregistratie expected, Fietsregistratie actual) {
        assertThat(expected)
            .as("Verify Fietsregistratie relevant properties")
            .satisfies(e -> assertThat(e.getGelabeld()).as("check gelabeld").isEqualTo(actual.getGelabeld()))
            .satisfies(e -> assertThat(e.getVerwijderd()).as("check verwijderd").isEqualTo(actual.getVerwijderd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertFietsregistratieUpdatableRelationshipsEquals(Fietsregistratie expected, Fietsregistratie actual) {}
}
