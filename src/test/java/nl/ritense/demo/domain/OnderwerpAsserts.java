package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OnderwerpAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnderwerpAllPropertiesEquals(Onderwerp expected, Onderwerp actual) {
        assertOnderwerpAutoGeneratedPropertiesEquals(expected, actual);
        assertOnderwerpAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnderwerpAllUpdatablePropertiesEquals(Onderwerp expected, Onderwerp actual) {
        assertOnderwerpUpdatableFieldsEquals(expected, actual);
        assertOnderwerpUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnderwerpAutoGeneratedPropertiesEquals(Onderwerp expected, Onderwerp actual) {
        assertThat(expected)
            .as("Verify Onderwerp auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnderwerpUpdatableFieldsEquals(Onderwerp expected, Onderwerp actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOnderwerpUpdatableRelationshipsEquals(Onderwerp expected, Onderwerp actual) {
        assertThat(expected)
            .as("Verify Onderwerp relationships")
            .satisfies(
                e ->
                    assertThat(e.getHoofdonderwerpOnderwerp())
                        .as("check hoofdonderwerpOnderwerp")
                        .isEqualTo(actual.getHoofdonderwerpOnderwerp())
            );
    }
}
