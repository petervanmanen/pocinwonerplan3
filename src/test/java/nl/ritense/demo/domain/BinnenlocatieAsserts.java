package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BinnenlocatieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinnenlocatieAllPropertiesEquals(Binnenlocatie expected, Binnenlocatie actual) {
        assertBinnenlocatieAutoGeneratedPropertiesEquals(expected, actual);
        assertBinnenlocatieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinnenlocatieAllUpdatablePropertiesEquals(Binnenlocatie expected, Binnenlocatie actual) {
        assertBinnenlocatieUpdatableFieldsEquals(expected, actual);
        assertBinnenlocatieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinnenlocatieAutoGeneratedPropertiesEquals(Binnenlocatie expected, Binnenlocatie actual) {
        assertThat(expected)
            .as("Verify Binnenlocatie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinnenlocatieUpdatableFieldsEquals(Binnenlocatie expected, Binnenlocatie actual) {
        assertThat(expected)
            .as("Verify Binnenlocatie relevant properties")
            .satisfies(e -> assertThat(e.getAdres()).as("check adres").isEqualTo(actual.getAdres()))
            .satisfies(e -> assertThat(e.getBouwjaar()).as("check bouwjaar").isEqualTo(actual.getBouwjaar()))
            .satisfies(e -> assertThat(e.getGemeentelijk()).as("check gemeentelijk").isEqualTo(actual.getGemeentelijk()))
            .satisfies(
                e ->
                    assertThat(e.getGeschattekostenperjaar())
                        .as("check geschattekostenperjaar")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGeschattekostenperjaar())
            )
            .satisfies(e -> assertThat(e.getGymzaal()).as("check gymzaal").isEqualTo(actual.getGymzaal()))
            .satisfies(e -> assertThat(e.getKlokurenonderwijs()).as("check klokurenonderwijs").isEqualTo(actual.getKlokurenonderwijs()))
            .satisfies(
                e -> assertThat(e.getKlokurenverenigingen()).as("check klokurenverenigingen").isEqualTo(actual.getKlokurenverenigingen())
            )
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(e -> assertThat(e.getOnderhoudsniveau()).as("check onderhoudsniveau").isEqualTo(actual.getOnderhoudsniveau()))
            .satisfies(e -> assertThat(e.getOnderhoudsstatus()).as("check onderhoudsstatus").isEqualTo(actual.getOnderhoudsstatus()))
            .satisfies(e -> assertThat(e.getSporthal()).as("check sporthal").isEqualTo(actual.getSporthal()))
            .satisfies(e -> assertThat(e.getVloeroppervlakte()).as("check vloeroppervlakte").isEqualTo(actual.getVloeroppervlakte()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBinnenlocatieUpdatableRelationshipsEquals(Binnenlocatie expected, Binnenlocatie actual) {
        assertThat(expected)
            .as("Verify Binnenlocatie relationships")
            .satisfies(
                e ->
                    assertThat(e.getIsgevestigdinVerblijfsobject())
                        .as("check isgevestigdinVerblijfsobject")
                        .isEqualTo(actual.getIsgevestigdinVerblijfsobject())
            )
            .satisfies(e -> assertThat(e.getBedientWijk()).as("check bedientWijk").isEqualTo(actual.getBedientWijk()))
            .satisfies(e -> assertThat(e.getHeeftBelijnings()).as("check heeftBelijnings").isEqualTo(actual.getHeeftBelijnings()))
            .satisfies(
                e -> assertThat(e.getHeeftSportmateriaals()).as("check heeftSportmateriaals").isEqualTo(actual.getHeeftSportmateriaals())
            );
    }
}
