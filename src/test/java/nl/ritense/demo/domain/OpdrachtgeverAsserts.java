package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OpdrachtgeverAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpdrachtgeverAllPropertiesEquals(Opdrachtgever expected, Opdrachtgever actual) {
        assertOpdrachtgeverAutoGeneratedPropertiesEquals(expected, actual);
        assertOpdrachtgeverAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpdrachtgeverAllUpdatablePropertiesEquals(Opdrachtgever expected, Opdrachtgever actual) {
        assertOpdrachtgeverUpdatableFieldsEquals(expected, actual);
        assertOpdrachtgeverUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpdrachtgeverAutoGeneratedPropertiesEquals(Opdrachtgever expected, Opdrachtgever actual) {
        assertThat(expected)
            .as("Verify Opdrachtgever auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpdrachtgeverUpdatableFieldsEquals(Opdrachtgever expected, Opdrachtgever actual) {
        assertThat(expected)
            .as("Verify Opdrachtgever relevant properties")
            .satisfies(e -> assertThat(e.getClustercode()).as("check clustercode").isEqualTo(actual.getClustercode()))
            .satisfies(
                e -> assertThat(e.getClusteromschrijving()).as("check clusteromschrijving").isEqualTo(actual.getClusteromschrijving())
            )
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOpdrachtgeverUpdatableRelationshipsEquals(Opdrachtgever expected, Opdrachtgever actual) {
        assertThat(expected)
            .as("Verify Opdrachtgever relationships")
            .satisfies(
                e -> assertThat(e.getUitgevoerddoorFunctie()).as("check uitgevoerddoorFunctie").isEqualTo(actual.getUitgevoerddoorFunctie())
            );
    }
}
