package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class InstallatieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstallatieAllPropertiesEquals(Installatie expected, Installatie actual) {
        assertInstallatieAutoGeneratedPropertiesEquals(expected, actual);
        assertInstallatieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstallatieAllUpdatablePropertiesEquals(Installatie expected, Installatie actual) {
        assertInstallatieUpdatableFieldsEquals(expected, actual);
        assertInstallatieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstallatieAutoGeneratedPropertiesEquals(Installatie expected, Installatie actual) {
        assertThat(expected)
            .as("Verify Installatie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstallatieUpdatableFieldsEquals(Installatie expected, Installatie actual) {
        assertThat(expected)
            .as("Verify Installatie relevant properties")
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getEancode()).as("check eancode").isEqualTo(actual.getEancode()))
            .satisfies(e -> assertThat(e.getFabrikant()).as("check fabrikant").isEqualTo(actual.getFabrikant()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(e -> assertThat(e.getInbelgegevens()).as("check inbelgegevens").isEqualTo(actual.getInbelgegevens()))
            .satisfies(e -> assertThat(e.getInstallateur()).as("check installateur").isEqualTo(actual.getInstallateur()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getTypecommunicatie()).as("check typecommunicatie").isEqualTo(actual.getTypecommunicatie()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInstallatieUpdatableRelationshipsEquals(Installatie expected, Installatie actual) {}
}
