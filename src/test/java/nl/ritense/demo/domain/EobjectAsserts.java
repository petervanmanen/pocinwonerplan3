package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjectAllPropertiesEquals(Eobject expected, Eobject actual) {
        assertEobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertEobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjectAllUpdatablePropertiesEquals(Eobject expected, Eobject actual) {
        assertEobjectUpdatableFieldsEquals(expected, actual);
        assertEobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjectAutoGeneratedPropertiesEquals(Eobject expected, Eobject actual) {
        assertThat(expected)
            .as("Verify Eobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjectUpdatableFieldsEquals(Eobject expected, Eobject actual) {
        assertThat(expected)
            .as("Verify Eobject relevant properties")
            .satisfies(e -> assertThat(e.getAdresbinnenland()).as("check adresbinnenland").isEqualTo(actual.getAdresbinnenland()))
            .satisfies(e -> assertThat(e.getAdresbuitenland()).as("check adresbuitenland").isEqualTo(actual.getAdresbuitenland()))
            .satisfies(e -> assertThat(e.getDomein()).as("check domein").isEqualTo(actual.getDomein()))
            .satisfies(e -> assertThat(e.getGeometrie()).as("check geometrie").isEqualTo(actual.getGeometrie()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getIndicatierisico()).as("check indicatierisico").isEqualTo(actual.getIndicatierisico()))
            .satisfies(
                e -> assertThat(e.getKadastraleaanduiding()).as("check kadastraleaanduiding").isEqualTo(actual.getKadastraleaanduiding())
            )
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getEobjecttype()).as("check eobjecttype").isEqualTo(actual.getEobjecttype()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEobjectUpdatableRelationshipsEquals(Eobject expected, Eobject actual) {}
}
