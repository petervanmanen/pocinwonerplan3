package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MoraanvraagofmeldingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoraanvraagofmeldingAllPropertiesEquals(Moraanvraagofmelding expected, Moraanvraagofmelding actual) {
        assertMoraanvraagofmeldingAutoGeneratedPropertiesEquals(expected, actual);
        assertMoraanvraagofmeldingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoraanvraagofmeldingAllUpdatablePropertiesEquals(Moraanvraagofmelding expected, Moraanvraagofmelding actual) {
        assertMoraanvraagofmeldingUpdatableFieldsEquals(expected, actual);
        assertMoraanvraagofmeldingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoraanvraagofmeldingAutoGeneratedPropertiesEquals(Moraanvraagofmelding expected, Moraanvraagofmelding actual) {
        assertThat(expected)
            .as("Verify Moraanvraagofmelding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoraanvraagofmeldingUpdatableFieldsEquals(Moraanvraagofmelding expected, Moraanvraagofmelding actual) {
        assertThat(expected)
            .as("Verify Moraanvraagofmelding relevant properties")
            .satisfies(e -> assertThat(e.getCrow()).as("check crow").isEqualTo(actual.getCrow()))
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(
                e -> assertThat(e.getLocatieomschrijving()).as("check locatieomschrijving").isEqualTo(actual.getLocatieomschrijving())
            )
            .satisfies(
                e -> assertThat(e.getMeldingomschrijving()).as("check meldingomschrijving").isEqualTo(actual.getMeldingomschrijving())
            )
            .satisfies(e -> assertThat(e.getMeldingtekst()).as("check meldingtekst").isEqualTo(actual.getMeldingtekst()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMoraanvraagofmeldingUpdatableRelationshipsEquals(Moraanvraagofmelding expected, Moraanvraagofmelding actual) {}
}
