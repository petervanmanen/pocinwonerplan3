package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ViaductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViaductAllPropertiesEquals(Viaduct expected, Viaduct actual) {
        assertViaductAutoGeneratedPropertiesEquals(expected, actual);
        assertViaductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViaductAllUpdatablePropertiesEquals(Viaduct expected, Viaduct actual) {
        assertViaductUpdatableFieldsEquals(expected, actual);
        assertViaductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViaductAutoGeneratedPropertiesEquals(Viaduct expected, Viaduct actual) {
        assertThat(expected)
            .as("Verify Viaduct auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViaductUpdatableFieldsEquals(Viaduct expected, Viaduct actual) {
        assertThat(expected)
            .as("Verify Viaduct relevant properties")
            .satisfies(
                e -> assertThat(e.getAantaloverspanningen()).as("check aantaloverspanningen").isEqualTo(actual.getAantaloverspanningen())
            )
            .satisfies(
                e -> assertThat(e.getBelastingklassenieuw()).as("check belastingklassenieuw").isEqualTo(actual.getBelastingklassenieuw())
            )
            .satisfies(e -> assertThat(e.getBelastingklasseoud()).as("check belastingklasseoud").isEqualTo(actual.getBelastingklasseoud()))
            .satisfies(e -> assertThat(e.getDraagvermogen()).as("check draagvermogen").isEqualTo(actual.getDraagvermogen()))
            .satisfies(
                e ->
                    assertThat(e.getMaximaaltoelaatbaarvoertuiggewicht())
                        .as("check maximaaltoelaatbaarvoertuiggewicht")
                        .isEqualTo(actual.getMaximaaltoelaatbaarvoertuiggewicht())
            )
            .satisfies(
                e -> assertThat(e.getMaximaleasbelasting()).as("check maximaleasbelasting").isEqualTo(actual.getMaximaleasbelasting())
            )
            .satisfies(
                e -> assertThat(e.getMaximaleoverspanning()).as("check maximaleoverspanning").isEqualTo(actual.getMaximaleoverspanning())
            )
            .satisfies(
                e ->
                    assertThat(e.getOverbruggingsobjectdoorrijopening())
                        .as("check overbruggingsobjectdoorrijopening")
                        .isEqualTo(actual.getOverbruggingsobjectdoorrijopening())
            )
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getWaterobject()).as("check waterobject").isEqualTo(actual.getWaterobject()))
            .satisfies(e -> assertThat(e.getZwaarstevoertuig()).as("check zwaarstevoertuig").isEqualTo(actual.getZwaarstevoertuig()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertViaductUpdatableRelationshipsEquals(Viaduct expected, Viaduct actual) {}
}
