package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OverbruggingsobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsobjectAllPropertiesEquals(Overbruggingsobject expected, Overbruggingsobject actual) {
        assertOverbruggingsobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertOverbruggingsobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsobjectAllUpdatablePropertiesEquals(Overbruggingsobject expected, Overbruggingsobject actual) {
        assertOverbruggingsobjectUpdatableFieldsEquals(expected, actual);
        assertOverbruggingsobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsobjectAutoGeneratedPropertiesEquals(Overbruggingsobject expected, Overbruggingsobject actual) {
        assertThat(expected)
            .as("Verify Overbruggingsobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsobjectUpdatableFieldsEquals(Overbruggingsobject expected, Overbruggingsobject actual) {
        assertThat(expected)
            .as("Verify Overbruggingsobject relevant properties")
            .satisfies(e -> assertThat(e.getAanleghoogte()).as("check aanleghoogte").isEqualTo(actual.getAanleghoogte()))
            .satisfies(
                e ->
                    assertThat(e.getAntigraffitivoorziening())
                        .as("check antigraffitivoorziening")
                        .isEqualTo(actual.getAntigraffitivoorziening())
            )
            .satisfies(e -> assertThat(e.getBereikbaarheid()).as("check bereikbaarheid").isEqualTo(actual.getBereikbaarheid()))
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(e -> assertThat(e.getInstallateur()).as("check installateur").isEqualTo(actual.getInstallateur()))
            .satisfies(e -> assertThat(e.getJaarconserveren()).as("check jaarconserveren").isEqualTo(actual.getJaarconserveren()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(e -> assertThat(e.getJaarrenovatie()).as("check jaarrenovatie").isEqualTo(actual.getJaarrenovatie()))
            .satisfies(e -> assertThat(e.getJaarvervanging()).as("check jaarvervanging").isEqualTo(actual.getJaarvervanging()))
            .satisfies(e -> assertThat(e.getKleur()).as("check kleur").isEqualTo(actual.getKleur()))
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveauactueel())
                        .as("check kwaliteitsniveauactueel")
                        .isEqualTo(actual.getKwaliteitsniveauactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveaugewenst())
                        .as("check kwaliteitsniveaugewenst")
                        .isEqualTo(actual.getKwaliteitsniveaugewenst())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLooprichel()).as("check looprichel").isEqualTo(actual.getLooprichel()))
            .satisfies(
                e -> assertThat(e.getMinimumconditiescore()).as("check minimumconditiescore").isEqualTo(actual.getMinimumconditiescore())
            )
            .satisfies(e -> assertThat(e.getOnderhoudsregime()).as("check onderhoudsregime").isEqualTo(actual.getOnderhoudsregime()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(
                e ->
                    assertThat(e.getOverbruggingsobjectmateriaal())
                        .as("check overbruggingsobjectmateriaal")
                        .isEqualTo(actual.getOverbruggingsobjectmateriaal())
            )
            .satisfies(
                e ->
                    assertThat(e.getOverbruggingsobjectmodaliteit())
                        .as("check overbruggingsobjectmodaliteit")
                        .isEqualTo(actual.getOverbruggingsobjectmodaliteit())
            )
            .satisfies(
                e -> assertThat(e.getTechnischelevensduur()).as("check technischelevensduur").isEqualTo(actual.getTechnischelevensduur())
            )
            .satisfies(e -> assertThat(e.getTypefundering()).as("check typefundering").isEqualTo(actual.getTypefundering()))
            .satisfies(e -> assertThat(e.getVervangingswaarde()).as("check vervangingswaarde").isEqualTo(actual.getVervangingswaarde()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOverbruggingsobjectUpdatableRelationshipsEquals(Overbruggingsobject expected, Overbruggingsobject actual) {}
}
