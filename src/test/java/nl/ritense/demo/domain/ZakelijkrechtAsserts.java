package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ZakelijkrechtAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZakelijkrechtAllPropertiesEquals(Zakelijkrecht expected, Zakelijkrecht actual) {
        assertZakelijkrechtAutoGeneratedPropertiesEquals(expected, actual);
        assertZakelijkrechtAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZakelijkrechtAllUpdatablePropertiesEquals(Zakelijkrecht expected, Zakelijkrecht actual) {
        assertZakelijkrechtUpdatableFieldsEquals(expected, actual);
        assertZakelijkrechtUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZakelijkrechtAutoGeneratedPropertiesEquals(Zakelijkrecht expected, Zakelijkrecht actual) {
        assertThat(expected)
            .as("Verify Zakelijkrecht auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZakelijkrechtUpdatableFieldsEquals(Zakelijkrecht expected, Zakelijkrecht actual) {
        assertThat(expected)
            .as("Verify Zakelijkrecht relevant properties")
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getKosten()).as("check kosten").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getKosten()))
            .satisfies(e -> assertThat(e.getSoort()).as("check soort").isEqualTo(actual.getSoort()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZakelijkrechtUpdatableRelationshipsEquals(Zakelijkrecht expected, Zakelijkrecht actual) {}
}
