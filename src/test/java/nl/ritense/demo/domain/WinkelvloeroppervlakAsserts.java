package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WinkelvloeroppervlakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWinkelvloeroppervlakAllPropertiesEquals(Winkelvloeroppervlak expected, Winkelvloeroppervlak actual) {
        assertWinkelvloeroppervlakAutoGeneratedPropertiesEquals(expected, actual);
        assertWinkelvloeroppervlakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWinkelvloeroppervlakAllUpdatablePropertiesEquals(Winkelvloeroppervlak expected, Winkelvloeroppervlak actual) {
        assertWinkelvloeroppervlakUpdatableFieldsEquals(expected, actual);
        assertWinkelvloeroppervlakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWinkelvloeroppervlakAutoGeneratedPropertiesEquals(Winkelvloeroppervlak expected, Winkelvloeroppervlak actual) {
        assertThat(expected)
            .as("Verify Winkelvloeroppervlak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWinkelvloeroppervlakUpdatableFieldsEquals(Winkelvloeroppervlak expected, Winkelvloeroppervlak actual) {
        assertThat(expected)
            .as("Verify Winkelvloeroppervlak relevant properties")
            .satisfies(e -> assertThat(e.getAantalkassa()).as("check aantalkassa").isEqualTo(actual.getAantalkassa()))
            .satisfies(e -> assertThat(e.getBronwvo()).as("check bronwvo").isEqualTo(actual.getBronwvo()))
            .satisfies(e -> assertThat(e.getLeegstand()).as("check leegstand").isEqualTo(actual.getLeegstand()))
            .satisfies(
                e ->
                    assertThat(e.getWinkelvloeroppervlakte())
                        .as("check winkelvloeroppervlakte")
                        .isEqualTo(actual.getWinkelvloeroppervlakte())
            )
            .satisfies(e -> assertThat(e.getWvoklasse()).as("check wvoklasse").isEqualTo(actual.getWvoklasse()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWinkelvloeroppervlakUpdatableRelationshipsEquals(Winkelvloeroppervlak expected, Winkelvloeroppervlak actual) {}
}
