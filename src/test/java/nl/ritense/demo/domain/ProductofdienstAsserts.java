package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductofdienstAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductofdienstAllPropertiesEquals(Productofdienst expected, Productofdienst actual) {
        assertProductofdienstAutoGeneratedPropertiesEquals(expected, actual);
        assertProductofdienstAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductofdienstAllUpdatablePropertiesEquals(Productofdienst expected, Productofdienst actual) {
        assertProductofdienstUpdatableFieldsEquals(expected, actual);
        assertProductofdienstUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductofdienstAutoGeneratedPropertiesEquals(Productofdienst expected, Productofdienst actual) {
        assertThat(expected)
            .as("Verify Productofdienst auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductofdienstUpdatableFieldsEquals(Productofdienst expected, Productofdienst actual) {
        assertThat(expected)
            .as("Verify Productofdienst relevant properties")
            .satisfies(e -> assertThat(e.getAfhandeltijd()).as("check afhandeltijd").isEqualTo(actual.getAfhandeltijd()))
            .satisfies(e -> assertThat(e.getIngebruik()).as("check ingebruik").isEqualTo(actual.getIngebruik()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductofdienstUpdatableRelationshipsEquals(Productofdienst expected, Productofdienst actual) {}
}
