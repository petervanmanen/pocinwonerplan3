package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ActiviteitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteitAllPropertiesEquals(Activiteit expected, Activiteit actual) {
        assertActiviteitAutoGeneratedPropertiesEquals(expected, actual);
        assertActiviteitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteitAllUpdatablePropertiesEquals(Activiteit expected, Activiteit actual) {
        assertActiviteitUpdatableFieldsEquals(expected, actual);
        assertActiviteitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteitAutoGeneratedPropertiesEquals(Activiteit expected, Activiteit actual) {
        assertThat(expected)
            .as("Verify Activiteit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteitUpdatableFieldsEquals(Activiteit expected, Activiteit actual) {
        assertThat(expected)
            .as("Verify Activiteit relevant properties")
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActiviteitUpdatableRelationshipsEquals(Activiteit expected, Activiteit actual) {
        assertThat(expected)
            .as("Verify Activiteit relationships")
            .satisfies(
                e ->
                    assertThat(e.getGerelateerdeactiviteitActiviteit())
                        .as("check gerelateerdeactiviteitActiviteit")
                        .isEqualTo(actual.getGerelateerdeactiviteitActiviteit())
            )
            .satisfies(
                e ->
                    assertThat(e.getBovenliggendeactiviteitActiviteit())
                        .as("check bovenliggendeactiviteitActiviteit")
                        .isEqualTo(actual.getBovenliggendeactiviteitActiviteit())
            )
            .satisfies(e -> assertThat(e.getHeeftRondleiding()).as("check heeftRondleiding").isEqualTo(actual.getHeeftRondleiding()))
            .satisfies(
                e ->
                    assertThat(e.getVansoortActiviteitsoort())
                        .as("check vansoortActiviteitsoort")
                        .isEqualTo(actual.getVansoortActiviteitsoort())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsverbondenmetLocaties())
                        .as("check isverbondenmetLocaties")
                        .isEqualTo(actual.getIsverbondenmetLocaties())
            )
            .satisfies(
                e -> assertThat(e.getBestaatuitActiviteit2()).as("check bestaatuitActiviteit2").isEqualTo(actual.getBestaatuitActiviteit2())
            )
            .satisfies(
                e -> assertThat(e.getBestaatuitProgramma()).as("check bestaatuitProgramma").isEqualTo(actual.getBestaatuitProgramma())
            )
            .satisfies(e -> assertThat(e.getBetreftVerzoeks()).as("check betreftVerzoeks").isEqualTo(actual.getBetreftVerzoeks()));
    }
}
