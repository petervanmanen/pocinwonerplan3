package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BeschikkingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschikkingAllPropertiesEquals(Beschikking expected, Beschikking actual) {
        assertBeschikkingAutoGeneratedPropertiesEquals(expected, actual);
        assertBeschikkingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschikkingAllUpdatablePropertiesEquals(Beschikking expected, Beschikking actual) {
        assertBeschikkingUpdatableFieldsEquals(expected, actual);
        assertBeschikkingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschikkingAutoGeneratedPropertiesEquals(Beschikking expected, Beschikking actual) {
        assertThat(expected)
            .as("Verify Beschikking auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschikkingUpdatableFieldsEquals(Beschikking expected, Beschikking actual) {
        assertThat(expected)
            .as("Verify Beschikking relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getCommentaar()).as("check commentaar").isEqualTo(actual.getCommentaar()))
            .satisfies(e -> assertThat(e.getDatumafgifte()).as("check datumafgifte").isEqualTo(actual.getDatumafgifte()))
            .satisfies(e -> assertThat(e.getGrondslagen()).as("check grondslagen").isEqualTo(actual.getGrondslagen()))
            .satisfies(e -> assertThat(e.getWet()).as("check wet").isEqualTo(actual.getWet()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeschikkingUpdatableRelationshipsEquals(Beschikking expected, Beschikking actual) {
        assertThat(expected)
            .as("Verify Beschikking relationships")
            .satisfies(e -> assertThat(e.getEmptyClient()).as("check emptyClient").isEqualTo(actual.getEmptyClient()))
            .satisfies(
                e ->
                    assertThat(e.getGeeftafClientbegeleider())
                        .as("check geeftafClientbegeleider")
                        .isEqualTo(actual.getGeeftafClientbegeleider())
            );
    }
}
