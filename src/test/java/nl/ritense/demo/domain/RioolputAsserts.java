package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RioolputAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRioolputAllPropertiesEquals(Rioolput expected, Rioolput actual) {
        assertRioolputAutoGeneratedPropertiesEquals(expected, actual);
        assertRioolputAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRioolputAllUpdatablePropertiesEquals(Rioolput expected, Rioolput actual) {
        assertRioolputUpdatableFieldsEquals(expected, actual);
        assertRioolputUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRioolputAutoGeneratedPropertiesEquals(Rioolput expected, Rioolput actual) {
        assertThat(expected)
            .as("Verify Rioolput auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRioolputUpdatableFieldsEquals(Rioolput expected, Rioolput actual) {
        assertThat(expected)
            .as("Verify Rioolput relevant properties")
            .satisfies(e -> assertThat(e.getAantalbedrijven()).as("check aantalbedrijven").isEqualTo(actual.getAantalbedrijven()))
            .satisfies(e -> assertThat(e.getAantalrecreatie()).as("check aantalrecreatie").isEqualTo(actual.getAantalrecreatie()))
            .satisfies(e -> assertThat(e.getAantalwoningen()).as("check aantalwoningen").isEqualTo(actual.getAantalwoningen()))
            .satisfies(e -> assertThat(e.getAfvoerendoppervlak()).as("check afvoerendoppervlak").isEqualTo(actual.getAfvoerendoppervlak()))
            .satisfies(e -> assertThat(e.getBergendoppervlak()).as("check bergendoppervlak").isEqualTo(actual.getBergendoppervlak()))
            .satisfies(
                e ->
                    assertThat(e.getRioolputconstructieonderdeel())
                        .as("check rioolputconstructieonderdeel")
                        .isEqualTo(actual.getRioolputconstructieonderdeel())
            )
            .satisfies(
                e -> assertThat(e.getRioolputrioolleiding()).as("check rioolputrioolleiding").isEqualTo(actual.getRioolputrioolleiding())
            )
            .satisfies(e -> assertThat(e.getRisicogebied()).as("check risicogebied").isEqualTo(actual.getRisicogebied()))
            .satisfies(e -> assertThat(e.getToegangbreedte()).as("check toegangbreedte").isEqualTo(actual.getToegangbreedte()))
            .satisfies(e -> assertThat(e.getToeganglengte()).as("check toeganglengte").isEqualTo(actual.getToeganglengte()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRioolputUpdatableRelationshipsEquals(Rioolput expected, Rioolput actual) {}
}
