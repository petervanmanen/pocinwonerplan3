package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BetalingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetalingAllPropertiesEquals(Betaling expected, Betaling actual) {
        assertBetalingAutoGeneratedPropertiesEquals(expected, actual);
        assertBetalingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetalingAllUpdatablePropertiesEquals(Betaling expected, Betaling actual) {
        assertBetalingUpdatableFieldsEquals(expected, actual);
        assertBetalingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetalingAutoGeneratedPropertiesEquals(Betaling expected, Betaling actual) {
        assertThat(expected)
            .as("Verify Betaling auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetalingUpdatableFieldsEquals(Betaling expected, Betaling actual) {
        assertThat(expected)
            .as("Verify Betaling relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getDatumtijd()).as("check datumtijd").isEqualTo(actual.getDatumtijd()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getValuta()).as("check valuta").isEqualTo(actual.getValuta()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetalingUpdatableRelationshipsEquals(Betaling expected, Betaling actual) {
        assertThat(expected)
            .as("Verify Betaling relationships")
            .satisfies(
                e ->
                    assertThat(e.getKomtvooropBankafschriftregel())
                        .as("check komtvooropBankafschriftregel")
                        .isEqualTo(actual.getKomtvooropBankafschriftregel())
            )
            .satisfies(e -> assertThat(e.getVanBankrekening()).as("check vanBankrekening").isEqualTo(actual.getVanBankrekening()))
            .satisfies(e -> assertThat(e.getNaarBankrekening()).as("check naarBankrekening").isEqualTo(actual.getNaarBankrekening()))
            .satisfies(e -> assertThat(e.getHeeftbetalingZaak()).as("check heeftbetalingZaak").isEqualTo(actual.getHeeftbetalingZaak()));
    }
}
