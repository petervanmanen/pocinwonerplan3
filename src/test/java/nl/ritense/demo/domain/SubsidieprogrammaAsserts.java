package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SubsidieprogrammaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieprogrammaAllPropertiesEquals(Subsidieprogramma expected, Subsidieprogramma actual) {
        assertSubsidieprogrammaAutoGeneratedPropertiesEquals(expected, actual);
        assertSubsidieprogrammaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieprogrammaAllUpdatablePropertiesEquals(Subsidieprogramma expected, Subsidieprogramma actual) {
        assertSubsidieprogrammaUpdatableFieldsEquals(expected, actual);
        assertSubsidieprogrammaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieprogrammaAutoGeneratedPropertiesEquals(Subsidieprogramma expected, Subsidieprogramma actual) {
        assertThat(expected)
            .as("Verify Subsidieprogramma auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieprogrammaUpdatableFieldsEquals(Subsidieprogramma expected, Subsidieprogramma actual) {
        assertThat(expected)
            .as("Verify Subsidieprogramma relevant properties")
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e ->
                    assertThat(e.getProgrammabegroting())
                        .as("check programmabegroting")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getProgrammabegroting())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieprogrammaUpdatableRelationshipsEquals(Subsidieprogramma expected, Subsidieprogramma actual) {}
}
