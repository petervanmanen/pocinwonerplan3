package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AanbestedingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedingAllPropertiesEquals(Aanbesteding expected, Aanbesteding actual) {
        assertAanbestedingAutoGeneratedPropertiesEquals(expected, actual);
        assertAanbestedingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedingAllUpdatablePropertiesEquals(Aanbesteding expected, Aanbesteding actual) {
        assertAanbestedingUpdatableFieldsEquals(expected, actual);
        assertAanbestedingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedingAutoGeneratedPropertiesEquals(Aanbesteding expected, Aanbesteding actual) {
        assertThat(expected)
            .as("Verify Aanbesteding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedingUpdatableFieldsEquals(Aanbesteding expected, Aanbesteding actual) {
        assertThat(expected)
            .as("Verify Aanbesteding relevant properties")
            .satisfies(e -> assertThat(e.getDatumpublicatie()).as("check datumpublicatie").isEqualTo(actual.getDatumpublicatie()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getDigitaal()).as("check digitaal").isEqualTo(actual.getDigitaal()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getProcedure()).as("check procedure").isEqualTo(actual.getProcedure()))
            .satisfies(e -> assertThat(e.getReferentienummer()).as("check referentienummer").isEqualTo(actual.getReferentienummer()))
            .satisfies(e -> assertThat(e.getScoremaximaal()).as("check scoremaximaal").isEqualTo(actual.getScoremaximaal()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getTendernedkenmerk()).as("check tendernedkenmerk").isEqualTo(actual.getTendernedkenmerk()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getVolgendesluiting()).as("check volgendesluiting").isEqualTo(actual.getVolgendesluiting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedingUpdatableRelationshipsEquals(Aanbesteding expected, Aanbesteding actual) {
        assertThat(expected)
            .as("Verify Aanbesteding relationships")
            .satisfies(e -> assertThat(e.getBetreftZaak()).as("check betreftZaak").isEqualTo(actual.getBetreftZaak()))
            .satisfies(e -> assertThat(e.getMondtuitGunning()).as("check mondtuitGunning").isEqualTo(actual.getMondtuitGunning()))
            .satisfies(
                e ->
                    assertThat(e.getProcesleiderMedewerker())
                        .as("check procesleiderMedewerker")
                        .isEqualTo(actual.getProcesleiderMedewerker())
            );
    }
}
