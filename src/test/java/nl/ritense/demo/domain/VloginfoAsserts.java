package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VloginfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVloginfoAllPropertiesEquals(Vloginfo expected, Vloginfo actual) {
        assertVloginfoAutoGeneratedPropertiesEquals(expected, actual);
        assertVloginfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVloginfoAllUpdatablePropertiesEquals(Vloginfo expected, Vloginfo actual) {
        assertVloginfoUpdatableFieldsEquals(expected, actual);
        assertVloginfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVloginfoAutoGeneratedPropertiesEquals(Vloginfo expected, Vloginfo actual) {
        assertThat(expected)
            .as("Verify Vloginfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVloginfoUpdatableFieldsEquals(Vloginfo expected, Vloginfo actual) {
        assertThat(expected)
            .as("Verify Vloginfo relevant properties")
            .satisfies(e -> assertThat(e.getDetectieverkeer()).as("check detectieverkeer").isEqualTo(actual.getDetectieverkeer()))
            .satisfies(e -> assertThat(e.getEindegroen()).as("check eindegroen").isEqualTo(actual.getEindegroen()))
            .satisfies(e -> assertThat(e.getSnelheid()).as("check snelheid").isEqualTo(actual.getSnelheid()))
            .satisfies(e -> assertThat(e.getStartgroen()).as("check startgroen").isEqualTo(actual.getStartgroen()))
            .satisfies(e -> assertThat(e.getTijdstip()).as("check tijdstip").isEqualTo(actual.getTijdstip()))
            .satisfies(e -> assertThat(e.getVerkeerwilgroen()).as("check verkeerwilgroen").isEqualTo(actual.getVerkeerwilgroen()))
            .satisfies(e -> assertThat(e.getWachttijd()).as("check wachttijd").isEqualTo(actual.getWachttijd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVloginfoUpdatableRelationshipsEquals(Vloginfo expected, Vloginfo actual) {}
}
