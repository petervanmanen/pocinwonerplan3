package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SpecificatieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecificatieAllPropertiesEquals(Specificatie expected, Specificatie actual) {
        assertSpecificatieAutoGeneratedPropertiesEquals(expected, actual);
        assertSpecificatieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecificatieAllUpdatablePropertiesEquals(Specificatie expected, Specificatie actual) {
        assertSpecificatieUpdatableFieldsEquals(expected, actual);
        assertSpecificatieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecificatieAutoGeneratedPropertiesEquals(Specificatie expected, Specificatie actual) {
        assertThat(expected)
            .as("Verify Specificatie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecificatieUpdatableFieldsEquals(Specificatie expected, Specificatie actual) {
        assertThat(expected)
            .as("Verify Specificatie relevant properties")
            .satisfies(e -> assertThat(e.getAntwoord()).as("check antwoord").isEqualTo(actual.getAntwoord()))
            .satisfies(e -> assertThat(e.getGroepering()).as("check groepering").isEqualTo(actual.getGroepering()))
            .satisfies(e -> assertThat(e.getPubliceerbaar()).as("check publiceerbaar").isEqualTo(actual.getPubliceerbaar()))
            .satisfies(e -> assertThat(e.getVraagclassificatie()).as("check vraagclassificatie").isEqualTo(actual.getVraagclassificatie()))
            .satisfies(e -> assertThat(e.getVraagid()).as("check vraagid").isEqualTo(actual.getVraagid()))
            .satisfies(e -> assertThat(e.getVraagreferentie()).as("check vraagreferentie").isEqualTo(actual.getVraagreferentie()))
            .satisfies(e -> assertThat(e.getVraagtekst()).as("check vraagtekst").isEqualTo(actual.getVraagtekst()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpecificatieUpdatableRelationshipsEquals(Specificatie expected, Specificatie actual) {
        assertThat(expected)
            .as("Verify Specificatie relationships")
            .satisfies(
                e ->
                    assertThat(e.getGedefinieerddoorProjectactiviteit())
                        .as("check gedefinieerddoorProjectactiviteit")
                        .isEqualTo(actual.getGedefinieerddoorProjectactiviteit())
            )
            .satisfies(e -> assertThat(e.getBevatVerzoek()).as("check bevatVerzoek").isEqualTo(actual.getBevatVerzoek()));
    }
}
