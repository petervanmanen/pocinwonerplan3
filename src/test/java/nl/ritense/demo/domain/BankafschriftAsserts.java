package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BankafschriftAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftAllPropertiesEquals(Bankafschrift expected, Bankafschrift actual) {
        assertBankafschriftAutoGeneratedPropertiesEquals(expected, actual);
        assertBankafschriftAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftAllUpdatablePropertiesEquals(Bankafschrift expected, Bankafschrift actual) {
        assertBankafschriftUpdatableFieldsEquals(expected, actual);
        assertBankafschriftUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftAutoGeneratedPropertiesEquals(Bankafschrift expected, Bankafschrift actual) {
        assertThat(expected)
            .as("Verify Bankafschrift auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftUpdatableFieldsEquals(Bankafschrift expected, Bankafschrift actual) {
        assertThat(expected)
            .as("Verify Bankafschrift relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankafschriftUpdatableRelationshipsEquals(Bankafschrift expected, Bankafschrift actual) {
        assertThat(expected)
            .as("Verify Bankafschrift relationships")
            .satisfies(e -> assertThat(e.getHeeftBankrekening()).as("check heeftBankrekening").isEqualTo(actual.getHeeftBankrekening()));
    }
}
