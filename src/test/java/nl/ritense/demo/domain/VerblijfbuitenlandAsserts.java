package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerblijfbuitenlandAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandAllPropertiesEquals(Verblijfbuitenland expected, Verblijfbuitenland actual) {
        assertVerblijfbuitenlandAutoGeneratedPropertiesEquals(expected, actual);
        assertVerblijfbuitenlandAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandAllUpdatablePropertiesEquals(Verblijfbuitenland expected, Verblijfbuitenland actual) {
        assertVerblijfbuitenlandUpdatableFieldsEquals(expected, actual);
        assertVerblijfbuitenlandUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandAutoGeneratedPropertiesEquals(Verblijfbuitenland expected, Verblijfbuitenland actual) {
        assertThat(expected)
            .as("Verify Verblijfbuitenland auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandUpdatableFieldsEquals(Verblijfbuitenland expected, Verblijfbuitenland actual) {
        assertThat(expected)
            .as("Verify Verblijfbuitenland relevant properties")
            .satisfies(
                e -> assertThat(e.getAdresregelbuitenland1()).as("check adresregelbuitenland1").isEqualTo(actual.getAdresregelbuitenland1())
            )
            .satisfies(
                e -> assertThat(e.getAdresregelbuitenland2()).as("check adresregelbuitenland2").isEqualTo(actual.getAdresregelbuitenland2())
            )
            .satisfies(
                e -> assertThat(e.getAdresregelbuitenland3()).as("check adresregelbuitenland3").isEqualTo(actual.getAdresregelbuitenland3())
            )
            .satisfies(
                e -> assertThat(e.getAdresregelbuitenland4()).as("check adresregelbuitenland4").isEqualTo(actual.getAdresregelbuitenland4())
            )
            .satisfies(
                e -> assertThat(e.getAdresregelbuitenland5()).as("check adresregelbuitenland5").isEqualTo(actual.getAdresregelbuitenland5())
            )
            .satisfies(
                e -> assertThat(e.getAdresregelbuitenland6()).as("check adresregelbuitenland6").isEqualTo(actual.getAdresregelbuitenland6())
            )
            .satisfies(
                e ->
                    assertThat(e.getLandofgebiedverblijfadres())
                        .as("check landofgebiedverblijfadres")
                        .isEqualTo(actual.getLandofgebiedverblijfadres())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfbuitenlandUpdatableRelationshipsEquals(Verblijfbuitenland expected, Verblijfbuitenland actual) {}
}
