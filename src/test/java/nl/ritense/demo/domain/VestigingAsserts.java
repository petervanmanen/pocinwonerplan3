package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VestigingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVestigingAllPropertiesEquals(Vestiging expected, Vestiging actual) {
        assertVestigingAutoGeneratedPropertiesEquals(expected, actual);
        assertVestigingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVestigingAllUpdatablePropertiesEquals(Vestiging expected, Vestiging actual) {
        assertVestigingUpdatableFieldsEquals(expected, actual);
        assertVestigingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVestigingAutoGeneratedPropertiesEquals(Vestiging expected, Vestiging actual) {
        assertThat(expected)
            .as("Verify Vestiging auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVestigingUpdatableFieldsEquals(Vestiging expected, Vestiging actual) {
        assertThat(expected)
            .as("Verify Vestiging relevant properties")
            .satisfies(
                e -> assertThat(e.getCommercielevestiging()).as("check commercielevestiging").isEqualTo(actual.getCommercielevestiging())
            )
            .satisfies(e -> assertThat(e.getDatumaanvang()).as("check datumaanvang").isEqualTo(actual.getDatumaanvang()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumvoortzetting()).as("check datumvoortzetting").isEqualTo(actual.getDatumvoortzetting()))
            .satisfies(
                e ->
                    assertThat(e.getFulltimewerkzamemannen())
                        .as("check fulltimewerkzamemannen")
                        .isEqualTo(actual.getFulltimewerkzamemannen())
            )
            .satisfies(
                e ->
                    assertThat(e.getFulltimewerkzamevrouwen())
                        .as("check fulltimewerkzamevrouwen")
                        .isEqualTo(actual.getFulltimewerkzamevrouwen())
            )
            .satisfies(e -> assertThat(e.getHandelsnaam()).as("check handelsnaam").isEqualTo(actual.getHandelsnaam()))
            .satisfies(
                e ->
                    assertThat(e.getParttimewerkzamemannen())
                        .as("check parttimewerkzamemannen")
                        .isEqualTo(actual.getParttimewerkzamemannen())
            )
            .satisfies(
                e ->
                    assertThat(e.getParttimewerkzamevrouwen())
                        .as("check parttimewerkzamevrouwen")
                        .isEqualTo(actual.getParttimewerkzamevrouwen())
            )
            .satisfies(e -> assertThat(e.getToevoegingadres()).as("check toevoegingadres").isEqualTo(actual.getToevoegingadres()))
            .satisfies(
                e ->
                    assertThat(e.getTotaalwerkzamepersonen())
                        .as("check totaalwerkzamepersonen")
                        .isEqualTo(actual.getTotaalwerkzamepersonen())
            )
            .satisfies(e -> assertThat(e.getVerkortenaam()).as("check verkortenaam").isEqualTo(actual.getVerkortenaam()))
            .satisfies(e -> assertThat(e.getVestigingsnummer()).as("check vestigingsnummer").isEqualTo(actual.getVestigingsnummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVestigingUpdatableRelationshipsEquals(Vestiging expected, Vestiging actual) {
        assertThat(expected)
            .as("Verify Vestiging relationships")
            .satisfies(
                e -> assertThat(e.getHeeftWerkgelegenheid()).as("check heeftWerkgelegenheid").isEqualTo(actual.getHeeftWerkgelegenheid())
            )
            .satisfies(
                e ->
                    assertThat(e.getHeeftalslocatieadresNummeraanduiding())
                        .as("check heeftalslocatieadresNummeraanduiding")
                        .isEqualTo(actual.getHeeftalslocatieadresNummeraanduiding())
            );
    }
}
