package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StatustypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatustypeAllPropertiesEquals(Statustype expected, Statustype actual) {
        assertStatustypeAutoGeneratedPropertiesEquals(expected, actual);
        assertStatustypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatustypeAllUpdatablePropertiesEquals(Statustype expected, Statustype actual) {
        assertStatustypeUpdatableFieldsEquals(expected, actual);
        assertStatustypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatustypeAutoGeneratedPropertiesEquals(Statustype expected, Statustype actual) {
        assertThat(expected)
            .as("Verify Statustype auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatustypeUpdatableFieldsEquals(Statustype expected, Statustype actual) {
        assertThat(expected)
            .as("Verify Statustype relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidstatustype())
                        .as("check datumbegingeldigheidstatustype")
                        .isEqualTo(actual.getDatumbegingeldigheidstatustype())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidstatustype())
                        .as("check datumeindegeldigheidstatustype")
                        .isEqualTo(actual.getDatumeindegeldigheidstatustype())
            )
            .satisfies(e -> assertThat(e.getDoorlooptijdstatus()).as("check doorlooptijdstatus").isEqualTo(actual.getDoorlooptijdstatus()))
            .satisfies(
                e ->
                    assertThat(e.getStatustypeomschrijving())
                        .as("check statustypeomschrijving")
                        .isEqualTo(actual.getStatustypeomschrijving())
            )
            .satisfies(
                e ->
                    assertThat(e.getStatustypeomschrijvinggeneriek())
                        .as("check statustypeomschrijvinggeneriek")
                        .isEqualTo(actual.getStatustypeomschrijvinggeneriek())
            )
            .satisfies(
                e -> assertThat(e.getStatustypevolgnummer()).as("check statustypevolgnummer").isEqualTo(actual.getStatustypevolgnummer())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatustypeUpdatableRelationshipsEquals(Statustype expected, Statustype actual) {
        assertThat(expected)
            .as("Verify Statustype relationships")
            .satisfies(e -> assertThat(e.getHeeftZaaktype()).as("check heeftZaaktype").isEqualTo(actual.getHeeftZaaktype()));
    }
}
