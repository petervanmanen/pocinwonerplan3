package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OndersteunendwegdeelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOndersteunendwegdeelAllPropertiesEquals(Ondersteunendwegdeel expected, Ondersteunendwegdeel actual) {
        assertOndersteunendwegdeelAutoGeneratedPropertiesEquals(expected, actual);
        assertOndersteunendwegdeelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOndersteunendwegdeelAllUpdatablePropertiesEquals(Ondersteunendwegdeel expected, Ondersteunendwegdeel actual) {
        assertOndersteunendwegdeelUpdatableFieldsEquals(expected, actual);
        assertOndersteunendwegdeelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOndersteunendwegdeelAutoGeneratedPropertiesEquals(Ondersteunendwegdeel expected, Ondersteunendwegdeel actual) {
        assertThat(expected)
            .as("Verify Ondersteunendwegdeel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOndersteunendwegdeelUpdatableFieldsEquals(Ondersteunendwegdeel expected, Ondersteunendwegdeel actual) {
        assertThat(expected)
            .as("Verify Ondersteunendwegdeel relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidondersteunendwegdeel())
                        .as("check datumbegingeldigheidondersteunendwegdeel")
                        .isEqualTo(actual.getDatumbegingeldigheidondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidondersteunendwegdeel())
                        .as("check datumeindegeldigheidondersteunendwegdeel")
                        .isEqualTo(actual.getDatumeindegeldigheidondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getFunctieondersteunendwegdeel())
                        .as("check functieondersteunendwegdeel")
                        .isEqualTo(actual.getFunctieondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getFysiekvoorkomenondersteunendwegdeel())
                        .as("check fysiekvoorkomenondersteunendwegdeel")
                        .isEqualTo(actual.getFysiekvoorkomenondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getGeometrieondersteunendwegdeel())
                        .as("check geometrieondersteunendwegdeel")
                        .isEqualTo(actual.getGeometrieondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getIdentificatieondersteunendwegdeel())
                        .as("check identificatieondersteunendwegdeel")
                        .isEqualTo(actual.getIdentificatieondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKruinlijngeometrieondersteunendwegdeel())
                        .as("check kruinlijngeometrieondersteunendwegdeel")
                        .isEqualTo(actual.getKruinlijngeometrieondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getLod0geometrieondersteunendwegdeel())
                        .as("check lod0geometrieondersteunendwegdeel")
                        .isEqualTo(actual.getLod0geometrieondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getOndersteunendwegdeeloptalud())
                        .as("check ondersteunendwegdeeloptalud")
                        .isEqualTo(actual.getOndersteunendwegdeeloptalud())
            )
            .satisfies(
                e ->
                    assertThat(e.getPlusfunctieondersteunendwegdeel())
                        .as("check plusfunctieondersteunendwegdeel")
                        .isEqualTo(actual.getPlusfunctieondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getPlusfysiekvoorkomenondersteunendwegdeel())
                        .as("check plusfysiekvoorkomenondersteunendwegdeel")
                        .isEqualTo(actual.getPlusfysiekvoorkomenondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getRelatievehoogteliggingondersteunendwegdeel())
                        .as("check relatievehoogteliggingondersteunendwegdeel")
                        .isEqualTo(actual.getRelatievehoogteliggingondersteunendwegdeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getStatusondersteunendwegdeel())
                        .as("check statusondersteunendwegdeel")
                        .isEqualTo(actual.getStatusondersteunendwegdeel())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOndersteunendwegdeelUpdatableRelationshipsEquals(Ondersteunendwegdeel expected, Ondersteunendwegdeel actual) {}
}
