package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NormwaardeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNormwaardeAllPropertiesEquals(Normwaarde expected, Normwaarde actual) {
        assertNormwaardeAutoGeneratedPropertiesEquals(expected, actual);
        assertNormwaardeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNormwaardeAllUpdatablePropertiesEquals(Normwaarde expected, Normwaarde actual) {
        assertNormwaardeUpdatableFieldsEquals(expected, actual);
        assertNormwaardeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNormwaardeAutoGeneratedPropertiesEquals(Normwaarde expected, Normwaarde actual) {
        assertThat(expected)
            .as("Verify Normwaarde auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNormwaardeUpdatableFieldsEquals(Normwaarde expected, Normwaarde actual) {
        assertThat(expected)
            .as("Verify Normwaarde relevant properties")
            .satisfies(e -> assertThat(e.getKwalitatievewaarde()).as("check kwalitatievewaarde").isEqualTo(actual.getKwalitatievewaarde()))
            .satisfies(
                e ->
                    assertThat(e.getKwantitatievewaardeeenheid())
                        .as("check kwantitatievewaardeeenheid")
                        .isEqualTo(actual.getKwantitatievewaardeeenheid())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwantitatievewaardeomvang())
                        .as("check kwantitatievewaardeomvang")
                        .isEqualTo(actual.getKwantitatievewaardeomvang())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNormwaardeUpdatableRelationshipsEquals(Normwaarde expected, Normwaarde actual) {
        assertThat(expected)
            .as("Verify Normwaarde relationships")
            .satisfies(e -> assertThat(e.getGeldtvoorLocaties()).as("check geldtvoorLocaties").isEqualTo(actual.getGeldtvoorLocaties()))
            .satisfies(e -> assertThat(e.getBevatNorm()).as("check bevatNorm").isEqualTo(actual.getBevatNorm()));
    }
}
