package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SubsidieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieAllPropertiesEquals(Subsidie expected, Subsidie actual) {
        assertSubsidieAutoGeneratedPropertiesEquals(expected, actual);
        assertSubsidieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieAllUpdatablePropertiesEquals(Subsidie expected, Subsidie actual) {
        assertSubsidieUpdatableFieldsEquals(expected, actual);
        assertSubsidieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieAutoGeneratedPropertiesEquals(Subsidie expected, Subsidie actual) {
        assertThat(expected)
            .as("Verify Subsidie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieUpdatableFieldsEquals(Subsidie expected, Subsidie actual) {
        assertThat(expected)
            .as("Verify Subsidie relevant properties")
            .satisfies(
                e -> assertThat(e.getAccountantscontrole()).as("check accountantscontrole").isEqualTo(actual.getAccountantscontrole())
            )
            .satisfies(
                e ->
                    assertThat(e.getCofinanciering())
                        .as("check cofinanciering")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCofinanciering())
            )
            .satisfies(
                e -> assertThat(e.getDatumbehandeltermijn()).as("check datumbehandeltermijn").isEqualTo(actual.getDatumbehandeltermijn())
            )
            .satisfies(e -> assertThat(e.getDatumbewaartermijn()).as("check datumbewaartermijn").isEqualTo(actual.getDatumbewaartermijn()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(
                e ->
                    assertThat(e.getDatumsubsidievaststelling())
                        .as("check datumsubsidievaststelling")
                        .isEqualTo(actual.getDatumsubsidievaststelling())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumverzendingeindeafrekening())
                        .as("check datumverzendingeindeafrekening")
                        .isEqualTo(actual.getDatumverzendingeindeafrekening())
            )
            .satisfies(e -> assertThat(e.getDeadlineindiening()).as("check deadlineindiening").isEqualTo(actual.getDeadlineindiening()))
            .satisfies(e -> assertThat(e.getDoelstelling()).as("check doelstelling").isEqualTo(actual.getDoelstelling()))
            .satisfies(
                e ->
                    assertThat(e.getGerealiseerdeprojectkosten())
                        .as("check gerealiseerdeprojectkosten")
                        .isEqualTo(actual.getGerealiseerdeprojectkosten())
            )
            .satisfies(
                e ->
                    assertThat(e.getHoogtesubsidie())
                        .as("check hoogtesubsidie")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getHoogtesubsidie())
            )
            .satisfies(e -> assertThat(e.getNiveau()).as("check niveau").isEqualTo(actual.getNiveau()))
            .satisfies(e -> assertThat(e.getOnderwerp()).as("check onderwerp").isEqualTo(actual.getOnderwerp()))
            .satisfies(
                e ->
                    assertThat(e.getOntvangenbedrag())
                        .as("check ontvangenbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getOntvangenbedrag())
            )
            .satisfies(e -> assertThat(e.getOpmerkingen()).as("check opmerkingen").isEqualTo(actual.getOpmerkingen()))
            .satisfies(
                e ->
                    assertThat(e.getOpmerkingenvoorschotten())
                        .as("check opmerkingenvoorschotten")
                        .isEqualTo(actual.getOpmerkingenvoorschotten())
            )
            .satisfies(e -> assertThat(e.getPrestatiesubsidie()).as("check prestatiesubsidie").isEqualTo(actual.getPrestatiesubsidie()))
            .satisfies(
                e ->
                    assertThat(e.getSocialreturnbedrag())
                        .as("check socialreturnbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSocialreturnbedrag())
            )
            .satisfies(
                e -> assertThat(e.getSocialreturnnagekomen()).as("check socialreturnnagekomen").isEqualTo(actual.getSocialreturnnagekomen())
            )
            .satisfies(
                e ->
                    assertThat(e.getSocialreturnverplichting())
                        .as("check socialreturnverplichting")
                        .isEqualTo(actual.getSocialreturnverplichting())
            )
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getSubsidiebedrag())
                        .as("check subsidiebedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSubsidiebedrag())
            )
            .satisfies(e -> assertThat(e.getSubsidiesoort()).as("check subsidiesoort").isEqualTo(actual.getSubsidiesoort()))
            .satisfies(
                e ->
                    assertThat(e.getSubsidievaststellingbedrag())
                        .as("check subsidievaststellingbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getSubsidievaststellingbedrag())
            )
            .satisfies(e -> assertThat(e.getUitgaandesubsidie()).as("check uitgaandesubsidie").isEqualTo(actual.getUitgaandesubsidie()))
            .satisfies(e -> assertThat(e.getVerantwoordenop()).as("check verantwoordenop").isEqualTo(actual.getVerantwoordenop()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidieUpdatableRelationshipsEquals(Subsidie expected, Subsidie actual) {
        assertThat(expected)
            .as("Verify Subsidie relationships")
            .satisfies(e -> assertThat(e.getHeeftZaak()).as("check heeftZaak").isEqualTo(actual.getHeeftZaak()))
            .satisfies(e -> assertThat(e.getValtbinnenSector()).as("check valtbinnenSector").isEqualTo(actual.getValtbinnenSector()))
            .satisfies(
                e -> assertThat(e.getBehandelaarMedewerker()).as("check behandelaarMedewerker").isEqualTo(actual.getBehandelaarMedewerker())
            )
            .satisfies(
                e ->
                    assertThat(e.getVerstrekkerRechtspersoon())
                        .as("check verstrekkerRechtspersoon")
                        .isEqualTo(actual.getVerstrekkerRechtspersoon())
            )
            .satisfies(e -> assertThat(e.getHeeftKostenplaats()).as("check heeftKostenplaats").isEqualTo(actual.getHeeftKostenplaats()))
            .satisfies(e -> assertThat(e.getHeeftDocument()).as("check heeftDocument").isEqualTo(actual.getHeeftDocument()))
            .satisfies(
                e ->
                    assertThat(e.getAanvragerRechtspersoon())
                        .as("check aanvragerRechtspersoon")
                        .isEqualTo(actual.getAanvragerRechtspersoon())
            )
            .satisfies(
                e -> assertThat(e.getAanvragerMedewerker()).as("check aanvragerMedewerker").isEqualTo(actual.getAanvragerMedewerker())
            );
    }
}
