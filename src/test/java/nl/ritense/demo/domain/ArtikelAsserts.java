package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ArtikelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtikelAllPropertiesEquals(Artikel expected, Artikel actual) {
        assertArtikelAutoGeneratedPropertiesEquals(expected, actual);
        assertArtikelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtikelAllUpdatablePropertiesEquals(Artikel expected, Artikel actual) {
        assertArtikelUpdatableFieldsEquals(expected, actual);
        assertArtikelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtikelAutoGeneratedPropertiesEquals(Artikel expected, Artikel actual) {
        assertThat(expected)
            .as("Verify Artikel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtikelUpdatableFieldsEquals(Artikel expected, Artikel actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertArtikelUpdatableRelationshipsEquals(Artikel expected, Artikel actual) {}
}
