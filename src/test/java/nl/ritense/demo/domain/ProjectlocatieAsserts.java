package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectlocatieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectlocatieAllPropertiesEquals(Projectlocatie expected, Projectlocatie actual) {
        assertProjectlocatieAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectlocatieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectlocatieAllUpdatablePropertiesEquals(Projectlocatie expected, Projectlocatie actual) {
        assertProjectlocatieUpdatableFieldsEquals(expected, actual);
        assertProjectlocatieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectlocatieAutoGeneratedPropertiesEquals(Projectlocatie expected, Projectlocatie actual) {
        assertThat(expected)
            .as("Verify Projectlocatie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectlocatieUpdatableFieldsEquals(Projectlocatie expected, Projectlocatie actual) {
        assertThat(expected)
            .as("Verify Projectlocatie relevant properties")
            .satisfies(e -> assertThat(e.getAdres()).as("check adres").isEqualTo(actual.getAdres()))
            .satisfies(e -> assertThat(e.getKadastraalperceel()).as("check kadastraalperceel").isEqualTo(actual.getKadastraalperceel()))
            .satisfies(e -> assertThat(e.getKadastralegemeente()).as("check kadastralegemeente").isEqualTo(actual.getKadastralegemeente()))
            .satisfies(e -> assertThat(e.getKadastralesectie()).as("check kadastralesectie").isEqualTo(actual.getKadastralesectie()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectlocatieUpdatableRelationshipsEquals(Projectlocatie expected, Projectlocatie actual) {
        assertThat(expected)
            .as("Verify Projectlocatie relationships")
            .satisfies(e -> assertThat(e.getBetreftLocatie()).as("check betreftLocatie").isEqualTo(actual.getBetreftLocatie()))
            .satisfies(e -> assertThat(e.getHeeftProject()).as("check heeftProject").isEqualTo(actual.getHeeftProject()))
            .satisfies(e -> assertThat(e.getBetreftVerzoeks()).as("check betreftVerzoeks").isEqualTo(actual.getBetreftVerzoeks()));
    }
}
