package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerzoekAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerzoekAllPropertiesEquals(Verzoek expected, Verzoek actual) {
        assertVerzoekAutoGeneratedPropertiesEquals(expected, actual);
        assertVerzoekAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerzoekAllUpdatablePropertiesEquals(Verzoek expected, Verzoek actual) {
        assertVerzoekUpdatableFieldsEquals(expected, actual);
        assertVerzoekUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerzoekAutoGeneratedPropertiesEquals(Verzoek expected, Verzoek actual) {
        assertThat(expected)
            .as("Verify Verzoek auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerzoekUpdatableFieldsEquals(Verzoek expected, Verzoek actual) {
        assertThat(expected)
            .as("Verify Verzoek relevant properties")
            .satisfies(e -> assertThat(e.getAkkoordverklaring()).as("check akkoordverklaring").isEqualTo(actual.getAkkoordverklaring()))
            .satisfies(e -> assertThat(e.getAmbtshalve()).as("check ambtshalve").isEqualTo(actual.getAmbtshalve()))
            .satisfies(e -> assertThat(e.getDatumindiening()).as("check datumindiening").isEqualTo(actual.getDatumindiening()))
            .satisfies(e -> assertThat(e.getDoel()).as("check doel").isEqualTo(actual.getDoel()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(
                e -> assertThat(e.getReferentieaanvrager()).as("check referentieaanvrager").isEqualTo(actual.getReferentieaanvrager())
            )
            .satisfies(
                e ->
                    assertThat(e.getToelichtinglateraantelevereninformatie())
                        .as("check toelichtinglateraantelevereninformatie")
                        .isEqualTo(actual.getToelichtinglateraantelevereninformatie())
            )
            .satisfies(
                e ->
                    assertThat(e.getToelichtingnietaantelevereninformatie())
                        .as("check toelichtingnietaantelevereninformatie")
                        .isEqualTo(actual.getToelichtingnietaantelevereninformatie())
            )
            .satisfies(e -> assertThat(e.getToelichtingverzoek()).as("check toelichtingverzoek").isEqualTo(actual.getToelichtingverzoek()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getVerzoeknummer()).as("check verzoeknummer").isEqualTo(actual.getVerzoeknummer()))
            .satisfies(e -> assertThat(e.getVolgnummer()).as("check volgnummer").isEqualTo(actual.getVolgnummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerzoekUpdatableRelationshipsEquals(Verzoek expected, Verzoek actual) {
        assertThat(expected)
            .as("Verify Verzoek relationships")
            .satisfies(e -> assertThat(e.getLeidttotZaak()).as("check leidttotZaak").isEqualTo(actual.getLeidttotZaak()))
            .satisfies(
                e ->
                    assertThat(e.getBetrefteerderverzoekVerzoek())
                        .as("check betrefteerderverzoekVerzoek")
                        .isEqualTo(actual.getBetrefteerderverzoekVerzoek())
            )
            .satisfies(
                e ->
                    assertThat(e.getBetreftProjectactiviteits())
                        .as("check betreftProjectactiviteits")
                        .isEqualTo(actual.getBetreftProjectactiviteits())
            )
            .satisfies(
                e ->
                    assertThat(e.getBetreftProjectlocaties())
                        .as("check betreftProjectlocaties")
                        .isEqualTo(actual.getBetreftProjectlocaties())
            )
            .satisfies(e -> assertThat(e.getBetreftActiviteits()).as("check betreftActiviteits").isEqualTo(actual.getBetreftActiviteits()))
            .satisfies(e -> assertThat(e.getBetreftLocaties()).as("check betreftLocaties").isEqualTo(actual.getBetreftLocaties()))
            .satisfies(
                e ->
                    assertThat(e.getHeeftalsverantwoordelijkeInitiatiefnemer())
                        .as("check heeftalsverantwoordelijkeInitiatiefnemer")
                        .isEqualTo(actual.getHeeftalsverantwoordelijkeInitiatiefnemer())
            );
    }
}
