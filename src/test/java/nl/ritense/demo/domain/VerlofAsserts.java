package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerlofAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerlofAllPropertiesEquals(Verlof expected, Verlof actual) {
        assertVerlofAutoGeneratedPropertiesEquals(expected, actual);
        assertVerlofAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerlofAllUpdatablePropertiesEquals(Verlof expected, Verlof actual) {
        assertVerlofUpdatableFieldsEquals(expected, actual);
        assertVerlofUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerlofAutoGeneratedPropertiesEquals(Verlof expected, Verlof actual) {
        assertThat(expected)
            .as("Verify Verlof auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerlofUpdatableFieldsEquals(Verlof expected, Verlof actual) {
        assertThat(expected)
            .as("Verify Verlof relevant properties")
            .satisfies(e -> assertThat(e.getDatumaanvraag()).as("check datumaanvraag").isEqualTo(actual.getDatumaanvraag()))
            .satisfies(e -> assertThat(e.getDatumtijdeinde()).as("check datumtijdeinde").isEqualTo(actual.getDatumtijdeinde()))
            .satisfies(e -> assertThat(e.getDatumtijdstart()).as("check datumtijdstart").isEqualTo(actual.getDatumtijdstart()))
            .satisfies(e -> assertThat(e.getDatumtoekenning()).as("check datumtoekenning").isEqualTo(actual.getDatumtoekenning()))
            .satisfies(e -> assertThat(e.getGoedgekeurd()).as("check goedgekeurd").isEqualTo(actual.getGoedgekeurd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerlofUpdatableRelationshipsEquals(Verlof expected, Verlof actual) {
        assertThat(expected)
            .as("Verify Verlof relationships")
            .satisfies(
                e ->
                    assertThat(e.getSoortverlofVerlofsoort())
                        .as("check soortverlofVerlofsoort")
                        .isEqualTo(actual.getSoortverlofVerlofsoort())
            )
            .satisfies(
                e -> assertThat(e.getHeeftverlofWerknemer()).as("check heeftverlofWerknemer").isEqualTo(actual.getHeeftverlofWerknemer())
            );
    }
}
