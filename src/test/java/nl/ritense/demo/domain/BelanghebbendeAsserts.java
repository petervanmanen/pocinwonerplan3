package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BelanghebbendeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBelanghebbendeAllPropertiesEquals(Belanghebbende expected, Belanghebbende actual) {
        assertBelanghebbendeAutoGeneratedPropertiesEquals(expected, actual);
        assertBelanghebbendeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBelanghebbendeAllUpdatablePropertiesEquals(Belanghebbende expected, Belanghebbende actual) {
        assertBelanghebbendeUpdatableFieldsEquals(expected, actual);
        assertBelanghebbendeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBelanghebbendeAutoGeneratedPropertiesEquals(Belanghebbende expected, Belanghebbende actual) {
        assertThat(expected)
            .as("Verify Belanghebbende auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBelanghebbendeUpdatableFieldsEquals(Belanghebbende expected, Belanghebbende actual) {
        assertThat(expected)
            .as("Verify Belanghebbende relevant properties")
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getDatumtot()).as("check datumtot").isEqualTo(actual.getDatumtot()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBelanghebbendeUpdatableRelationshipsEquals(Belanghebbende expected, Belanghebbende actual) {
        assertThat(expected)
            .as("Verify Belanghebbende relationships")
            .satisfies(e -> assertThat(e.getHeeftMuseumobjects()).as("check heeftMuseumobjects").isEqualTo(actual.getHeeftMuseumobjects()));
    }
}
