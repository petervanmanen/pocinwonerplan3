package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContainerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAllPropertiesEquals(Container expected, Container actual) {
        assertContainerAutoGeneratedPropertiesEquals(expected, actual);
        assertContainerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAllUpdatablePropertiesEquals(Container expected, Container actual) {
        assertContainerUpdatableFieldsEquals(expected, actual);
        assertContainerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerAutoGeneratedPropertiesEquals(Container expected, Container actual) {
        assertThat(expected)
            .as("Verify Container auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerUpdatableFieldsEquals(Container expected, Container actual) {
        assertThat(expected)
            .as("Verify Container relevant properties")
            .satisfies(e -> assertThat(e.getContainercode()).as("check containercode").isEqualTo(actual.getContainercode()))
            .satisfies(e -> assertThat(e.getSensorid()).as("check sensorid").isEqualTo(actual.getSensorid()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContainerUpdatableRelationshipsEquals(Container expected, Container actual) {
        assertThat(expected)
            .as("Verify Container relationships")
            .satisfies(
                e -> assertThat(e.getGeschiktvoorFractie()).as("check geschiktvoorFractie").isEqualTo(actual.getGeschiktvoorFractie())
            )
            .satisfies(e -> assertThat(e.getSoortContainertype()).as("check soortContainertype").isEqualTo(actual.getSoortContainertype()))
            .satisfies(e -> assertThat(e.getHeeftLocatie()).as("check heeftLocatie").isEqualTo(actual.getHeeftLocatie()));
    }
}
