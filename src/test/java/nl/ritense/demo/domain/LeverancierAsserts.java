package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LeverancierAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeverancierAllPropertiesEquals(Leverancier expected, Leverancier actual) {
        assertLeverancierAutoGeneratedPropertiesEquals(expected, actual);
        assertLeverancierAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeverancierAllUpdatablePropertiesEquals(Leverancier expected, Leverancier actual) {
        assertLeverancierUpdatableFieldsEquals(expected, actual);
        assertLeverancierUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeverancierAutoGeneratedPropertiesEquals(Leverancier expected, Leverancier actual) {
        assertThat(expected)
            .as("Verify Leverancier auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeverancierUpdatableFieldsEquals(Leverancier expected, Leverancier actual) {
        assertThat(expected)
            .as("Verify Leverancier relevant properties")
            .satisfies(e -> assertThat(e.getAgbcode()).as("check agbcode").isEqualTo(actual.getAgbcode()))
            .satisfies(e -> assertThat(e.getLeverancierscode()).as("check leverancierscode").isEqualTo(actual.getLeverancierscode()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getSoortleverancier()).as("check soortleverancier").isEqualTo(actual.getSoortleverancier()))
            .satisfies(
                e -> assertThat(e.getSoortleveranciercode()).as("check soortleveranciercode").isEqualTo(actual.getSoortleveranciercode())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLeverancierUpdatableRelationshipsEquals(Leverancier expected, Leverancier actual) {
        assertThat(expected)
            .as("Verify Leverancier relationships")
            .satisfies(
                e ->
                    assertThat(e.getGekwalificeerdCategories())
                        .as("check gekwalificeerdCategories")
                        .isEqualTo(actual.getGekwalificeerdCategories())
            );
    }
}
