package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerblijfadresingeschrevennatuurlijkpersoonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfadresingeschrevennatuurlijkpersoonAllPropertiesEquals(
        Verblijfadresingeschrevennatuurlijkpersoon expected,
        Verblijfadresingeschrevennatuurlijkpersoon actual
    ) {
        assertVerblijfadresingeschrevennatuurlijkpersoonAutoGeneratedPropertiesEquals(expected, actual);
        assertVerblijfadresingeschrevennatuurlijkpersoonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfadresingeschrevennatuurlijkpersoonAllUpdatablePropertiesEquals(
        Verblijfadresingeschrevennatuurlijkpersoon expected,
        Verblijfadresingeschrevennatuurlijkpersoon actual
    ) {
        assertVerblijfadresingeschrevennatuurlijkpersoonUpdatableFieldsEquals(expected, actual);
        assertVerblijfadresingeschrevennatuurlijkpersoonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfadresingeschrevennatuurlijkpersoonAutoGeneratedPropertiesEquals(
        Verblijfadresingeschrevennatuurlijkpersoon expected,
        Verblijfadresingeschrevennatuurlijkpersoon actual
    ) {
        assertThat(expected)
            .as("Verify Verblijfadresingeschrevennatuurlijkpersoon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfadresingeschrevennatuurlijkpersoonUpdatableFieldsEquals(
        Verblijfadresingeschrevennatuurlijkpersoon expected,
        Verblijfadresingeschrevennatuurlijkpersoon actual
    ) {
        assertThat(expected)
            .as("Verify Verblijfadresingeschrevennatuurlijkpersoon relevant properties")
            .satisfies(e -> assertThat(e.getAdresherkomst()).as("check adresherkomst").isEqualTo(actual.getAdresherkomst()))
            .satisfies(
                e -> assertThat(e.getBeschrijvinglocatie()).as("check beschrijvinglocatie").isEqualTo(actual.getBeschrijvinglocatie())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerblijfadresingeschrevennatuurlijkpersoonUpdatableRelationshipsEquals(
        Verblijfadresingeschrevennatuurlijkpersoon expected,
        Verblijfadresingeschrevennatuurlijkpersoon actual
    ) {}
}
