package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PeriodeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeriodeAllPropertiesEquals(Periode expected, Periode actual) {
        assertPeriodeAutoGeneratedPropertiesEquals(expected, actual);
        assertPeriodeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeriodeAllUpdatablePropertiesEquals(Periode expected, Periode actual) {
        assertPeriodeUpdatableFieldsEquals(expected, actual);
        assertPeriodeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeriodeAutoGeneratedPropertiesEquals(Periode expected, Periode actual) {
        assertThat(expected)
            .as("Verify Periode auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeriodeUpdatableFieldsEquals(Periode expected, Periode actual) {
        assertThat(expected)
            .as("Verify Periode relevant properties")
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPeriodeUpdatableRelationshipsEquals(Periode expected, Periode actual) {
        assertThat(expected)
            .as("Verify Periode relationships")
            .satisfies(e -> assertThat(e.getStamtuitArchiefs()).as("check stamtuitArchiefs").isEqualTo(actual.getStamtuitArchiefs()))
            .satisfies(
                e -> assertThat(e.getStamtuitArchiefstuks()).as("check stamtuitArchiefstuks").isEqualTo(actual.getStamtuitArchiefstuks())
            )
            .satisfies(e -> assertThat(e.getBinnenHoofdstuks()).as("check binnenHoofdstuks").isEqualTo(actual.getBinnenHoofdstuks()));
    }
}
