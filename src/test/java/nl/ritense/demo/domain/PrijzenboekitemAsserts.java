package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class PrijzenboekitemAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijzenboekitemAllPropertiesEquals(Prijzenboekitem expected, Prijzenboekitem actual) {
        assertPrijzenboekitemAutoGeneratedPropertiesEquals(expected, actual);
        assertPrijzenboekitemAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijzenboekitemAllUpdatablePropertiesEquals(Prijzenboekitem expected, Prijzenboekitem actual) {
        assertPrijzenboekitemUpdatableFieldsEquals(expected, actual);
        assertPrijzenboekitemUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijzenboekitemAutoGeneratedPropertiesEquals(Prijzenboekitem expected, Prijzenboekitem actual) {
        assertThat(expected)
            .as("Verify Prijzenboekitem auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijzenboekitemUpdatableFieldsEquals(Prijzenboekitem expected, Prijzenboekitem actual) {
        assertThat(expected)
            .as("Verify Prijzenboekitem relevant properties")
            .satisfies(
                e -> assertThat(e.getDatumeindegeldigheid()).as("check datumeindegeldigheid").isEqualTo(actual.getDatumeindegeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getPrijs()).as("check prijs").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrijs()))
            .satisfies(e -> assertThat(e.getVerrichting()).as("check verrichting").isEqualTo(actual.getVerrichting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPrijzenboekitemUpdatableRelationshipsEquals(Prijzenboekitem expected, Prijzenboekitem actual) {}
}
