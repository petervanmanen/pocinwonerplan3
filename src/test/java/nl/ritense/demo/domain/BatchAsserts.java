package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BatchAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchAllPropertiesEquals(Batch expected, Batch actual) {
        assertBatchAutoGeneratedPropertiesEquals(expected, actual);
        assertBatchAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchAllUpdatablePropertiesEquals(Batch expected, Batch actual) {
        assertBatchUpdatableFieldsEquals(expected, actual);
        assertBatchUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchAutoGeneratedPropertiesEquals(Batch expected, Batch actual) {
        assertThat(expected)
            .as("Verify Batch auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchUpdatableFieldsEquals(Batch expected, Batch actual) {
        assertThat(expected)
            .as("Verify Batch relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()))
            .satisfies(e -> assertThat(e.getTijd()).as("check tijd").isEqualTo(actual.getTijd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchUpdatableRelationshipsEquals(Batch expected, Batch actual) {
        assertThat(expected)
            .as("Verify Batch relationships")
            .satisfies(
                e ->
                    assertThat(e.getHeeftherkomstApplicatie())
                        .as("check heeftherkomstApplicatie")
                        .isEqualTo(actual.getHeeftherkomstApplicatie())
            );
    }
}
