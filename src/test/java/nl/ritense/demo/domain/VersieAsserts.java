package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VersieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVersieAllPropertiesEquals(Versie expected, Versie actual) {
        assertVersieAutoGeneratedPropertiesEquals(expected, actual);
        assertVersieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVersieAllUpdatablePropertiesEquals(Versie expected, Versie actual) {
        assertVersieUpdatableFieldsEquals(expected, actual);
        assertVersieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVersieAutoGeneratedPropertiesEquals(Versie expected, Versie actual) {
        assertThat(expected)
            .as("Verify Versie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVersieUpdatableFieldsEquals(Versie expected, Versie actual) {
        assertThat(expected)
            .as("Verify Versie relevant properties")
            .satisfies(e -> assertThat(e.getAantal()).as("check aantal").isEqualTo(actual.getAantal()))
            .satisfies(e -> assertThat(e.getDatumeindesupport()).as("check datumeindesupport").isEqualTo(actual.getDatumeindesupport()))
            .satisfies(e -> assertThat(e.getKosten()).as("check kosten").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getKosten()))
            .satisfies(e -> assertThat(e.getLicentie()).as("check licentie").isEqualTo(actual.getLicentie()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getVersienummer()).as("check versienummer").isEqualTo(actual.getVersienummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVersieUpdatableRelationshipsEquals(Versie expected, Versie actual) {
        assertThat(expected)
            .as("Verify Versie relationships")
            .satisfies(
                e ->
                    assertThat(e.getHeeftversiesApplicatie())
                        .as("check heeftversiesApplicatie")
                        .isEqualTo(actual.getHeeftversiesApplicatie())
            );
    }
}
