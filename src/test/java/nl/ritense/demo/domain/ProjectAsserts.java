package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectAllPropertiesEquals(Project expected, Project actual) {
        assertProjectAutoGeneratedPropertiesEquals(expected, actual);
        assertProjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectAllUpdatablePropertiesEquals(Project expected, Project actual) {
        assertProjectUpdatableFieldsEquals(expected, actual);
        assertProjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectAutoGeneratedPropertiesEquals(Project expected, Project actual) {
        assertThat(expected)
            .as("Verify Project auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectUpdatableFieldsEquals(Project expected, Project actual) {
        assertThat(expected)
            .as("Verify Project relevant properties")
            .satisfies(e -> assertThat(e.getCoordinaten()).as("check coordinaten").isEqualTo(actual.getCoordinaten()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getJaartot()).as("check jaartot").isEqualTo(actual.getJaartot()))
            .satisfies(e -> assertThat(e.getJaarvan()).as("check jaarvan").isEqualTo(actual.getJaarvan()))
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getNaamcode()).as("check naamcode").isEqualTo(actual.getNaamcode()))
            .satisfies(e -> assertThat(e.getProjectcd()).as("check projectcd").isEqualTo(actual.getProjectcd()))
            .satisfies(e -> assertThat(e.getToponiem()).as("check toponiem").isEqualTo(actual.getToponiem()))
            .satisfies(e -> assertThat(e.getTrefwoorden()).as("check trefwoorden").isEqualTo(actual.getTrefwoorden()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProjectUpdatableRelationshipsEquals(Project expected, Project actual) {
        assertThat(expected)
            .as("Verify Project relationships")
            .satisfies(
                e ->
                    assertThat(e.getHeeftuitstroomredenUitstroomreden())
                        .as("check heeftuitstroomredenUitstroomreden")
                        .isEqualTo(actual.getHeeftuitstroomredenUitstroomreden())
            )
            .satisfies(
                e ->
                    assertThat(e.getHeeftresultaatResultaat())
                        .as("check heeftresultaatResultaat")
                        .isEqualTo(actual.getHeeftresultaatResultaat())
            )
            .satisfies(
                e ->
                    assertThat(e.getSoortprojectProjectsoort())
                        .as("check soortprojectProjectsoort")
                        .isEqualTo(actual.getSoortprojectProjectsoort())
            )
            .satisfies(
                e ->
                    assertThat(e.getWordtbegrensddoorLocaties())
                        .as("check wordtbegrensddoorLocaties")
                        .isEqualTo(actual.getWordtbegrensddoorLocaties())
            )
            .satisfies(e -> assertThat(e.getHeeftKostenplaats()).as("check heeftKostenplaats").isEqualTo(actual.getHeeftKostenplaats()))
            .satisfies(
                e -> assertThat(e.getHeeftprojectTraject()).as("check heeftprojectTraject").isEqualTo(actual.getHeeftprojectTraject())
            );
    }
}
