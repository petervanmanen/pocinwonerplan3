package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WaterinrichtingsobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaterinrichtingsobjectAllPropertiesEquals(Waterinrichtingsobject expected, Waterinrichtingsobject actual) {
        assertWaterinrichtingsobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertWaterinrichtingsobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaterinrichtingsobjectAllUpdatablePropertiesEquals(
        Waterinrichtingsobject expected,
        Waterinrichtingsobject actual
    ) {
        assertWaterinrichtingsobjectUpdatableFieldsEquals(expected, actual);
        assertWaterinrichtingsobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaterinrichtingsobjectAutoGeneratedPropertiesEquals(
        Waterinrichtingsobject expected,
        Waterinrichtingsobject actual
    ) {
        assertThat(expected)
            .as("Verify Waterinrichtingsobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaterinrichtingsobjectUpdatableFieldsEquals(Waterinrichtingsobject expected, Waterinrichtingsobject actual) {
        assertThat(expected)
            .as("Verify Waterinrichtingsobject relevant properties")
            .satisfies(e -> assertThat(e.getAanleghoogte()).as("check aanleghoogte").isEqualTo(actual.getAanleghoogte()))
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getJaarconserveren()).as("check jaarconserveren").isEqualTo(actual.getJaarconserveren()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveauactueel())
                        .as("check kwaliteitsniveauactueel")
                        .isEqualTo(actual.getKwaliteitsniveauactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKwaliteitsniveaugewenst())
                        .as("check kwaliteitsniveaugewenst")
                        .isEqualTo(actual.getKwaliteitsniveaugewenst())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getMateriaal()).as("check materiaal").isEqualTo(actual.getMateriaal()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWaterinrichtingsobjectUpdatableRelationshipsEquals(
        Waterinrichtingsobject expected,
        Waterinrichtingsobject actual
    ) {}
}
