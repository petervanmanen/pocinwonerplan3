package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GeneralisatieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeneralisatieAllPropertiesEquals(Generalisatie expected, Generalisatie actual) {
        assertGeneralisatieAutoGeneratedPropertiesEquals(expected, actual);
        assertGeneralisatieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeneralisatieAllUpdatablePropertiesEquals(Generalisatie expected, Generalisatie actual) {
        assertGeneralisatieUpdatableFieldsEquals(expected, actual);
        assertGeneralisatieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeneralisatieAutoGeneratedPropertiesEquals(Generalisatie expected, Generalisatie actual) {
        assertThat(expected)
            .as("Verify Generalisatie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeneralisatieUpdatableFieldsEquals(Generalisatie expected, Generalisatie actual) {
        assertThat(expected)
            .as("Verify Generalisatie relevant properties")
            .satisfies(e -> assertThat(e.getDatumopname()).as("check datumopname").isEqualTo(actual.getDatumopname()))
            .satisfies(e -> assertThat(e.getDefinitie()).as("check definitie").isEqualTo(actual.getDefinitie()))
            .satisfies(e -> assertThat(e.getEaguid()).as("check eaguid").isEqualTo(actual.getEaguid()))
            .satisfies(e -> assertThat(e.getHerkomst()).as("check herkomst").isEqualTo(actual.getHerkomst()))
            .satisfies(e -> assertThat(e.getHerkomstdefinitie()).as("check herkomstdefinitie").isEqualTo(actual.getHerkomstdefinitie()))
            .satisfies(
                e ->
                    assertThat(e.getIndicatiematerielehistorie())
                        .as("check indicatiematerielehistorie")
                        .isEqualTo(actual.getIndicatiematerielehistorie())
            )
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGeneralisatieUpdatableRelationshipsEquals(Generalisatie expected, Generalisatie actual) {}
}
