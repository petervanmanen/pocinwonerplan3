package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BevindingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBevindingAllPropertiesEquals(Bevinding expected, Bevinding actual) {
        assertBevindingAutoGeneratedPropertiesEquals(expected, actual);
        assertBevindingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBevindingAllUpdatablePropertiesEquals(Bevinding expected, Bevinding actual) {
        assertBevindingUpdatableFieldsEquals(expected, actual);
        assertBevindingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBevindingAutoGeneratedPropertiesEquals(Bevinding expected, Bevinding actual) {
        assertThat(expected)
            .as("Verify Bevinding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBevindingUpdatableFieldsEquals(Bevinding expected, Bevinding actual) {
        assertThat(expected)
            .as("Verify Bevinding relevant properties")
            .satisfies(e -> assertThat(e.getAangemaaktdoor()).as("check aangemaaktdoor").isEqualTo(actual.getAangemaaktdoor()))
            .satisfies(e -> assertThat(e.getActiviteit()).as("check activiteit").isEqualTo(actual.getActiviteit()))
            .satisfies(e -> assertThat(e.getControleelement()).as("check controleelement").isEqualTo(actual.getControleelement()))
            .satisfies(e -> assertThat(e.getControleniveau()).as("check controleniveau").isEqualTo(actual.getControleniveau()))
            .satisfies(e -> assertThat(e.getDatumaanmaak()).as("check datumaanmaak").isEqualTo(actual.getDatumaanmaak()))
            .satisfies(e -> assertThat(e.getDatummutatie()).as("check datummutatie").isEqualTo(actual.getDatummutatie()))
            .satisfies(e -> assertThat(e.getDiepte()).as("check diepte").isEqualTo(actual.getDiepte()))
            .satisfies(e -> assertThat(e.getFase()).as("check fase").isEqualTo(actual.getFase()))
            .satisfies(e -> assertThat(e.getGemuteerddoor()).as("check gemuteerddoor").isEqualTo(actual.getGemuteerddoor()))
            .satisfies(e -> assertThat(e.getResultaat()).as("check resultaat").isEqualTo(actual.getResultaat()))
            .satisfies(e -> assertThat(e.getRisico()).as("check risico").isEqualTo(actual.getRisico()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBevindingUpdatableRelationshipsEquals(Bevinding expected, Bevinding actual) {}
}
