package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class BatchregelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchregelAllPropertiesEquals(Batchregel expected, Batchregel actual) {
        assertBatchregelAutoGeneratedPropertiesEquals(expected, actual);
        assertBatchregelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchregelAllUpdatablePropertiesEquals(Batchregel expected, Batchregel actual) {
        assertBatchregelUpdatableFieldsEquals(expected, actual);
        assertBatchregelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchregelAutoGeneratedPropertiesEquals(Batchregel expected, Batchregel actual) {
        assertThat(expected)
            .as("Verify Batchregel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchregelUpdatableFieldsEquals(Batchregel expected, Batchregel actual) {
        assertThat(expected)
            .as("Verify Batchregel relevant properties")
            .satisfies(e -> assertThat(e.getBedrag()).as("check bedrag").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getBedrag()))
            .satisfies(e -> assertThat(e.getDatumbetaling()).as("check datumbetaling").isEqualTo(actual.getDatumbetaling()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getRekeningnaar()).as("check rekeningnaar").isEqualTo(actual.getRekeningnaar()))
            .satisfies(e -> assertThat(e.getRekeningvan()).as("check rekeningvan").isEqualTo(actual.getRekeningvan()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBatchregelUpdatableRelationshipsEquals(Batchregel expected, Batchregel actual) {
        assertThat(expected)
            .as("Verify Batchregel relationships")
            .satisfies(e -> assertThat(e.getLeidttotMutatie()).as("check leidttotMutatie").isEqualTo(actual.getLeidttotMutatie()))
            .satisfies(e -> assertThat(e.getHeeftBatch()).as("check heeftBatch").isEqualTo(actual.getHeeftBatch()));
    }
}
