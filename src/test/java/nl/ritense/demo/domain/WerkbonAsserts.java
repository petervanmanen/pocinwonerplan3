package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WerkbonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkbonAllPropertiesEquals(Werkbon expected, Werkbon actual) {
        assertWerkbonAutoGeneratedPropertiesEquals(expected, actual);
        assertWerkbonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkbonAllUpdatablePropertiesEquals(Werkbon expected, Werkbon actual) {
        assertWerkbonUpdatableFieldsEquals(expected, actual);
        assertWerkbonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkbonAutoGeneratedPropertiesEquals(Werkbon expected, Werkbon actual) {
        assertThat(expected)
            .as("Verify Werkbon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkbonUpdatableFieldsEquals(Werkbon expected, Werkbon actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkbonUpdatableRelationshipsEquals(Werkbon expected, Werkbon actual) {
        assertThat(expected)
            .as("Verify Werkbon relationships")
            .satisfies(
                e -> assertThat(e.getBetreftVastgoedobject()).as("check betreftVastgoedobject").isEqualTo(actual.getBetreftVastgoedobject())
            )
            .satisfies(e -> assertThat(e.getBetreftBouwdeels()).as("check betreftBouwdeels").isEqualTo(actual.getBetreftBouwdeels()))
            .satisfies(
                e ->
                    assertThat(e.getBetreftBouwdeelelements())
                        .as("check betreftBouwdeelelements")
                        .isEqualTo(actual.getBetreftBouwdeelelements())
            )
            .satisfies(
                e -> assertThat(e.getHoortbijInkooporder()).as("check hoortbijInkooporder").isEqualTo(actual.getHoortbijInkooporder())
            )
            .satisfies(
                e ->
                    assertThat(e.getVoertwerkuitconformLeverancier())
                        .as("check voertwerkuitconformLeverancier")
                        .isEqualTo(actual.getVoertwerkuitconformLeverancier())
            );
    }
}
