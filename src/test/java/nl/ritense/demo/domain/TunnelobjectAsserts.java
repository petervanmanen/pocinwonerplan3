package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TunnelobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunnelobjectAllPropertiesEquals(Tunnelobject expected, Tunnelobject actual) {
        assertTunnelobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertTunnelobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunnelobjectAllUpdatablePropertiesEquals(Tunnelobject expected, Tunnelobject actual) {
        assertTunnelobjectUpdatableFieldsEquals(expected, actual);
        assertTunnelobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunnelobjectAutoGeneratedPropertiesEquals(Tunnelobject expected, Tunnelobject actual) {
        assertThat(expected)
            .as("Verify Tunnelobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunnelobjectUpdatableFieldsEquals(Tunnelobject expected, Tunnelobject actual) {
        assertThat(expected)
            .as("Verify Tunnelobject relevant properties")
            .satisfies(e -> assertThat(e.getAanleghoogte()).as("check aanleghoogte").isEqualTo(actual.getAanleghoogte()))
            .satisfies(e -> assertThat(e.getAantaltunnelbuizen()).as("check aantaltunnelbuizen").isEqualTo(actual.getAantaltunnelbuizen()))
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getDoorrijbreedte()).as("check doorrijbreedte").isEqualTo(actual.getDoorrijbreedte()))
            .satisfies(e -> assertThat(e.getDoorrijhoogte()).as("check doorrijhoogte").isEqualTo(actual.getDoorrijhoogte()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(e -> assertThat(e.getJaarconserveren()).as("check jaarconserveren").isEqualTo(actual.getJaarconserveren()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getEobjectnaam()).as("check eobjectnaam").isEqualTo(actual.getEobjectnaam()))
            .satisfies(e -> assertThat(e.getEobjectnummer()).as("check eobjectnummer").isEqualTo(actual.getEobjectnummer()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(
                e -> assertThat(e.getTunnelobjectmateriaal()).as("check tunnelobjectmateriaal").isEqualTo(actual.getTunnelobjectmateriaal())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunnelobjectUpdatableRelationshipsEquals(Tunnelobject expected, Tunnelobject actual) {}
}
