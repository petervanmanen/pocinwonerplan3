package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GebouwdobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwdobjectAllPropertiesEquals(Gebouwdobject expected, Gebouwdobject actual) {
        assertGebouwdobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertGebouwdobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwdobjectAllUpdatablePropertiesEquals(Gebouwdobject expected, Gebouwdobject actual) {
        assertGebouwdobjectUpdatableFieldsEquals(expected, actual);
        assertGebouwdobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwdobjectAutoGeneratedPropertiesEquals(Gebouwdobject expected, Gebouwdobject actual) {
        assertThat(expected)
            .as("Verify Gebouwdobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwdobjectUpdatableFieldsEquals(Gebouwdobject expected, Gebouwdobject actual) {
        assertThat(expected)
            .as("Verify Gebouwdobject relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getBouwkundigebestemmingactueel())
                        .as("check bouwkundigebestemmingactueel")
                        .isEqualTo(actual.getBouwkundigebestemmingactueel())
            )
            .satisfies(e -> assertThat(e.getBrutoinhoud()).as("check brutoinhoud").isEqualTo(actual.getBrutoinhoud()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(
                e -> assertThat(e.getInwinningoppervlakte()).as("check inwinningoppervlakte").isEqualTo(actual.getInwinningoppervlakte())
            )
            .satisfies(e -> assertThat(e.getOppervlakteobject()).as("check oppervlakteobject").isEqualTo(actual.getOppervlakteobject()))
            .satisfies(
                e -> assertThat(e.getStatusvoortgangbouw()).as("check statusvoortgangbouw").isEqualTo(actual.getStatusvoortgangbouw())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGebouwdobjectUpdatableRelationshipsEquals(Gebouwdobject expected, Gebouwdobject actual) {}
}
