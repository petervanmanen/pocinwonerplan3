package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BesluittypeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBesluittypeAllPropertiesEquals(Besluittype expected, Besluittype actual) {
        assertBesluittypeAutoGeneratedPropertiesEquals(expected, actual);
        assertBesluittypeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBesluittypeAllUpdatablePropertiesEquals(Besluittype expected, Besluittype actual) {
        assertBesluittypeUpdatableFieldsEquals(expected, actual);
        assertBesluittypeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBesluittypeAutoGeneratedPropertiesEquals(Besluittype expected, Besluittype actual) {
        assertThat(expected)
            .as("Verify Besluittype auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBesluittypeUpdatableFieldsEquals(Besluittype expected, Besluittype actual) {
        assertThat(expected)
            .as("Verify Besluittype relevant properties")
            .satisfies(e -> assertThat(e.getBesluitcategorie()).as("check besluitcategorie").isEqualTo(actual.getBesluitcategorie()))
            .satisfies(
                e ->
                    assertThat(e.getBesluittypeomschrijving())
                        .as("check besluittypeomschrijving")
                        .isEqualTo(actual.getBesluittypeomschrijving())
            )
            .satisfies(
                e ->
                    assertThat(e.getBesluittypeomschrijvinggeneriek())
                        .as("check besluittypeomschrijvinggeneriek")
                        .isEqualTo(actual.getBesluittypeomschrijvinggeneriek())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidbesluittype())
                        .as("check datumbegingeldigheidbesluittype")
                        .isEqualTo(actual.getDatumbegingeldigheidbesluittype())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidbesluittype())
                        .as("check datumeindegeldigheidbesluittype")
                        .isEqualTo(actual.getDatumeindegeldigheidbesluittype())
            )
            .satisfies(
                e -> assertThat(e.getIndicatiepublicatie()).as("check indicatiepublicatie").isEqualTo(actual.getIndicatiepublicatie())
            )
            .satisfies(e -> assertThat(e.getPublicatietekst()).as("check publicatietekst").isEqualTo(actual.getPublicatietekst()))
            .satisfies(e -> assertThat(e.getPublicatietermijn()).as("check publicatietermijn").isEqualTo(actual.getPublicatietermijn()))
            .satisfies(e -> assertThat(e.getReactietermijn()).as("check reactietermijn").isEqualTo(actual.getReactietermijn()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBesluittypeUpdatableRelationshipsEquals(Besluittype expected, Besluittype actual) {}
}
