package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LigplaatsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLigplaatsAllPropertiesEquals(Ligplaats expected, Ligplaats actual) {
        assertLigplaatsAutoGeneratedPropertiesEquals(expected, actual);
        assertLigplaatsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLigplaatsAllUpdatablePropertiesEquals(Ligplaats expected, Ligplaats actual) {
        assertLigplaatsUpdatableFieldsEquals(expected, actual);
        assertLigplaatsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLigplaatsAutoGeneratedPropertiesEquals(Ligplaats expected, Ligplaats actual) {
        assertThat(expected)
            .as("Verify Ligplaats auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLigplaatsUpdatableFieldsEquals(Ligplaats expected, Ligplaats actual) {
        assertThat(expected)
            .as("Verify Ligplaats relevant properties")
            .satisfies(
                e -> assertThat(e.getDatumbegingeldigheid()).as("check datumbegingeldigheid").isEqualTo(actual.getDatumbegingeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(
                e -> assertThat(e.getDatumeindegeldigheid()).as("check datumeindegeldigheid").isEqualTo(actual.getDatumeindegeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumingang()).as("check datumingang").isEqualTo(actual.getDatumingang()))
            .satisfies(e -> assertThat(e.getDocumentdatum()).as("check documentdatum").isEqualTo(actual.getDocumentdatum()))
            .satisfies(e -> assertThat(e.getDocumentnummer()).as("check documentnummer").isEqualTo(actual.getDocumentnummer()))
            .satisfies(e -> assertThat(e.getGeconstateerd()).as("check geconstateerd").isEqualTo(actual.getGeconstateerd()))
            .satisfies(e -> assertThat(e.getGeometrie()).as("check geometrie").isEqualTo(actual.getGeometrie()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getInonderzoek()).as("check inonderzoek").isEqualTo(actual.getInonderzoek()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getVersie()).as("check versie").isEqualTo(actual.getVersie()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLigplaatsUpdatableRelationshipsEquals(Ligplaats expected, Ligplaats actual) {}
}
