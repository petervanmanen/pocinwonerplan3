package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ScheidingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheidingAllPropertiesEquals(Scheiding expected, Scheiding actual) {
        assertScheidingAutoGeneratedPropertiesEquals(expected, actual);
        assertScheidingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheidingAllUpdatablePropertiesEquals(Scheiding expected, Scheiding actual) {
        assertScheidingUpdatableFieldsEquals(expected, actual);
        assertScheidingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheidingAutoGeneratedPropertiesEquals(Scheiding expected, Scheiding actual) {
        assertThat(expected)
            .as("Verify Scheiding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheidingUpdatableFieldsEquals(Scheiding expected, Scheiding actual) {
        assertThat(expected)
            .as("Verify Scheiding relevant properties")
            .satisfies(e -> assertThat(e.getAanleghoogte()).as("check aanleghoogte").isEqualTo(actual.getAanleghoogte()))
            .satisfies(e -> assertThat(e.getBreedte()).as("check breedte").isEqualTo(actual.getBreedte()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(e -> assertThat(e.getLengte()).as("check lengte").isEqualTo(actual.getLengte()))
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getEobjectnaam()).as("check eobjectnaam").isEqualTo(actual.getEobjectnaam()))
            .satisfies(e -> assertThat(e.getEobjectnummer()).as("check eobjectnummer").isEqualTo(actual.getEobjectnummer()))
            .satisfies(e -> assertThat(e.getOppervlakte()).as("check oppervlakte").isEqualTo(actual.getOppervlakte()))
            .satisfies(e -> assertThat(e.getScheidingmateriaal()).as("check scheidingmateriaal").isEqualTo(actual.getScheidingmateriaal()))
            .satisfies(e -> assertThat(e.getVerplaatsbaar()).as("check verplaatsbaar").isEqualTo(actual.getVerplaatsbaar()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertScheidingUpdatableRelationshipsEquals(Scheiding expected, Scheiding actual) {}
}
