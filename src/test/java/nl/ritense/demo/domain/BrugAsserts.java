package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BrugAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrugAllPropertiesEquals(Brug expected, Brug actual) {
        assertBrugAutoGeneratedPropertiesEquals(expected, actual);
        assertBrugAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrugAllUpdatablePropertiesEquals(Brug expected, Brug actual) {
        assertBrugUpdatableFieldsEquals(expected, actual);
        assertBrugUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrugAutoGeneratedPropertiesEquals(Brug expected, Brug actual) {
        assertThat(expected)
            .as("Verify Brug auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrugUpdatableFieldsEquals(Brug expected, Brug actual) {
        assertThat(expected)
            .as("Verify Brug relevant properties")
            .satisfies(
                e -> assertThat(e.getAantaloverspanningen()).as("check aantaloverspanningen").isEqualTo(actual.getAantaloverspanningen())
            )
            .satisfies(e -> assertThat(e.getBedienaar()).as("check bedienaar").isEqualTo(actual.getBedienaar()))
            .satisfies(e -> assertThat(e.getBedieningstijden()).as("check bedieningstijden").isEqualTo(actual.getBedieningstijden()))
            .satisfies(
                e -> assertThat(e.getBelastingklassenieuw()).as("check belastingklassenieuw").isEqualTo(actual.getBelastingklassenieuw())
            )
            .satisfies(e -> assertThat(e.getBelastingklasseoud()).as("check belastingklasseoud").isEqualTo(actual.getBelastingklasseoud()))
            .satisfies(e -> assertThat(e.getBeweegbaar()).as("check beweegbaar").isEqualTo(actual.getBeweegbaar()))
            .satisfies(e -> assertThat(e.getDoorrijbreedte()).as("check doorrijbreedte").isEqualTo(actual.getDoorrijbreedte()))
            .satisfies(e -> assertThat(e.getDraagvermogen()).as("check draagvermogen").isEqualTo(actual.getDraagvermogen()))
            .satisfies(e -> assertThat(e.getHoofdroute()).as("check hoofdroute").isEqualTo(actual.getHoofdroute()))
            .satisfies(e -> assertThat(e.getHoofdvaarroute()).as("check hoofdvaarroute").isEqualTo(actual.getHoofdvaarroute()))
            .satisfies(
                e ->
                    assertThat(e.getMaximaaltoelaatbaarvoertuiggewicht())
                        .as("check maximaaltoelaatbaarvoertuiggewicht")
                        .isEqualTo(actual.getMaximaaltoelaatbaarvoertuiggewicht())
            )
            .satisfies(
                e -> assertThat(e.getMaximaleasbelasting()).as("check maximaleasbelasting").isEqualTo(actual.getMaximaleasbelasting())
            )
            .satisfies(
                e -> assertThat(e.getMaximaleoverspanning()).as("check maximaleoverspanning").isEqualTo(actual.getMaximaleoverspanning())
            )
            .satisfies(e -> assertThat(e.getStatischmoment()).as("check statischmoment").isEqualTo(actual.getStatischmoment()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()))
            .satisfies(e -> assertThat(e.getZwaarstevoertuig()).as("check zwaarstevoertuig").isEqualTo(actual.getZwaarstevoertuig()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBrugUpdatableRelationshipsEquals(Brug expected, Brug actual) {}
}
