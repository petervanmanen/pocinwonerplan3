package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WozobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWozobjectAllPropertiesEquals(Wozobject expected, Wozobject actual) {
        assertWozobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertWozobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWozobjectAllUpdatablePropertiesEquals(Wozobject expected, Wozobject actual) {
        assertWozobjectUpdatableFieldsEquals(expected, actual);
        assertWozobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWozobjectAutoGeneratedPropertiesEquals(Wozobject expected, Wozobject actual) {
        assertThat(expected)
            .as("Verify Wozobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWozobjectUpdatableFieldsEquals(Wozobject expected, Wozobject actual) {
        assertThat(expected)
            .as("Verify Wozobject relevant properties")
            .satisfies(e -> assertThat(e.getEmpty()).as("check empty").isEqualTo(actual.getEmpty()))
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidwozobject())
                        .as("check datumbegingeldigheidwozobject")
                        .isEqualTo(actual.getDatumbegingeldigheidwozobject())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidwozobject())
                        .as("check datumeindegeldigheidwozobject")
                        .isEqualTo(actual.getDatumeindegeldigheidwozobject())
            )
            .satisfies(e -> assertThat(e.getDatumwaardepeiling()).as("check datumwaardepeiling").isEqualTo(actual.getDatumwaardepeiling()))
            .satisfies(e -> assertThat(e.getGebruikscode()).as("check gebruikscode").isEqualTo(actual.getGebruikscode()))
            .satisfies(e -> assertThat(e.getGeometriewozobject()).as("check geometriewozobject").isEqualTo(actual.getGeometriewozobject()))
            .satisfies(e -> assertThat(e.getGrondoppervlakte()).as("check grondoppervlakte").isEqualTo(actual.getGrondoppervlakte()))
            .satisfies(e -> assertThat(e.getSoortobjectcode()).as("check soortobjectcode").isEqualTo(actual.getSoortobjectcode()))
            .satisfies(e -> assertThat(e.getStatuswozobject()).as("check statuswozobject").isEqualTo(actual.getStatuswozobject()))
            .satisfies(e -> assertThat(e.getVastgesteldewaarde()).as("check vastgesteldewaarde").isEqualTo(actual.getVastgesteldewaarde()))
            .satisfies(e -> assertThat(e.getWozobjectnummer()).as("check wozobjectnummer").isEqualTo(actual.getWozobjectnummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWozobjectUpdatableRelationshipsEquals(Wozobject expected, Wozobject actual) {}
}
