package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RegeltekstAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegeltekstAllPropertiesEquals(Regeltekst expected, Regeltekst actual) {
        assertRegeltekstAutoGeneratedPropertiesEquals(expected, actual);
        assertRegeltekstAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegeltekstAllUpdatablePropertiesEquals(Regeltekst expected, Regeltekst actual) {
        assertRegeltekstUpdatableFieldsEquals(expected, actual);
        assertRegeltekstUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegeltekstAutoGeneratedPropertiesEquals(Regeltekst expected, Regeltekst actual) {
        assertThat(expected)
            .as("Verify Regeltekst auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegeltekstUpdatableFieldsEquals(Regeltekst expected, Regeltekst actual) {
        assertThat(expected)
            .as("Verify Regeltekst relevant properties")
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getTekst()).as("check tekst").isEqualTo(actual.getTekst()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRegeltekstUpdatableRelationshipsEquals(Regeltekst expected, Regeltekst actual) {
        assertThat(expected)
            .as("Verify Regeltekst relationships")
            .satisfies(e -> assertThat(e.getHeeftthemaThemas()).as("check heeftthemaThemas").isEqualTo(actual.getHeeftthemaThemas()))
            .satisfies(
                e ->
                    assertThat(e.getHeeftidealisatieIdealisaties())
                        .as("check heeftidealisatieIdealisaties")
                        .isEqualTo(actual.getHeeftidealisatieIdealisaties())
            )
            .satisfies(
                e ->
                    assertThat(e.getWerkingsgebiedLocaties())
                        .as("check werkingsgebiedLocaties")
                        .isEqualTo(actual.getWerkingsgebiedLocaties())
            )
            .satisfies(
                e ->
                    assertThat(e.getBevatOmgevingsdocument())
                        .as("check bevatOmgevingsdocument")
                        .isEqualTo(actual.getBevatOmgevingsdocument())
            )
            .satisfies(
                e ->
                    assertThat(e.getWerkingsgebiedRegeltekst2())
                        .as("check werkingsgebiedRegeltekst2")
                        .isEqualTo(actual.getWerkingsgebiedRegeltekst2())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsgerelateerdRegeltekst2())
                        .as("check isgerelateerdRegeltekst2")
                        .isEqualTo(actual.getIsgerelateerdRegeltekst2())
            );
    }
}
