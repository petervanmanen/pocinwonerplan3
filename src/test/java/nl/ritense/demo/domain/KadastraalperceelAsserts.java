package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KadastraalperceelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKadastraalperceelAllPropertiesEquals(Kadastraalperceel expected, Kadastraalperceel actual) {
        assertKadastraalperceelAutoGeneratedPropertiesEquals(expected, actual);
        assertKadastraalperceelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKadastraalperceelAllUpdatablePropertiesEquals(Kadastraalperceel expected, Kadastraalperceel actual) {
        assertKadastraalperceelUpdatableFieldsEquals(expected, actual);
        assertKadastraalperceelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKadastraalperceelAutoGeneratedPropertiesEquals(Kadastraalperceel expected, Kadastraalperceel actual) {
        assertThat(expected)
            .as("Verify Kadastraalperceel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKadastraalperceelUpdatableFieldsEquals(Kadastraalperceel expected, Kadastraalperceel actual) {
        assertThat(expected)
            .as("Verify Kadastraalperceel relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getAanduidingsoortgrootte())
                        .as("check aanduidingsoortgrootte")
                        .isEqualTo(actual.getAanduidingsoortgrootte())
            )
            .satisfies(e -> assertThat(e.getBegrenzingperceel()).as("check begrenzingperceel").isEqualTo(actual.getBegrenzingperceel()))
            .satisfies(e -> assertThat(e.getGrootteperceel()).as("check grootteperceel").isEqualTo(actual.getGrootteperceel()))
            .satisfies(
                e -> assertThat(e.getIndicatiedeelperceel()).as("check indicatiedeelperceel").isEqualTo(actual.getIndicatiedeelperceel())
            )
            .satisfies(
                e ->
                    assertThat(e.getOmschrijvingdeelperceel())
                        .as("check omschrijvingdeelperceel")
                        .isEqualTo(actual.getOmschrijvingdeelperceel())
            )
            .satisfies(
                e ->
                    assertThat(e.getPlaatscoordinatenperceel())
                        .as("check plaatscoordinatenperceel")
                        .isEqualTo(actual.getPlaatscoordinatenperceel())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKadastraalperceelUpdatableRelationshipsEquals(Kadastraalperceel expected, Kadastraalperceel actual) {}
}
