package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class InkooporderAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkooporderAllPropertiesEquals(Inkooporder expected, Inkooporder actual) {
        assertInkooporderAutoGeneratedPropertiesEquals(expected, actual);
        assertInkooporderAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkooporderAllUpdatablePropertiesEquals(Inkooporder expected, Inkooporder actual) {
        assertInkooporderUpdatableFieldsEquals(expected, actual);
        assertInkooporderUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkooporderAutoGeneratedPropertiesEquals(Inkooporder expected, Inkooporder actual) {
        assertThat(expected)
            .as("Verify Inkooporder auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkooporderUpdatableFieldsEquals(Inkooporder expected, Inkooporder actual) {
        assertThat(expected)
            .as("Verify Inkooporder relevant properties")
            .satisfies(e -> assertThat(e.getArtikelcode()).as("check artikelcode").isEqualTo(actual.getArtikelcode()))
            .satisfies(
                e -> assertThat(e.getBetalingmeerderejaren()).as("check betalingmeerderejaren").isEqualTo(actual.getBetalingmeerderejaren())
            )
            .satisfies(e -> assertThat(e.getBetreft()).as("check betreft").isEqualTo(actual.getBetreft()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumingediend()).as("check datumingediend").isEqualTo(actual.getDatumingediend()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getGoederencode()).as("check goederencode").isEqualTo(actual.getGoederencode()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getOrdernummer()).as("check ordernummer").isEqualTo(actual.getOrdernummer()))
            .satisfies(e -> assertThat(e.getSaldo()).as("check saldo").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getSaldo()))
            .satisfies(
                e ->
                    assertThat(e.getTotaalnettobedrag())
                        .as("check totaalnettobedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getTotaalnettobedrag())
            )
            .satisfies(
                e -> assertThat(e.getWijzevanaanbesteden()).as("check wijzevanaanbesteden").isEqualTo(actual.getWijzevanaanbesteden())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertInkooporderUpdatableRelationshipsEquals(Inkooporder expected, Inkooporder actual) {
        assertThat(expected)
            .as("Verify Inkooporder relationships")
            .satisfies(e -> assertThat(e.getBetreftContract()).as("check betreftContract").isEqualTo(actual.getBetreftContract()))
            .satisfies(
                e ->
                    assertThat(e.getOorspronkelijkInkooporder())
                        .as("check oorspronkelijkInkooporder")
                        .isEqualTo(actual.getOorspronkelijkInkooporder())
            )
            .satisfies(e -> assertThat(e.getHeeftInkooppakket()).as("check heeftInkooppakket").isEqualTo(actual.getHeeftInkooppakket()))
            .satisfies(
                e ->
                    assertThat(e.getVerplichtingaanLeverancier())
                        .as("check verplichtingaanLeverancier")
                        .isEqualTo(actual.getVerplichtingaanLeverancier())
            )
            .satisfies(
                e ->
                    assertThat(e.getWordtgeschrevenopHoofdrekenings())
                        .as("check wordtgeschrevenopHoofdrekenings")
                        .isEqualTo(actual.getWordtgeschrevenopHoofdrekenings())
            )
            .satisfies(
                e ->
                    assertThat(e.getGerelateerdInkooporder2())
                        .as("check gerelateerdInkooporder2")
                        .isEqualTo(actual.getGerelateerdInkooporder2())
            )
            .satisfies(e -> assertThat(e.getHeeftKostenplaats()).as("check heeftKostenplaats").isEqualTo(actual.getHeeftKostenplaats()));
    }
}
