package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WerknemerAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerknemerAllPropertiesEquals(Werknemer expected, Werknemer actual) {
        assertWerknemerAutoGeneratedPropertiesEquals(expected, actual);
        assertWerknemerAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerknemerAllUpdatablePropertiesEquals(Werknemer expected, Werknemer actual) {
        assertWerknemerUpdatableFieldsEquals(expected, actual);
        assertWerknemerUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerknemerAutoGeneratedPropertiesEquals(Werknemer expected, Werknemer actual) {
        assertThat(expected)
            .as("Verify Werknemer auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerknemerUpdatableFieldsEquals(Werknemer expected, Werknemer actual) {
        assertThat(expected)
            .as("Verify Werknemer relevant properties")
            .satisfies(e -> assertThat(e.getGeboortedatum()).as("check geboortedatum").isEqualTo(actual.getGeboortedatum()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getVoornaam()).as("check voornaam").isEqualTo(actual.getVoornaam()))
            .satisfies(e -> assertThat(e.getWoonplaats()).as("check woonplaats").isEqualTo(actual.getWoonplaats()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerknemerUpdatableRelationshipsEquals(Werknemer expected, Werknemer actual) {
        assertThat(expected)
            .as("Verify Werknemer relationships")
            .satisfies(
                e ->
                    assertThat(e.getHeeftondergaanGeweldsincident())
                        .as("check heeftondergaanGeweldsincident")
                        .isEqualTo(actual.getHeeftondergaanGeweldsincident())
            )
            .satisfies(e -> assertThat(e.getHeeftRols()).as("check heeftRols").isEqualTo(actual.getHeeftRols()))
            .satisfies(
                e ->
                    assertThat(e.getDoetsollicitatiegesprekSollicitatiegespreks())
                        .as("check doetsollicitatiegesprekSollicitatiegespreks")
                        .isEqualTo(actual.getDoetsollicitatiegesprekSollicitatiegespreks())
            );
    }
}
