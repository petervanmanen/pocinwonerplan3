package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SplitsingstekeningreferentieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitsingstekeningreferentieAllPropertiesEquals(
        Splitsingstekeningreferentie expected,
        Splitsingstekeningreferentie actual
    ) {
        assertSplitsingstekeningreferentieAutoGeneratedPropertiesEquals(expected, actual);
        assertSplitsingstekeningreferentieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitsingstekeningreferentieAllUpdatablePropertiesEquals(
        Splitsingstekeningreferentie expected,
        Splitsingstekeningreferentie actual
    ) {
        assertSplitsingstekeningreferentieUpdatableFieldsEquals(expected, actual);
        assertSplitsingstekeningreferentieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitsingstekeningreferentieAutoGeneratedPropertiesEquals(
        Splitsingstekeningreferentie expected,
        Splitsingstekeningreferentie actual
    ) {
        assertThat(expected)
            .as("Verify Splitsingstekeningreferentie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitsingstekeningreferentieUpdatableFieldsEquals(
        Splitsingstekeningreferentie expected,
        Splitsingstekeningreferentie actual
    ) {
        assertThat(expected)
            .as("Verify Splitsingstekeningreferentie relevant properties")
            .satisfies(e -> assertThat(e.getBronorganisatie()).as("check bronorganisatie").isEqualTo(actual.getBronorganisatie()))
            .satisfies(e -> assertThat(e.getDatumcreatie()).as("check datumcreatie").isEqualTo(actual.getDatumcreatie()))
            .satisfies(
                e -> assertThat(e.getIdentificatietekening()).as("check identificatietekening").isEqualTo(actual.getIdentificatietekening())
            )
            .satisfies(e -> assertThat(e.getTitel()).as("check titel").isEqualTo(actual.getTitel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSplitsingstekeningreferentieUpdatableRelationshipsEquals(
        Splitsingstekeningreferentie expected,
        Splitsingstekeningreferentie actual
    ) {}
}
