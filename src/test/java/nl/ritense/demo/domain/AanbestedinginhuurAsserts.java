package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AanbestedinginhuurAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedinginhuurAllPropertiesEquals(Aanbestedinginhuur expected, Aanbestedinginhuur actual) {
        assertAanbestedinginhuurAutoGeneratedPropertiesEquals(expected, actual);
        assertAanbestedinginhuurAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedinginhuurAllUpdatablePropertiesEquals(Aanbestedinginhuur expected, Aanbestedinginhuur actual) {
        assertAanbestedinginhuurUpdatableFieldsEquals(expected, actual);
        assertAanbestedinginhuurUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedinginhuurAutoGeneratedPropertiesEquals(Aanbestedinginhuur expected, Aanbestedinginhuur actual) {
        assertThat(expected)
            .as("Verify Aanbestedinginhuur auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedinginhuurUpdatableFieldsEquals(Aanbestedinginhuur expected, Aanbestedinginhuur actual) {
        assertThat(expected)
            .as("Verify Aanbestedinginhuur relevant properties")
            .satisfies(e -> assertThat(e.getAanvraaggesloten()).as("check aanvraaggesloten").isEqualTo(actual.getAanvraaggesloten()))
            .satisfies(e -> assertThat(e.getAanvraagnummer()).as("check aanvraagnummer").isEqualTo(actual.getAanvraagnummer()))
            .satisfies(e -> assertThat(e.getDatumcreatie()).as("check datumcreatie").isEqualTo(actual.getDatumcreatie()))
            .satisfies(e -> assertThat(e.getDatumopeningkluis()).as("check datumopeningkluis").isEqualTo(actual.getDatumopeningkluis()))
            .satisfies(e -> assertThat(e.getDatumsluiting()).as("check datumsluiting").isEqualTo(actual.getDatumsluiting()))
            .satisfies(e -> assertThat(e.getDatumverzending()).as("check datumverzending").isEqualTo(actual.getDatumverzending()))
            .satisfies(e -> assertThat(e.getFase()).as("check fase").isEqualTo(actual.getFase()))
            .satisfies(e -> assertThat(e.getHoogstetarief()).as("check hoogstetarief").isEqualTo(actual.getHoogstetarief()))
            .satisfies(e -> assertThat(e.getLaagstetarief()).as("check laagstetarief").isEqualTo(actual.getLaagstetarief()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getPerceel()).as("check perceel").isEqualTo(actual.getPerceel()))
            .satisfies(e -> assertThat(e.getProcedure()).as("check procedure").isEqualTo(actual.getProcedure()))
            .satisfies(e -> assertThat(e.getProjectnaam()).as("check projectnaam").isEqualTo(actual.getProjectnaam()))
            .satisfies(e -> assertThat(e.getProjectreferentie()).as("check projectreferentie").isEqualTo(actual.getProjectreferentie()))
            .satisfies(e -> assertThat(e.getPublicatie()).as("check publicatie").isEqualTo(actual.getPublicatie()))
            .satisfies(e -> assertThat(e.getReferentie()).as("check referentie").isEqualTo(actual.getReferentie()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getTitel()).as("check titel").isEqualTo(actual.getTitel()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAanbestedinginhuurUpdatableRelationshipsEquals(Aanbestedinginhuur expected, Aanbestedinginhuur actual) {}
}
