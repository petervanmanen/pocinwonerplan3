package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VomaanvraagofmeldingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVomaanvraagofmeldingAllPropertiesEquals(Vomaanvraagofmelding expected, Vomaanvraagofmelding actual) {
        assertVomaanvraagofmeldingAutoGeneratedPropertiesEquals(expected, actual);
        assertVomaanvraagofmeldingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVomaanvraagofmeldingAllUpdatablePropertiesEquals(Vomaanvraagofmelding expected, Vomaanvraagofmelding actual) {
        assertVomaanvraagofmeldingUpdatableFieldsEquals(expected, actual);
        assertVomaanvraagofmeldingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVomaanvraagofmeldingAutoGeneratedPropertiesEquals(Vomaanvraagofmelding expected, Vomaanvraagofmelding actual) {
        assertThat(expected)
            .as("Verify Vomaanvraagofmelding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVomaanvraagofmeldingUpdatableFieldsEquals(Vomaanvraagofmelding expected, Vomaanvraagofmelding actual) {
        assertThat(expected)
            .as("Verify Vomaanvraagofmelding relevant properties")
            .satisfies(e -> assertThat(e.getActiviteiten()).as("check activiteiten").isEqualTo(actual.getActiviteiten()))
            .satisfies(e -> assertThat(e.getAdres()).as("check adres").isEqualTo(actual.getAdres()))
            .satisfies(e -> assertThat(e.getBagid()).as("check bagid").isEqualTo(actual.getBagid()))
            .satisfies(e -> assertThat(e.getDossiernummer()).as("check dossiernummer").isEqualTo(actual.getDossiernummer()))
            .satisfies(e -> assertThat(e.getIntaketype()).as("check intaketype").isEqualTo(actual.getIntaketype()))
            .satisfies(e -> assertThat(e.getInternnummer()).as("check internnummer").isEqualTo(actual.getInternnummer()))
            .satisfies(
                e -> assertThat(e.getKadastraleaanduiding()).as("check kadastraleaanduiding").isEqualTo(actual.getKadastraleaanduiding())
            )
            .satisfies(e -> assertThat(e.getKenmerk()).as("check kenmerk").isEqualTo(actual.getKenmerk()))
            .satisfies(e -> assertThat(e.getLocatie()).as("check locatie").isEqualTo(actual.getLocatie()))
            .satisfies(
                e -> assertThat(e.getLocatieomschrijving()).as("check locatieomschrijving").isEqualTo(actual.getLocatieomschrijving())
            )
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVomaanvraagofmeldingUpdatableRelationshipsEquals(Vomaanvraagofmelding expected, Vomaanvraagofmelding actual) {}
}
