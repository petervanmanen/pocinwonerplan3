package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class GemeentebegrafenisAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemeentebegrafenisAllPropertiesEquals(Gemeentebegrafenis expected, Gemeentebegrafenis actual) {
        assertGemeentebegrafenisAutoGeneratedPropertiesEquals(expected, actual);
        assertGemeentebegrafenisAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemeentebegrafenisAllUpdatablePropertiesEquals(Gemeentebegrafenis expected, Gemeentebegrafenis actual) {
        assertGemeentebegrafenisUpdatableFieldsEquals(expected, actual);
        assertGemeentebegrafenisUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemeentebegrafenisAutoGeneratedPropertiesEquals(Gemeentebegrafenis expected, Gemeentebegrafenis actual) {
        assertThat(expected)
            .as("Verify Gemeentebegrafenis auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemeentebegrafenisUpdatableFieldsEquals(Gemeentebegrafenis expected, Gemeentebegrafenis actual) {
        assertThat(expected)
            .as("Verify Gemeentebegrafenis relevant properties")
            .satisfies(e -> assertThat(e.getAchtergrondmelding()).as("check achtergrondmelding").isEqualTo(actual.getAchtergrondmelding()))
            .satisfies(
                e ->
                    assertThat(e.getBegrafeniskosten())
                        .as("check begrafeniskosten")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBegrafeniskosten())
            )
            .satisfies(e -> assertThat(e.getDatumafgedaan()).as("check datumafgedaan").isEqualTo(actual.getDatumafgedaan()))
            .satisfies(e -> assertThat(e.getDatumbegrafenis()).as("check datumbegrafenis").isEqualTo(actual.getDatumbegrafenis()))
            .satisfies(e -> assertThat(e.getDatumgemeld()).as("check datumgemeld").isEqualTo(actual.getDatumgemeld()))
            .satisfies(e -> assertThat(e.getDatumruiminggraf()).as("check datumruiminggraf").isEqualTo(actual.getDatumruiminggraf()))
            .satisfies(e -> assertThat(e.getDoodsoorzaak()).as("check doodsoorzaak").isEqualTo(actual.getDoodsoorzaak()))
            .satisfies(
                e ->
                    assertThat(e.getGemeentelijkekosten())
                        .as("check gemeentelijkekosten")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getGemeentelijkekosten())
            )
            .satisfies(e -> assertThat(e.getInkoopordernummer()).as("check inkoopordernummer").isEqualTo(actual.getInkoopordernummer()))
            .satisfies(e -> assertThat(e.getMelder()).as("check melder").isEqualTo(actual.getMelder()))
            .satisfies(e -> assertThat(e.getUrengemeente()).as("check urengemeente").isEqualTo(actual.getUrengemeente()))
            .satisfies(
                e ->
                    assertThat(e.getVerhaaldbedrag())
                        .as("check verhaaldbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getVerhaaldbedrag())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGemeentebegrafenisUpdatableRelationshipsEquals(Gemeentebegrafenis expected, Gemeentebegrafenis actual) {}
}
