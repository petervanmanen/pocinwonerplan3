package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class OorspronkelijkefunctieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOorspronkelijkefunctieAllPropertiesEquals(Oorspronkelijkefunctie expected, Oorspronkelijkefunctie actual) {
        assertOorspronkelijkefunctieAutoGeneratedPropertiesEquals(expected, actual);
        assertOorspronkelijkefunctieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOorspronkelijkefunctieAllUpdatablePropertiesEquals(
        Oorspronkelijkefunctie expected,
        Oorspronkelijkefunctie actual
    ) {
        assertOorspronkelijkefunctieUpdatableFieldsEquals(expected, actual);
        assertOorspronkelijkefunctieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOorspronkelijkefunctieAutoGeneratedPropertiesEquals(
        Oorspronkelijkefunctie expected,
        Oorspronkelijkefunctie actual
    ) {
        assertThat(expected)
            .as("Verify Oorspronkelijkefunctie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOorspronkelijkefunctieUpdatableFieldsEquals(Oorspronkelijkefunctie expected, Oorspronkelijkefunctie actual) {
        assertThat(expected)
            .as("Verify Oorspronkelijkefunctie relevant properties")
            .satisfies(e -> assertThat(e.getFunctie()).as("check functie").isEqualTo(actual.getFunctie()))
            .satisfies(e -> assertThat(e.getFunctiesoort()).as("check functiesoort").isEqualTo(actual.getFunctiesoort()))
            .satisfies(e -> assertThat(e.getHoofdcategorie()).as("check hoofdcategorie").isEqualTo(actual.getHoofdcategorie()))
            .satisfies(e -> assertThat(e.getHoofdfunctie()).as("check hoofdfunctie").isEqualTo(actual.getHoofdfunctie()))
            .satisfies(e -> assertThat(e.getSubcategorie()).as("check subcategorie").isEqualTo(actual.getSubcategorie()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()))
            .satisfies(e -> assertThat(e.getVerbijzondering()).as("check verbijzondering").isEqualTo(actual.getVerbijzondering()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertOorspronkelijkefunctieUpdatableRelationshipsEquals(
        Oorspronkelijkefunctie expected,
        Oorspronkelijkefunctie actual
    ) {}
}
