package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BoomAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoomAllPropertiesEquals(Boom expected, Boom actual) {
        assertBoomAutoGeneratedPropertiesEquals(expected, actual);
        assertBoomAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoomAllUpdatablePropertiesEquals(Boom expected, Boom actual) {
        assertBoomUpdatableFieldsEquals(expected, actual);
        assertBoomUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoomAutoGeneratedPropertiesEquals(Boom expected, Boom actual) {
        assertThat(expected)
            .as("Verify Boom auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoomUpdatableFieldsEquals(Boom expected, Boom actual) {
        assertThat(expected)
            .as("Verify Boom relevant properties")
            .satisfies(e -> assertThat(e.getBeleidsstatus()).as("check beleidsstatus").isEqualTo(actual.getBeleidsstatus()))
            .satisfies(e -> assertThat(e.getBeoogdeomlooptijd()).as("check beoogdeomlooptijd").isEqualTo(actual.getBeoogdeomlooptijd()))
            .satisfies(e -> assertThat(e.getBoombeeld()).as("check boombeeld").isEqualTo(actual.getBoombeeld()))
            .satisfies(e -> assertThat(e.getBoombeschermer()).as("check boombeschermer").isEqualTo(actual.getBoombeschermer()))
            .satisfies(e -> assertThat(e.getBoomgroep()).as("check boomgroep").isEqualTo(actual.getBoomgroep()))
            .satisfies(e -> assertThat(e.getBoomhoogteactueel()).as("check boomhoogteactueel").isEqualTo(actual.getBoomhoogteactueel()))
            .satisfies(
                e ->
                    assertThat(e.getBoomhoogteklasseactueel())
                        .as("check boomhoogteklasseactueel")
                        .isEqualTo(actual.getBoomhoogteklasseactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getBoomhoogteklasseeindebeeld())
                        .as("check boomhoogteklasseeindebeeld")
                        .isEqualTo(actual.getBoomhoogteklasseeindebeeld())
            )
            .satisfies(e -> assertThat(e.getBoomspiegel()).as("check boomspiegel").isEqualTo(actual.getBoomspiegel()))
            .satisfies(
                e ->
                    assertThat(e.getBoomtypebeschermingsstatusplus())
                        .as("check boomtypebeschermingsstatusplus")
                        .isEqualTo(actual.getBoomtypebeschermingsstatusplus())
            )
            .satisfies(e -> assertThat(e.getBoomvoorziening()).as("check boomvoorziening").isEqualTo(actual.getBoomvoorziening()))
            .satisfies(e -> assertThat(e.getControlefrequentie()).as("check controlefrequentie").isEqualTo(actual.getControlefrequentie()))
            .satisfies(e -> assertThat(e.getFeestverlichting()).as("check feestverlichting").isEqualTo(actual.getFeestverlichting()))
            .satisfies(e -> assertThat(e.getGroeifase()).as("check groeifase").isEqualTo(actual.getGroeifase()))
            .satisfies(
                e -> assertThat(e.getGroeiplaatsinrichting()).as("check groeiplaatsinrichting").isEqualTo(actual.getGroeiplaatsinrichting())
            )
            .satisfies(e -> assertThat(e.getHerplantplicht()).as("check herplantplicht").isEqualTo(actual.getHerplantplicht()))
            .satisfies(e -> assertThat(e.getKiemjaar()).as("check kiemjaar").isEqualTo(actual.getKiemjaar()))
            .satisfies(
                e ->
                    assertThat(e.getKroondiameterklasseactueel())
                        .as("check kroondiameterklasseactueel")
                        .isEqualTo(actual.getKroondiameterklasseactueel())
            )
            .satisfies(
                e ->
                    assertThat(e.getKroondiameterklasseeindebeeld())
                        .as("check kroondiameterklasseeindebeeld")
                        .isEqualTo(actual.getKroondiameterklasseeindebeeld())
            )
            .satisfies(e -> assertThat(e.getKroonvolume()).as("check kroonvolume").isEqualTo(actual.getKroonvolume()))
            .satisfies(e -> assertThat(e.getLeeftijd()).as("check leeftijd").isEqualTo(actual.getLeeftijd()))
            .satisfies(e -> assertThat(e.getMeerstammig()).as("check meerstammig").isEqualTo(actual.getMeerstammig()))
            .satisfies(
                e -> assertThat(e.getMonetaireboomwaarde()).as("check monetaireboomwaarde").isEqualTo(actual.getMonetaireboomwaarde())
            )
            .satisfies(e -> assertThat(e.getSnoeifase()).as("check snoeifase").isEqualTo(actual.getSnoeifase()))
            .satisfies(e -> assertThat(e.getStamdiameter()).as("check stamdiameter").isEqualTo(actual.getStamdiameter()))
            .satisfies(e -> assertThat(e.getStamdiameterklasse()).as("check stamdiameterklasse").isEqualTo(actual.getStamdiameterklasse()))
            .satisfies(
                e ->
                    assertThat(e.getTakvrijeruimtetotgebouw())
                        .as("check takvrijeruimtetotgebouw")
                        .isEqualTo(actual.getTakvrijeruimtetotgebouw())
            )
            .satisfies(e -> assertThat(e.getTakvrijestam()).as("check takvrijestam").isEqualTo(actual.getTakvrijestam()))
            .satisfies(
                e -> assertThat(e.getTakvrijezoneprimair()).as("check takvrijezoneprimair").isEqualTo(actual.getTakvrijezoneprimair())
            )
            .satisfies(
                e -> assertThat(e.getTakvrijezonesecundair()).as("check takvrijezonesecundair").isEqualTo(actual.getTakvrijezonesecundair())
            )
            .satisfies(e -> assertThat(e.getTransponder()).as("check transponder").isEqualTo(actual.getTransponder()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(
                e ->
                    assertThat(e.getTypebeschermingsstatus())
                        .as("check typebeschermingsstatus")
                        .isEqualTo(actual.getTypebeschermingsstatus())
            )
            .satisfies(
                e ->
                    assertThat(e.getTypeomgevingsrisicoklasse())
                        .as("check typeomgevingsrisicoklasse")
                        .isEqualTo(actual.getTypeomgevingsrisicoklasse())
            )
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()))
            .satisfies(
                e ->
                    assertThat(e.getTypevermeerderingsvorm())
                        .as("check typevermeerderingsvorm")
                        .isEqualTo(actual.getTypevermeerderingsvorm())
            )
            .satisfies(
                e -> assertThat(e.getVeiligheidsklasseboom()).as("check veiligheidsklasseboom").isEqualTo(actual.getVeiligheidsklasseboom())
            )
            .satisfies(e -> assertThat(e.getVerplant()).as("check verplant").isEqualTo(actual.getVerplant()))
            .satisfies(e -> assertThat(e.getVerplantbaar()).as("check verplantbaar").isEqualTo(actual.getVerplantbaar()))
            .satisfies(e -> assertThat(e.getVrijedoorrijhoogte()).as("check vrijedoorrijhoogte").isEqualTo(actual.getVrijedoorrijhoogte()))
            .satisfies(
                e ->
                    assertThat(e.getVrijedoorrijhoogteprimair())
                        .as("check vrijedoorrijhoogteprimair")
                        .isEqualTo(actual.getVrijedoorrijhoogteprimair())
            )
            .satisfies(
                e ->
                    assertThat(e.getVrijedoorrijhoogtesecundair())
                        .as("check vrijedoorrijhoogtesecundair")
                        .isEqualTo(actual.getVrijedoorrijhoogtesecundair())
            )
            .satisfies(e -> assertThat(e.getVrijetakval()).as("check vrijetakval").isEqualTo(actual.getVrijetakval()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBoomUpdatableRelationshipsEquals(Boom expected, Boom actual) {}
}
