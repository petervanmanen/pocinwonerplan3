package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SchouwrondeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchouwrondeAllPropertiesEquals(Schouwronde expected, Schouwronde actual) {
        assertSchouwrondeAutoGeneratedPropertiesEquals(expected, actual);
        assertSchouwrondeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchouwrondeAllUpdatablePropertiesEquals(Schouwronde expected, Schouwronde actual) {
        assertSchouwrondeUpdatableFieldsEquals(expected, actual);
        assertSchouwrondeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchouwrondeAutoGeneratedPropertiesEquals(Schouwronde expected, Schouwronde actual) {
        assertThat(expected)
            .as("Verify Schouwronde auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchouwrondeUpdatableFieldsEquals(Schouwronde expected, Schouwronde actual) {}

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSchouwrondeUpdatableRelationshipsEquals(Schouwronde expected, Schouwronde actual) {
        assertThat(expected)
            .as("Verify Schouwronde relationships")
            .satisfies(e -> assertThat(e.getVoertuitMedewerker()).as("check voertuitMedewerker").isEqualTo(actual.getVoertuitMedewerker()))
            .satisfies(e -> assertThat(e.getBinnenAreaals()).as("check binnenAreaals").isEqualTo(actual.getBinnenAreaals()));
    }
}
