package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LandAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandAllPropertiesEquals(Land expected, Land actual) {
        assertLandAutoGeneratedPropertiesEquals(expected, actual);
        assertLandAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandAllUpdatablePropertiesEquals(Land expected, Land actual) {
        assertLandUpdatableFieldsEquals(expected, actual);
        assertLandUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandAutoGeneratedPropertiesEquals(Land expected, Land actual) {
        assertThat(expected)
            .as("Verify Land auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandUpdatableFieldsEquals(Land expected, Land actual) {
        assertThat(expected)
            .as("Verify Land relevant properties")
            .satisfies(e -> assertThat(e.getDatumeindefictief()).as("check datumeindefictief").isEqualTo(actual.getDatumeindefictief()))
            .satisfies(e -> assertThat(e.getDatumeindeland()).as("check datumeindeland").isEqualTo(actual.getDatumeindeland()))
            .satisfies(e -> assertThat(e.getDatumingangland()).as("check datumingangland").isEqualTo(actual.getDatumingangland()))
            .satisfies(e -> assertThat(e.getLandcode()).as("check landcode").isEqualTo(actual.getLandcode()))
            .satisfies(
                e ->
                    assertThat(e.getLandcodeisodrieletterig())
                        .as("check landcodeisodrieletterig")
                        .isEqualTo(actual.getLandcodeisodrieletterig())
            )
            .satisfies(
                e ->
                    assertThat(e.getLandcodeisotweeletterig())
                        .as("check landcodeisotweeletterig")
                        .isEqualTo(actual.getLandcodeisotweeletterig())
            )
            .satisfies(e -> assertThat(e.getLandnaam()).as("check landnaam").isEqualTo(actual.getLandnaam()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLandUpdatableRelationshipsEquals(Land expected, Land actual) {}
}
