package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VerkeersbesluitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerkeersbesluitAllPropertiesEquals(Verkeersbesluit expected, Verkeersbesluit actual) {
        assertVerkeersbesluitAutoGeneratedPropertiesEquals(expected, actual);
        assertVerkeersbesluitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerkeersbesluitAllUpdatablePropertiesEquals(Verkeersbesluit expected, Verkeersbesluit actual) {
        assertVerkeersbesluitUpdatableFieldsEquals(expected, actual);
        assertVerkeersbesluitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerkeersbesluitAutoGeneratedPropertiesEquals(Verkeersbesluit expected, Verkeersbesluit actual) {
        assertThat(expected)
            .as("Verify Verkeersbesluit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerkeersbesluitUpdatableFieldsEquals(Verkeersbesluit expected, Verkeersbesluit actual) {
        assertThat(expected)
            .as("Verify Verkeersbesluit relevant properties")
            .satisfies(e -> assertThat(e.getDatumbesluit()).as("check datumbesluit").isEqualTo(actual.getDatumbesluit()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getHuisnummer()).as("check huisnummer").isEqualTo(actual.getHuisnummer()))
            .satisfies(e -> assertThat(e.getPostcode()).as("check postcode").isEqualTo(actual.getPostcode()))
            .satisfies(e -> assertThat(e.getReferentienummer()).as("check referentienummer").isEqualTo(actual.getReferentienummer()))
            .satisfies(e -> assertThat(e.getStraat()).as("check straat").isEqualTo(actual.getStraat()))
            .satisfies(e -> assertThat(e.getTitel()).as("check titel").isEqualTo(actual.getTitel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVerkeersbesluitUpdatableRelationshipsEquals(Verkeersbesluit expected, Verkeersbesluit actual) {
        assertThat(expected)
            .as("Verify Verkeersbesluit relationships")
            .satisfies(
                e ->
                    assertThat(e.getIsvastgelegdinDocument())
                        .as("check isvastgelegdinDocument")
                        .isEqualTo(actual.getIsvastgelegdinDocument())
            );
    }
}
