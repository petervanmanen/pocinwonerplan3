package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class StartformulieraanbestedenAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStartformulieraanbestedenAllPropertiesEquals(
        Startformulieraanbesteden expected,
        Startformulieraanbesteden actual
    ) {
        assertStartformulieraanbestedenAutoGeneratedPropertiesEquals(expected, actual);
        assertStartformulieraanbestedenAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStartformulieraanbestedenAllUpdatablePropertiesEquals(
        Startformulieraanbesteden expected,
        Startformulieraanbesteden actual
    ) {
        assertStartformulieraanbestedenUpdatableFieldsEquals(expected, actual);
        assertStartformulieraanbestedenUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStartformulieraanbestedenAutoGeneratedPropertiesEquals(
        Startformulieraanbesteden expected,
        Startformulieraanbesteden actual
    ) {
        assertThat(expected)
            .as("Verify Startformulieraanbesteden auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStartformulieraanbestedenUpdatableFieldsEquals(
        Startformulieraanbesteden expected,
        Startformulieraanbesteden actual
    ) {
        assertThat(expected)
            .as("Verify Startformulieraanbesteden relevant properties")
            .satisfies(e -> assertThat(e.getBeoogdelooptijd()).as("check beoogdelooptijd").isEqualTo(actual.getBeoogdelooptijd()))
            .satisfies(
                e ->
                    assertThat(e.getBeoogdetotaleopdrachtwaarde())
                        .as("check beoogdetotaleopdrachtwaarde")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBeoogdetotaleopdrachtwaarde())
            )
            .satisfies(
                e ->
                    assertThat(e.getIndicatieaanvullendeopdrachtleverancier())
                        .as("check indicatieaanvullendeopdrachtleverancier")
                        .isEqualTo(actual.getIndicatieaanvullendeopdrachtleverancier())
            )
            .satisfies(
                e ->
                    assertThat(e.getIndicatiebeoogdeaanbestedingonderhands())
                        .as("check indicatiebeoogdeaanbestedingonderhands")
                        .isEqualTo(actual.getIndicatiebeoogdeaanbestedingonderhands())
            )
            .satisfies(
                e ->
                    assertThat(e.getIndicatiebeoogdeprockomtovereen())
                        .as("check indicatiebeoogdeprockomtovereen")
                        .isEqualTo(actual.getIndicatiebeoogdeprockomtovereen())
            )
            .satisfies(
                e -> assertThat(e.getIndicatieeenmaligelos()).as("check indicatieeenmaligelos").isEqualTo(actual.getIndicatieeenmaligelos())
            )
            .satisfies(
                e ->
                    assertThat(e.getIndicatiemeerjarigeraamovereenkomst())
                        .as("check indicatiemeerjarigeraamovereenkomst")
                        .isEqualTo(actual.getIndicatiemeerjarigeraamovereenkomst())
            )
            .satisfies(
                e ->
                    assertThat(e.getIndicatiemeerjarigrepeterend())
                        .as("check indicatiemeerjarigrepeterend")
                        .isEqualTo(actual.getIndicatiemeerjarigrepeterend())
            )
            .satisfies(
                e ->
                    assertThat(e.getIndicatoroverkoepelendproject())
                        .as("check indicatoroverkoepelendproject")
                        .isEqualTo(actual.getIndicatoroverkoepelendproject())
            )
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getOpdrachtcategorie()).as("check opdrachtcategorie").isEqualTo(actual.getOpdrachtcategorie()))
            .satisfies(e -> assertThat(e.getOpdrachtsoort()).as("check opdrachtsoort").isEqualTo(actual.getOpdrachtsoort()))
            .satisfies(
                e ->
                    assertThat(e.getToelichtingaanvullendeopdracht())
                        .as("check toelichtingaanvullendeopdracht")
                        .isEqualTo(actual.getToelichtingaanvullendeopdracht())
            )
            .satisfies(
                e ->
                    assertThat(e.getToelichtingeenmaligofrepeterend())
                        .as("check toelichtingeenmaligofrepeterend")
                        .isEqualTo(actual.getToelichtingeenmaligofrepeterend())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStartformulieraanbestedenUpdatableRelationshipsEquals(
        Startformulieraanbesteden expected,
        Startformulieraanbesteden actual
    ) {}
}
