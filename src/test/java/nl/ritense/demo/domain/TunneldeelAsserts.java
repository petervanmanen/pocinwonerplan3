package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TunneldeelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunneldeelAllPropertiesEquals(Tunneldeel expected, Tunneldeel actual) {
        assertTunneldeelAutoGeneratedPropertiesEquals(expected, actual);
        assertTunneldeelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunneldeelAllUpdatablePropertiesEquals(Tunneldeel expected, Tunneldeel actual) {
        assertTunneldeelUpdatableFieldsEquals(expected, actual);
        assertTunneldeelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunneldeelAutoGeneratedPropertiesEquals(Tunneldeel expected, Tunneldeel actual) {
        assertThat(expected)
            .as("Verify Tunneldeel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunneldeelUpdatableFieldsEquals(Tunneldeel expected, Tunneldeel actual) {
        assertThat(expected)
            .as("Verify Tunneldeel relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getDatumbegingeldigheidtunneldeel())
                        .as("check datumbegingeldigheidtunneldeel")
                        .isEqualTo(actual.getDatumbegingeldigheidtunneldeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheidtunneldeel())
                        .as("check datumeindegeldigheidtunneldeel")
                        .isEqualTo(actual.getDatumeindegeldigheidtunneldeel())
            )
            .satisfies(
                e -> assertThat(e.getGeometrietunneldeel()).as("check geometrietunneldeel").isEqualTo(actual.getGeometrietunneldeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getIdentificatietunneldeel())
                        .as("check identificatietunneldeel")
                        .isEqualTo(actual.getIdentificatietunneldeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getLod0geometrietunneldeel())
                        .as("check lod0geometrietunneldeel")
                        .isEqualTo(actual.getLod0geometrietunneldeel())
            )
            .satisfies(
                e ->
                    assertThat(e.getRelatievehoogteliggingtunneldeel())
                        .as("check relatievehoogteliggingtunneldeel")
                        .isEqualTo(actual.getRelatievehoogteliggingtunneldeel())
            )
            .satisfies(e -> assertThat(e.getStatustunneldeel()).as("check statustunneldeel").isEqualTo(actual.getStatustunneldeel()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTunneldeelUpdatableRelationshipsEquals(Tunneldeel expected, Tunneldeel actual) {}
}
