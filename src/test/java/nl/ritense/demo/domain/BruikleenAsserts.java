package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BruikleenAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBruikleenAllPropertiesEquals(Bruikleen expected, Bruikleen actual) {
        assertBruikleenAutoGeneratedPropertiesEquals(expected, actual);
        assertBruikleenAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBruikleenAllUpdatablePropertiesEquals(Bruikleen expected, Bruikleen actual) {
        assertBruikleenUpdatableFieldsEquals(expected, actual);
        assertBruikleenUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBruikleenAutoGeneratedPropertiesEquals(Bruikleen expected, Bruikleen actual) {
        assertThat(expected)
            .as("Verify Bruikleen auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBruikleenUpdatableFieldsEquals(Bruikleen expected, Bruikleen actual) {
        assertThat(expected)
            .as("Verify Bruikleen relevant properties")
            .satisfies(e -> assertThat(e.getAanvraagdoor()).as("check aanvraagdoor").isEqualTo(actual.getAanvraagdoor()))
            .satisfies(e -> assertThat(e.getDatumaanvraag()).as("check datumaanvraag").isEqualTo(actual.getDatumaanvraag()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getToestemmingdoor()).as("check toestemmingdoor").isEqualTo(actual.getToestemmingdoor()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBruikleenUpdatableRelationshipsEquals(Bruikleen expected, Bruikleen actual) {
        assertThat(expected)
            .as("Verify Bruikleen relationships")
            .satisfies(
                e ->
                    assertThat(e.getIsbedoeldvoorTentoonstellings())
                        .as("check isbedoeldvoorTentoonstellings")
                        .isEqualTo(actual.getIsbedoeldvoorTentoonstellings())
            )
            .satisfies(e -> assertThat(e.getIsLeners()).as("check isLeners").isEqualTo(actual.getIsLeners()));
    }
}
