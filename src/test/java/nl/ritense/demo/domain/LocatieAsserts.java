package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LocatieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocatieAllPropertiesEquals(Locatie expected, Locatie actual) {
        assertLocatieAutoGeneratedPropertiesEquals(expected, actual);
        assertLocatieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocatieAllUpdatablePropertiesEquals(Locatie expected, Locatie actual) {
        assertLocatieUpdatableFieldsEquals(expected, actual);
        assertLocatieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocatieAutoGeneratedPropertiesEquals(Locatie expected, Locatie actual) {
        assertThat(expected)
            .as("Verify Locatie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocatieUpdatableFieldsEquals(Locatie expected, Locatie actual) {
        assertThat(expected)
            .as("Verify Locatie relevant properties")
            .satisfies(e -> assertThat(e.getAdres()).as("check adres").isEqualTo(actual.getAdres()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLocatieUpdatableRelationshipsEquals(Locatie expected, Locatie actual) {
        assertThat(expected)
            .as("Verify Locatie relationships")
            .satisfies(e -> assertThat(e.getHeeftlocatiePuts()).as("check heeftlocatiePuts").isEqualTo(actual.getHeeftlocatiePuts()))
            .satisfies(
                e ->
                    assertThat(e.getWordtbegrensddoorProjects())
                        .as("check wordtbegrensddoorProjects")
                        .isEqualTo(actual.getWordtbegrensddoorProjects())
            )
            .satisfies(e -> assertThat(e.getBetreftVerzoeks()).as("check betreftVerzoeks").isEqualTo(actual.getBetreftVerzoeks()))
            .satisfies(
                e ->
                    assertThat(e.getWerkingsgebiedRegelteksts())
                        .as("check werkingsgebiedRegelteksts")
                        .isEqualTo(actual.getWerkingsgebiedRegelteksts())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsverbondenmetActiviteits())
                        .as("check isverbondenmetActiviteits")
                        .isEqualTo(actual.getIsverbondenmetActiviteits())
            )
            .satisfies(
                e ->
                    assertThat(e.getVerwijstnaarGebiedsaanwijzings())
                        .as("check verwijstnaarGebiedsaanwijzings")
                        .isEqualTo(actual.getVerwijstnaarGebiedsaanwijzings())
            )
            .satisfies(
                e -> assertThat(e.getGeldtvoorNormwaardes()).as("check geldtvoorNormwaardes").isEqualTo(actual.getGeldtvoorNormwaardes())
            );
    }
}
