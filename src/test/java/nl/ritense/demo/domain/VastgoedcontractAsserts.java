package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class VastgoedcontractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedcontractAllPropertiesEquals(Vastgoedcontract expected, Vastgoedcontract actual) {
        assertVastgoedcontractAutoGeneratedPropertiesEquals(expected, actual);
        assertVastgoedcontractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedcontractAllUpdatablePropertiesEquals(Vastgoedcontract expected, Vastgoedcontract actual) {
        assertVastgoedcontractUpdatableFieldsEquals(expected, actual);
        assertVastgoedcontractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedcontractAutoGeneratedPropertiesEquals(Vastgoedcontract expected, Vastgoedcontract actual) {
        assertThat(expected)
            .as("Verify Vastgoedcontract auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedcontractUpdatableFieldsEquals(Vastgoedcontract expected, Vastgoedcontract actual) {
        assertThat(expected)
            .as("Verify Vastgoedcontract relevant properties")
            .satisfies(e -> assertThat(e.getBeschrijving()).as("check beschrijving").isEqualTo(actual.getBeschrijving()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(
                e ->
                    assertThat(e.getMaandbedrag())
                        .as("check maandbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getMaandbedrag())
            )
            .satisfies(e -> assertThat(e.getOpzegtermijn()).as("check opzegtermijn").isEqualTo(actual.getOpzegtermijn()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVastgoedcontractUpdatableRelationshipsEquals(Vastgoedcontract expected, Vastgoedcontract actual) {
        assertThat(expected)
            .as("Verify Vastgoedcontract relationships")
            .satisfies(e -> assertThat(e.getHeeftRechtspersoon()).as("check heeftRechtspersoon").isEqualTo(actual.getHeeftRechtspersoon()));
    }
}
