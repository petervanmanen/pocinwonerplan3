package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ZekerheidsrechtAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZekerheidsrechtAllPropertiesEquals(Zekerheidsrecht expected, Zekerheidsrecht actual) {
        assertZekerheidsrechtAutoGeneratedPropertiesEquals(expected, actual);
        assertZekerheidsrechtAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZekerheidsrechtAllUpdatablePropertiesEquals(Zekerheidsrecht expected, Zekerheidsrecht actual) {
        assertZekerheidsrechtUpdatableFieldsEquals(expected, actual);
        assertZekerheidsrechtUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZekerheidsrechtAutoGeneratedPropertiesEquals(Zekerheidsrecht expected, Zekerheidsrecht actual) {
        assertThat(expected)
            .as("Verify Zekerheidsrecht auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZekerheidsrechtUpdatableFieldsEquals(Zekerheidsrecht expected, Zekerheidsrecht actual) {
        assertThat(expected)
            .as("Verify Zekerheidsrecht relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getAandeelinbetrokkenrecht())
                        .as("check aandeelinbetrokkenrecht")
                        .isEqualTo(actual.getAandeelinbetrokkenrecht())
            )
            .satisfies(e -> assertThat(e.getDatumeinderecht()).as("check datumeinderecht").isEqualTo(actual.getDatumeinderecht()))
            .satisfies(e -> assertThat(e.getDatumingangrecht()).as("check datumingangrecht").isEqualTo(actual.getDatumingangrecht()))
            .satisfies(
                e ->
                    assertThat(e.getIdentificatiezekerheidsrecht())
                        .as("check identificatiezekerheidsrecht")
                        .isEqualTo(actual.getIdentificatiezekerheidsrecht())
            )
            .satisfies(
                e ->
                    assertThat(e.getOmschrijvingbetrokkenrecht())
                        .as("check omschrijvingbetrokkenrecht")
                        .isEqualTo(actual.getOmschrijvingbetrokkenrecht())
            )
            .satisfies(
                e -> assertThat(e.getTypezekerheidsrecht()).as("check typezekerheidsrecht").isEqualTo(actual.getTypezekerheidsrecht())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZekerheidsrechtUpdatableRelationshipsEquals(Zekerheidsrecht expected, Zekerheidsrecht actual) {
        assertThat(expected)
            .as("Verify Zekerheidsrecht relationships")
            .satisfies(
                e ->
                    assertThat(e.getBezwaartTenaamstelling())
                        .as("check bezwaartTenaamstelling")
                        .isEqualTo(actual.getBezwaartTenaamstelling())
            );
    }
}
