package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductsoortAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductsoortAllPropertiesEquals(Productsoort expected, Productsoort actual) {
        assertProductsoortAutoGeneratedPropertiesEquals(expected, actual);
        assertProductsoortAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductsoortAllUpdatablePropertiesEquals(Productsoort expected, Productsoort actual) {
        assertProductsoortUpdatableFieldsEquals(expected, actual);
        assertProductsoortUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductsoortAutoGeneratedPropertiesEquals(Productsoort expected, Productsoort actual) {
        assertThat(expected)
            .as("Verify Productsoort auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductsoortUpdatableFieldsEquals(Productsoort expected, Productsoort actual) {
        assertThat(expected)
            .as("Verify Productsoort relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getTarief()).as("check tarief").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getTarief()))
            .satisfies(e -> assertThat(e.getTariefperiode()).as("check tariefperiode").isEqualTo(actual.getTariefperiode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductsoortUpdatableRelationshipsEquals(Productsoort expected, Productsoort actual) {
        assertThat(expected)
            .as("Verify Productsoort relationships")
            .satisfies(
                e ->
                    assertThat(e.getValtbinnenProductgroep())
                        .as("check valtbinnenProductgroep")
                        .isEqualTo(actual.getValtbinnenProductgroep())
            );
    }
}
