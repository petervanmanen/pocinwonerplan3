package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BetrokkeneAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetrokkeneAllPropertiesEquals(Betrokkene expected, Betrokkene actual) {
        assertBetrokkeneAutoGeneratedPropertiesEquals(expected, actual);
        assertBetrokkeneAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetrokkeneAllUpdatablePropertiesEquals(Betrokkene expected, Betrokkene actual) {
        assertBetrokkeneUpdatableFieldsEquals(expected, actual);
        assertBetrokkeneUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetrokkeneAutoGeneratedPropertiesEquals(Betrokkene expected, Betrokkene actual) {
        assertThat(expected)
            .as("Verify Betrokkene auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetrokkeneUpdatableFieldsEquals(Betrokkene expected, Betrokkene actual) {
        assertThat(expected)
            .as("Verify Betrokkene relevant properties")
            .satisfies(e -> assertThat(e.getAdresbinnenland()).as("check adresbinnenland").isEqualTo(actual.getAdresbinnenland()))
            .satisfies(e -> assertThat(e.getAdresbuitenland()).as("check adresbuitenland").isEqualTo(actual.getAdresbuitenland()))
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getRol()).as("check rol").isEqualTo(actual.getRol()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBetrokkeneUpdatableRelationshipsEquals(Betrokkene expected, Betrokkene actual) {
        assertThat(expected)
            .as("Verify Betrokkene relationships")
            .satisfies(e -> assertThat(e.getIsMedewerker()).as("check isMedewerker").isEqualTo(actual.getIsMedewerker()))
            .satisfies(e -> assertThat(e.getOefentuitZaaks()).as("check oefentuitZaaks").isEqualTo(actual.getOefentuitZaaks()));
    }
}
