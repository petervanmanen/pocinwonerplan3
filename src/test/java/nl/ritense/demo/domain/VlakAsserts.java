package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VlakAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVlakAllPropertiesEquals(Vlak expected, Vlak actual) {
        assertVlakAutoGeneratedPropertiesEquals(expected, actual);
        assertVlakAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVlakAllUpdatablePropertiesEquals(Vlak expected, Vlak actual) {
        assertVlakUpdatableFieldsEquals(expected, actual);
        assertVlakUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVlakAutoGeneratedPropertiesEquals(Vlak expected, Vlak actual) {
        assertThat(expected)
            .as("Verify Vlak auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVlakUpdatableFieldsEquals(Vlak expected, Vlak actual) {
        assertThat(expected)
            .as("Verify Vlak relevant properties")
            .satisfies(e -> assertThat(e.getDieptetot()).as("check dieptetot").isEqualTo(actual.getDieptetot()))
            .satisfies(e -> assertThat(e.getDieptevan()).as("check dieptevan").isEqualTo(actual.getDieptevan()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e -> assertThat(e.getKeyput()).as("check keyput").isEqualTo(actual.getKeyput()))
            .satisfies(e -> assertThat(e.getProjectcd()).as("check projectcd").isEqualTo(actual.getProjectcd()))
            .satisfies(e -> assertThat(e.getPutnummer()).as("check putnummer").isEqualTo(actual.getPutnummer()))
            .satisfies(e -> assertThat(e.getVlaknummer()).as("check vlaknummer").isEqualTo(actual.getVlaknummer()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVlakUpdatableRelationshipsEquals(Vlak expected, Vlak actual) {
        assertThat(expected)
            .as("Verify Vlak relationships")
            .satisfies(e -> assertThat(e.getHeeftPut()).as("check heeftPut").isEqualTo(actual.getHeeftPut()));
    }
}
