package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EcomponentsoortAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEcomponentsoortAllPropertiesEquals(Ecomponentsoort expected, Ecomponentsoort actual) {
        assertEcomponentsoortAutoGeneratedPropertiesEquals(expected, actual);
        assertEcomponentsoortAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEcomponentsoortAllUpdatablePropertiesEquals(Ecomponentsoort expected, Ecomponentsoort actual) {
        assertEcomponentsoortUpdatableFieldsEquals(expected, actual);
        assertEcomponentsoortUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEcomponentsoortAutoGeneratedPropertiesEquals(Ecomponentsoort expected, Ecomponentsoort actual) {
        assertThat(expected)
            .as("Verify Ecomponentsoort auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEcomponentsoortUpdatableFieldsEquals(Ecomponentsoort expected, Ecomponentsoort actual) {
        assertThat(expected)
            .as("Verify Ecomponentsoort relevant properties")
            .satisfies(e -> assertThat(e.getEcomponent()).as("check ecomponent").isEqualTo(actual.getEcomponent()))
            .satisfies(e -> assertThat(e.getEcomponentcode()).as("check ecomponentcode").isEqualTo(actual.getEcomponentcode()))
            .satisfies(e -> assertThat(e.getKolom()).as("check kolom").isEqualTo(actual.getKolom()))
            .satisfies(e -> assertThat(e.getKolomcode()).as("check kolomcode").isEqualTo(actual.getKolomcode()))
            .satisfies(e -> assertThat(e.getRegeling()).as("check regeling").isEqualTo(actual.getRegeling()))
            .satisfies(e -> assertThat(e.getRegelingcode()).as("check regelingcode").isEqualTo(actual.getRegelingcode()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEcomponentsoortUpdatableRelationshipsEquals(Ecomponentsoort expected, Ecomponentsoort actual) {}
}
