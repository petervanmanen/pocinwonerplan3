package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MuseumobjectAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMuseumobjectAllPropertiesEquals(Museumobject expected, Museumobject actual) {
        assertMuseumobjectAutoGeneratedPropertiesEquals(expected, actual);
        assertMuseumobjectAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMuseumobjectAllUpdatablePropertiesEquals(Museumobject expected, Museumobject actual) {
        assertMuseumobjectUpdatableFieldsEquals(expected, actual);
        assertMuseumobjectUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMuseumobjectAutoGeneratedPropertiesEquals(Museumobject expected, Museumobject actual) {
        assertThat(expected)
            .as("Verify Museumobject auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMuseumobjectUpdatableFieldsEquals(Museumobject expected, Museumobject actual) {
        assertThat(expected)
            .as("Verify Museumobject relevant properties")
            .satisfies(e -> assertThat(e.getAfmeting()).as("check afmeting").isEqualTo(actual.getAfmeting()))
            .satisfies(e -> assertThat(e.getBezittot()).as("check bezittot").isEqualTo(actual.getBezittot()))
            .satisfies(e -> assertThat(e.getBezitvanaf()).as("check bezitvanaf").isEqualTo(actual.getBezitvanaf()))
            .satisfies(e -> assertThat(e.getMedium()).as("check medium").isEqualTo(actual.getMedium()))
            .satisfies(e -> assertThat(e.getVerkrijging()).as("check verkrijging").isEqualTo(actual.getVerkrijging()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMuseumobjectUpdatableRelationshipsEquals(Museumobject expected, Museumobject actual) {
        assertThat(expected)
            .as("Verify Museumobject relationships")
            .satisfies(e -> assertThat(e.getBetreftBruikleen()).as("check betreftBruikleen").isEqualTo(actual.getBetreftBruikleen()))
            .satisfies(e -> assertThat(e.getLocatieStandplaats()).as("check locatieStandplaats").isEqualTo(actual.getLocatieStandplaats()))
            .satisfies(
                e -> assertThat(e.getHeeftBelanghebbendes()).as("check heeftBelanghebbendes").isEqualTo(actual.getHeeftBelanghebbendes())
            )
            .satisfies(
                e ->
                    assertThat(e.getOnderdeelTentoonstellings())
                        .as("check onderdeelTentoonstellings")
                        .isEqualTo(actual.getOnderdeelTentoonstellings())
            )
            .satisfies(e -> assertThat(e.getBevatCollecties()).as("check bevatCollecties").isEqualTo(actual.getBevatCollecties()))
            .satisfies(e -> assertThat(e.getBetreftIncidents()).as("check betreftIncidents").isEqualTo(actual.getBetreftIncidents()));
    }
}
