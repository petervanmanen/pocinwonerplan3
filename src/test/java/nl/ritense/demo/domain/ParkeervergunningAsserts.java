package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ParkeervergunningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervergunningAllPropertiesEquals(Parkeervergunning expected, Parkeervergunning actual) {
        assertParkeervergunningAutoGeneratedPropertiesEquals(expected, actual);
        assertParkeervergunningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervergunningAllUpdatablePropertiesEquals(Parkeervergunning expected, Parkeervergunning actual) {
        assertParkeervergunningUpdatableFieldsEquals(expected, actual);
        assertParkeervergunningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervergunningAutoGeneratedPropertiesEquals(Parkeervergunning expected, Parkeervergunning actual) {
        assertThat(expected)
            .as("Verify Parkeervergunning auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervergunningUpdatableFieldsEquals(Parkeervergunning expected, Parkeervergunning actual) {
        assertThat(expected)
            .as("Verify Parkeervergunning relevant properties")
            .satisfies(
                e -> assertThat(e.getDatumeindegeldigheid()).as("check datumeindegeldigheid").isEqualTo(actual.getDatumeindegeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumreservering()).as("check datumreservering").isEqualTo(actual.getDatumreservering()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getKenteken()).as("check kenteken").isEqualTo(actual.getKenteken()))
            .satisfies(
                e -> assertThat(e.getMinutenafgeschreven()).as("check minutenafgeschreven").isEqualTo(actual.getMinutenafgeschreven())
            )
            .satisfies(e -> assertThat(e.getMinutengeldig()).as("check minutengeldig").isEqualTo(actual.getMinutengeldig()))
            .satisfies(e -> assertThat(e.getMinutenresterend()).as("check minutenresterend").isEqualTo(actual.getMinutenresterend()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertParkeervergunningUpdatableRelationshipsEquals(Parkeervergunning expected, Parkeervergunning actual) {
        assertThat(expected)
            .as("Verify Parkeervergunning relationships")
            .satisfies(
                e ->
                    assertThat(e.getResulteertParkeerrecht())
                        .as("check resulteertParkeerrecht")
                        .isEqualTo(actual.getResulteertParkeerrecht())
            )
            .satisfies(
                e -> assertThat(e.getHouderRechtspersoon()).as("check houderRechtspersoon").isEqualTo(actual.getHouderRechtspersoon())
            )
            .satisfies(e -> assertThat(e.getSoortProductgroep()).as("check soortProductgroep").isEqualTo(actual.getSoortProductgroep()))
            .satisfies(e -> assertThat(e.getSoortProductsoort()).as("check soortProductsoort").isEqualTo(actual.getSoortProductsoort()));
    }
}
