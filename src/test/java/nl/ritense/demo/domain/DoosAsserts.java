package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DoosAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoosAllPropertiesEquals(Doos expected, Doos actual) {
        assertDoosAutoGeneratedPropertiesEquals(expected, actual);
        assertDoosAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoosAllUpdatablePropertiesEquals(Doos expected, Doos actual) {
        assertDoosUpdatableFieldsEquals(expected, actual);
        assertDoosUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoosAutoGeneratedPropertiesEquals(Doos expected, Doos actual) {
        assertThat(expected)
            .as("Verify Doos auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoosUpdatableFieldsEquals(Doos expected, Doos actual) {
        assertThat(expected)
            .as("Verify Doos relevant properties")
            .satisfies(e -> assertThat(e.getDoosnummer()).as("check doosnummer").isEqualTo(actual.getDoosnummer()))
            .satisfies(e -> assertThat(e.getHerkomst()).as("check herkomst").isEqualTo(actual.getHerkomst()))
            .satisfies(e -> assertThat(e.getInhoud()).as("check inhoud").isEqualTo(actual.getInhoud()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e -> assertThat(e.getKeymagazijnlocatie()).as("check keymagazijnlocatie").isEqualTo(actual.getKeymagazijnlocatie()))
            .satisfies(e -> assertThat(e.getProjectcd()).as("check projectcd").isEqualTo(actual.getProjectcd()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDoosUpdatableRelationshipsEquals(Doos expected, Doos actual) {
        assertThat(expected)
            .as("Verify Doos relationships")
            .satisfies(
                e ->
                    assertThat(e.getStaatopMagazijnlocatie())
                        .as("check staatopMagazijnlocatie")
                        .isEqualTo(actual.getStaatopMagazijnlocatie())
            );
    }
}
