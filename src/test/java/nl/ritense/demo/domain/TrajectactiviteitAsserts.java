package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TrajectactiviteitAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajectactiviteitAllPropertiesEquals(Trajectactiviteit expected, Trajectactiviteit actual) {
        assertTrajectactiviteitAutoGeneratedPropertiesEquals(expected, actual);
        assertTrajectactiviteitAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajectactiviteitAllUpdatablePropertiesEquals(Trajectactiviteit expected, Trajectactiviteit actual) {
        assertTrajectactiviteitUpdatableFieldsEquals(expected, actual);
        assertTrajectactiviteitUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajectactiviteitAutoGeneratedPropertiesEquals(Trajectactiviteit expected, Trajectactiviteit actual) {
        assertThat(expected)
            .as("Verify Trajectactiviteit auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajectactiviteitUpdatableFieldsEquals(Trajectactiviteit expected, Trajectactiviteit actual) {
        assertThat(expected)
            .as("Verify Trajectactiviteit relevant properties")
            .satisfies(e -> assertThat(e.getContract()).as("check contract").isEqualTo(actual.getContract()))
            .satisfies(e -> assertThat(e.getCrediteur()).as("check crediteur").isEqualTo(actual.getCrediteur()))
            .satisfies(e -> assertThat(e.getDatumbegin()).as("check datumbegin").isEqualTo(actual.getDatumbegin()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstatus()).as("check datumstatus").isEqualTo(actual.getDatumstatus()))
            .satisfies(e -> assertThat(e.getKinderopvang()).as("check kinderopvang").isEqualTo(actual.getKinderopvang()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getSuccesvol()).as("check succesvol").isEqualTo(actual.getSuccesvol()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTrajectactiviteitUpdatableRelationshipsEquals(Trajectactiviteit expected, Trajectactiviteit actual) {}
}
