package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SpeeltoestelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeeltoestelAllPropertiesEquals(Speeltoestel expected, Speeltoestel actual) {
        assertSpeeltoestelAutoGeneratedPropertiesEquals(expected, actual);
        assertSpeeltoestelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeeltoestelAllUpdatablePropertiesEquals(Speeltoestel expected, Speeltoestel actual) {
        assertSpeeltoestelUpdatableFieldsEquals(expected, actual);
        assertSpeeltoestelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeeltoestelAutoGeneratedPropertiesEquals(Speeltoestel expected, Speeltoestel actual) {
        assertThat(expected)
            .as("Verify Speeltoestel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeeltoestelUpdatableFieldsEquals(Speeltoestel expected, Speeltoestel actual) {
        assertThat(expected)
            .as("Verify Speeltoestel relevant properties")
            .satisfies(e -> assertThat(e.getCatalogusprijs()).as("check catalogusprijs").isEqualTo(actual.getCatalogusprijs()))
            .satisfies(e -> assertThat(e.getCertificaat()).as("check certificaat").isEqualTo(actual.getCertificaat()))
            .satisfies(e -> assertThat(e.getCertificaatnummer()).as("check certificaatnummer").isEqualTo(actual.getCertificaatnummer()))
            .satisfies(
                e ->
                    assertThat(e.getCertificeringsinstantie())
                        .as("check certificeringsinstantie")
                        .isEqualTo(actual.getCertificeringsinstantie())
            )
            .satisfies(e -> assertThat(e.getControlefrequentie()).as("check controlefrequentie").isEqualTo(actual.getControlefrequentie()))
            .satisfies(e -> assertThat(e.getDatumcertificaat()).as("check datumcertificaat").isEqualTo(actual.getDatumcertificaat()))
            .satisfies(
                e ->
                    assertThat(e.getGemakkelijktoegankelijk())
                        .as("check gemakkelijktoegankelijk")
                        .isEqualTo(actual.getGemakkelijktoegankelijk())
            )
            .satisfies(e -> assertThat(e.getInspectievolgorde()).as("check inspectievolgorde").isEqualTo(actual.getInspectievolgorde()))
            .satisfies(e -> assertThat(e.getInstallatiekosten()).as("check installatiekosten").isEqualTo(actual.getInstallatiekosten()))
            .satisfies(e -> assertThat(e.getSpeelterrein()).as("check speelterrein").isEqualTo(actual.getSpeelterrein()))
            .satisfies(
                e ->
                    assertThat(e.getSpeeltoesteltoestelonderdeel())
                        .as("check speeltoesteltoestelonderdeel")
                        .isEqualTo(actual.getSpeeltoesteltoestelonderdeel())
            )
            .satisfies(
                e -> assertThat(e.getTechnischelevensduur()).as("check technischelevensduur").isEqualTo(actual.getTechnischelevensduur())
            )
            .satisfies(e -> assertThat(e.getToestelcode()).as("check toestelcode").isEqualTo(actual.getToestelcode()))
            .satisfies(e -> assertThat(e.getToestelgroep()).as("check toestelgroep").isEqualTo(actual.getToestelgroep()))
            .satisfies(e -> assertThat(e.getToestelnaam()).as("check toestelnaam").isEqualTo(actual.getToestelnaam()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getTypenummer()).as("check typenummer").isEqualTo(actual.getTypenummer()))
            .satisfies(e -> assertThat(e.getTypeplus()).as("check typeplus").isEqualTo(actual.getTypeplus()))
            .satisfies(e -> assertThat(e.getTypeplus2()).as("check typeplus2").isEqualTo(actual.getTypeplus2()))
            .satisfies(e -> assertThat(e.getValruimtehoogte()).as("check valruimtehoogte").isEqualTo(actual.getValruimtehoogte()))
            .satisfies(e -> assertThat(e.getValruimteomvang()).as("check valruimteomvang").isEqualTo(actual.getValruimteomvang()))
            .satisfies(e -> assertThat(e.getVrijevalhoogte()).as("check vrijevalhoogte").isEqualTo(actual.getVrijevalhoogte()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpeeltoestelUpdatableRelationshipsEquals(Speeltoestel expected, Speeltoestel actual) {}
}
