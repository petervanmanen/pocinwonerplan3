package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class GenotenopleidingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGenotenopleidingAllPropertiesEquals(Genotenopleiding expected, Genotenopleiding actual) {
        assertGenotenopleidingAutoGeneratedPropertiesEquals(expected, actual);
        assertGenotenopleidingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGenotenopleidingAllUpdatablePropertiesEquals(Genotenopleiding expected, Genotenopleiding actual) {
        assertGenotenopleidingUpdatableFieldsEquals(expected, actual);
        assertGenotenopleidingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGenotenopleidingAutoGeneratedPropertiesEquals(Genotenopleiding expected, Genotenopleiding actual) {
        assertThat(expected)
            .as("Verify Genotenopleiding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGenotenopleidingUpdatableFieldsEquals(Genotenopleiding expected, Genotenopleiding actual) {
        assertThat(expected)
            .as("Verify Genotenopleiding relevant properties")
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getDatumtoewijzing()).as("check datumtoewijzing").isEqualTo(actual.getDatumtoewijzing()))
            .satisfies(e -> assertThat(e.getPrijs()).as("check prijs").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrijs()))
            .satisfies(e -> assertThat(e.getVerrekenen()).as("check verrekenen").isEqualTo(actual.getVerrekenen()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGenotenopleidingUpdatableRelationshipsEquals(Genotenopleiding expected, Genotenopleiding actual) {}
}
