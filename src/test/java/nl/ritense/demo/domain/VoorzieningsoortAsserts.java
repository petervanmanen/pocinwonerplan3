package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VoorzieningsoortAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoorzieningsoortAllPropertiesEquals(Voorzieningsoort expected, Voorzieningsoort actual) {
        assertVoorzieningsoortAutoGeneratedPropertiesEquals(expected, actual);
        assertVoorzieningsoortAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoorzieningsoortAllUpdatablePropertiesEquals(Voorzieningsoort expected, Voorzieningsoort actual) {
        assertVoorzieningsoortUpdatableFieldsEquals(expected, actual);
        assertVoorzieningsoortUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoorzieningsoortAutoGeneratedPropertiesEquals(Voorzieningsoort expected, Voorzieningsoort actual) {
        assertThat(expected)
            .as("Verify Voorzieningsoort auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoorzieningsoortUpdatableFieldsEquals(Voorzieningsoort expected, Voorzieningsoort actual) {
        assertThat(expected)
            .as("Verify Voorzieningsoort relevant properties")
            .satisfies(e -> assertThat(e.getCode()).as("check code").isEqualTo(actual.getCode()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getProductcategorie()).as("check productcategorie").isEqualTo(actual.getProductcategorie()))
            .satisfies(
                e -> assertThat(e.getProductcategoriecode()).as("check productcategoriecode").isEqualTo(actual.getProductcategoriecode())
            )
            .satisfies(e -> assertThat(e.getProductcode()).as("check productcode").isEqualTo(actual.getProductcode()))
            .satisfies(e -> assertThat(e.getWet()).as("check wet").isEqualTo(actual.getWet()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVoorzieningsoortUpdatableRelationshipsEquals(Voorzieningsoort expected, Voorzieningsoort actual) {}
}
