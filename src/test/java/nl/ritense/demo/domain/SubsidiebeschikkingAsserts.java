package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class SubsidiebeschikkingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiebeschikkingAllPropertiesEquals(Subsidiebeschikking expected, Subsidiebeschikking actual) {
        assertSubsidiebeschikkingAutoGeneratedPropertiesEquals(expected, actual);
        assertSubsidiebeschikkingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiebeschikkingAllUpdatablePropertiesEquals(Subsidiebeschikking expected, Subsidiebeschikking actual) {
        assertSubsidiebeschikkingUpdatableFieldsEquals(expected, actual);
        assertSubsidiebeschikkingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiebeschikkingAutoGeneratedPropertiesEquals(Subsidiebeschikking expected, Subsidiebeschikking actual) {
        assertThat(expected)
            .as("Verify Subsidiebeschikking auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiebeschikkingUpdatableFieldsEquals(Subsidiebeschikking expected, Subsidiebeschikking actual) {
        assertThat(expected)
            .as("Verify Subsidiebeschikking relevant properties")
            .satisfies(e -> assertThat(e.getBeschikkingsnummer()).as("check beschikkingsnummer").isEqualTo(actual.getBeschikkingsnummer()))
            .satisfies(
                e ->
                    assertThat(e.getBeschiktbedrag())
                        .as("check beschiktbedrag")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getBeschiktbedrag())
            )
            .satisfies(e -> assertThat(e.getBesluit()).as("check besluit").isEqualTo(actual.getBesluit()))
            .satisfies(e -> assertThat(e.getInternkenmerk()).as("check internkenmerk").isEqualTo(actual.getInternkenmerk()))
            .satisfies(e -> assertThat(e.getKenmerk()).as("check kenmerk").isEqualTo(actual.getKenmerk()))
            .satisfies(e -> assertThat(e.getOntvangen()).as("check ontvangen").isEqualTo(actual.getOntvangen()))
            .satisfies(e -> assertThat(e.getOpmerkingen()).as("check opmerkingen").isEqualTo(actual.getOpmerkingen()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSubsidiebeschikkingUpdatableRelationshipsEquals(Subsidiebeschikking expected, Subsidiebeschikking actual) {
        assertThat(expected)
            .as("Verify Subsidiebeschikking relationships")
            .satisfies(e -> assertThat(e.getBetreftSubsidie()).as("check betreftSubsidie").isEqualTo(actual.getBetreftSubsidie()));
    }
}
