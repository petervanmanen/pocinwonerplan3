package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ReisdocumentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReisdocumentAllPropertiesEquals(Reisdocument expected, Reisdocument actual) {
        assertReisdocumentAutoGeneratedPropertiesEquals(expected, actual);
        assertReisdocumentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReisdocumentAllUpdatablePropertiesEquals(Reisdocument expected, Reisdocument actual) {
        assertReisdocumentUpdatableFieldsEquals(expected, actual);
        assertReisdocumentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReisdocumentAutoGeneratedPropertiesEquals(Reisdocument expected, Reisdocument actual) {
        assertThat(expected)
            .as("Verify Reisdocument auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReisdocumentUpdatableFieldsEquals(Reisdocument expected, Reisdocument actual) {
        assertThat(expected)
            .as("Verify Reisdocument relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getAanduidinginhoudingvermissing())
                        .as("check aanduidinginhoudingvermissing")
                        .isEqualTo(actual.getAanduidinginhoudingvermissing())
            )
            .satisfies(
                e -> assertThat(e.getAutoriteitvanafgifte()).as("check autoriteitvanafgifte").isEqualTo(actual.getAutoriteitvanafgifte())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatumeindegeldigheiddocument())
                        .as("check datumeindegeldigheiddocument")
                        .isEqualTo(actual.getDatumeindegeldigheiddocument())
            )
            .satisfies(
                e -> assertThat(e.getDatumingangdocument()).as("check datumingangdocument").isEqualTo(actual.getDatumingangdocument())
            )
            .satisfies(
                e ->
                    assertThat(e.getDatuminhoudingofvermissing())
                        .as("check datuminhoudingofvermissing")
                        .isEqualTo(actual.getDatuminhoudingofvermissing())
            )
            .satisfies(e -> assertThat(e.getDatumuitgifte()).as("check datumuitgifte").isEqualTo(actual.getDatumuitgifte()))
            .satisfies(e -> assertThat(e.getReisdocumentnummer()).as("check reisdocumentnummer").isEqualTo(actual.getReisdocumentnummer()))
            .satisfies(e -> assertThat(e.getSoort()).as("check soort").isEqualTo(actual.getSoort()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertReisdocumentUpdatableRelationshipsEquals(Reisdocument expected, Reisdocument actual) {}
}
