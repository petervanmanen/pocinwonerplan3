package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class HistorischpersoonAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorischpersoonAllPropertiesEquals(Historischpersoon expected, Historischpersoon actual) {
        assertHistorischpersoonAutoGeneratedPropertiesEquals(expected, actual);
        assertHistorischpersoonAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorischpersoonAllUpdatablePropertiesEquals(Historischpersoon expected, Historischpersoon actual) {
        assertHistorischpersoonUpdatableFieldsEquals(expected, actual);
        assertHistorischpersoonUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorischpersoonAutoGeneratedPropertiesEquals(Historischpersoon expected, Historischpersoon actual) {
        assertThat(expected)
            .as("Verify Historischpersoon auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorischpersoonUpdatableFieldsEquals(Historischpersoon expected, Historischpersoon actual) {
        assertThat(expected)
            .as("Verify Historischpersoon relevant properties")
            .satisfies(e -> assertThat(e.getBeroep()).as("check beroep").isEqualTo(actual.getBeroep()))
            .satisfies(e -> assertThat(e.getDatumgeboorte()).as("check datumgeboorte").isEqualTo(actual.getDatumgeboorte()))
            .satisfies(e -> assertThat(e.getDatumoverlijden()).as("check datumoverlijden").isEqualTo(actual.getDatumoverlijden()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e -> assertThat(e.getPubliektoegankelijk()).as("check publiektoegankelijk").isEqualTo(actual.getPubliektoegankelijk())
            )
            .satisfies(e -> assertThat(e.getWoondeop()).as("check woondeop").isEqualTo(actual.getWoondeop()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertHistorischpersoonUpdatableRelationshipsEquals(Historischpersoon expected, Historischpersoon actual) {}
}
