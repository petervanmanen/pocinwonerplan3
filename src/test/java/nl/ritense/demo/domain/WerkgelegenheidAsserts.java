package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class WerkgelegenheidAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkgelegenheidAllPropertiesEquals(Werkgelegenheid expected, Werkgelegenheid actual) {
        assertWerkgelegenheidAutoGeneratedPropertiesEquals(expected, actual);
        assertWerkgelegenheidAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkgelegenheidAllUpdatablePropertiesEquals(Werkgelegenheid expected, Werkgelegenheid actual) {
        assertWerkgelegenheidUpdatableFieldsEquals(expected, actual);
        assertWerkgelegenheidUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkgelegenheidAutoGeneratedPropertiesEquals(Werkgelegenheid expected, Werkgelegenheid actual) {
        assertThat(expected)
            .as("Verify Werkgelegenheid auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkgelegenheidUpdatableFieldsEquals(Werkgelegenheid expected, Werkgelegenheid actual) {
        assertThat(expected)
            .as("Verify Werkgelegenheid relevant properties")
            .satisfies(
                e -> assertThat(e.getAantalfulltimemannen()).as("check aantalfulltimemannen").isEqualTo(actual.getAantalfulltimemannen())
            )
            .satisfies(
                e -> assertThat(e.getAantalfulltimevrouwen()).as("check aantalfulltimevrouwen").isEqualTo(actual.getAantalfulltimevrouwen())
            )
            .satisfies(
                e -> assertThat(e.getAantalparttimemannen()).as("check aantalparttimemannen").isEqualTo(actual.getAantalparttimemannen())
            )
            .satisfies(
                e -> assertThat(e.getAantalparttimevrouwen()).as("check aantalparttimevrouwen").isEqualTo(actual.getAantalparttimevrouwen())
            )
            .satisfies(e -> assertThat(e.getGrootteklasse()).as("check grootteklasse").isEqualTo(actual.getGrootteklasse()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertWerkgelegenheidUpdatableRelationshipsEquals(Werkgelegenheid expected, Werkgelegenheid actual) {}
}
