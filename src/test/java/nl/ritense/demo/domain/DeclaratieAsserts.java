package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class DeclaratieAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieAllPropertiesEquals(Declaratie expected, Declaratie actual) {
        assertDeclaratieAutoGeneratedPropertiesEquals(expected, actual);
        assertDeclaratieAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieAllUpdatablePropertiesEquals(Declaratie expected, Declaratie actual) {
        assertDeclaratieUpdatableFieldsEquals(expected, actual);
        assertDeclaratieUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieAutoGeneratedPropertiesEquals(Declaratie expected, Declaratie actual) {
        assertThat(expected)
            .as("Verify Declaratie auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieUpdatableFieldsEquals(Declaratie expected, Declaratie actual) {
        assertThat(expected)
            .as("Verify Declaratie relevant properties")
            .satisfies(e -> assertThat(e.getDatumdeclaratie()).as("check datumdeclaratie").isEqualTo(actual.getDatumdeclaratie()))
            .satisfies(e -> assertThat(e.getDeclaratiebedrag()).as("check declaratiebedrag").isEqualTo(actual.getDeclaratiebedrag()))
            .satisfies(e -> assertThat(e.getDeclaratiestatus()).as("check declaratiestatus").isEqualTo(actual.getDeclaratiestatus()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeclaratieUpdatableRelationshipsEquals(Declaratie expected, Declaratie actual) {
        assertThat(expected)
            .as("Verify Declaratie relationships")
            .satisfies(
                e ->
                    assertThat(e.getIngedienddoorLeverancier())
                        .as("check ingedienddoorLeverancier")
                        .isEqualTo(actual.getIngedienddoorLeverancier())
            )
            .satisfies(
                e ->
                    assertThat(e.getSoortdeclaratieDeclaratiesoort())
                        .as("check soortdeclaratieDeclaratiesoort")
                        .isEqualTo(actual.getSoortdeclaratieDeclaratiesoort())
            )
            .satisfies(e -> assertThat(e.getDientinWerknemer()).as("check dientinWerknemer").isEqualTo(actual.getDientinWerknemer()));
    }
}
