package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BriefadresAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBriefadresAllPropertiesEquals(Briefadres expected, Briefadres actual) {
        assertBriefadresAutoGeneratedPropertiesEquals(expected, actual);
        assertBriefadresAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBriefadresAllUpdatablePropertiesEquals(Briefadres expected, Briefadres actual) {
        assertBriefadresUpdatableFieldsEquals(expected, actual);
        assertBriefadresUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBriefadresAutoGeneratedPropertiesEquals(Briefadres expected, Briefadres actual) {
        assertThat(expected)
            .as("Verify Briefadres auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBriefadresUpdatableFieldsEquals(Briefadres expected, Briefadres actual) {
        assertThat(expected)
            .as("Verify Briefadres relevant properties")
            .satisfies(e -> assertThat(e.getAdresfunctie()).as("check adresfunctie").isEqualTo(actual.getAdresfunctie()))
            .satisfies(e -> assertThat(e.getDatumaanvang()).as("check datumaanvang").isEqualTo(actual.getDatumaanvang()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(
                e -> assertThat(e.getOmschrijvingaangifte()).as("check omschrijvingaangifte").isEqualTo(actual.getOmschrijvingaangifte())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBriefadresUpdatableRelationshipsEquals(Briefadres expected, Briefadres actual) {
        assertThat(expected)
            .as("Verify Briefadres relationships")
            .satisfies(
                e -> assertThat(e.getEmptyNummeraanduiding()).as("check emptyNummeraanduiding").isEqualTo(actual.getEmptyNummeraanduiding())
            );
    }
}
