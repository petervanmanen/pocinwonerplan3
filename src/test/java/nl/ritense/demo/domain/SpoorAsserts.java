package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SpoorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpoorAllPropertiesEquals(Spoor expected, Spoor actual) {
        assertSpoorAutoGeneratedPropertiesEquals(expected, actual);
        assertSpoorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpoorAllUpdatablePropertiesEquals(Spoor expected, Spoor actual) {
        assertSpoorUpdatableFieldsEquals(expected, actual);
        assertSpoorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpoorAutoGeneratedPropertiesEquals(Spoor expected, Spoor actual) {
        assertThat(expected)
            .as("Verify Spoor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpoorUpdatableFieldsEquals(Spoor expected, Spoor actual) {
        assertThat(expected)
            .as("Verify Spoor relevant properties")
            .satisfies(e -> assertThat(e.getAard()).as("check aard").isEqualTo(actual.getAard()))
            .satisfies(e -> assertThat(e.getBeschrijving()).as("check beschrijving").isEqualTo(actual.getBeschrijving()))
            .satisfies(e -> assertThat(e.getDatering()).as("check datering").isEqualTo(actual.getDatering()))
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getHoogteboven()).as("check hoogteboven").isEqualTo(actual.getHoogteboven()))
            .satisfies(e -> assertThat(e.getHoogteonder()).as("check hoogteonder").isEqualTo(actual.getHoogteonder()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e -> assertThat(e.getKeyvlak()).as("check keyvlak").isEqualTo(actual.getKeyvlak()))
            .satisfies(e -> assertThat(e.getProjectcd()).as("check projectcd").isEqualTo(actual.getProjectcd()))
            .satisfies(e -> assertThat(e.getPutnummer()).as("check putnummer").isEqualTo(actual.getPutnummer()))
            .satisfies(e -> assertThat(e.getSpoornummer()).as("check spoornummer").isEqualTo(actual.getSpoornummer()))
            .satisfies(e -> assertThat(e.getVlaknummer()).as("check vlaknummer").isEqualTo(actual.getVlaknummer()))
            .satisfies(e -> assertThat(e.getVorm()).as("check vorm").isEqualTo(actual.getVorm()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSpoorUpdatableRelationshipsEquals(Spoor expected, Spoor actual) {
        assertThat(expected)
            .as("Verify Spoor relationships")
            .satisfies(e -> assertThat(e.getHeeftVlak()).as("check heeftVlak").isEqualTo(actual.getHeeftVlak()));
    }
}
