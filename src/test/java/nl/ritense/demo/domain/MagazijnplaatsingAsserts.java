package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MagazijnplaatsingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMagazijnplaatsingAllPropertiesEquals(Magazijnplaatsing expected, Magazijnplaatsing actual) {
        assertMagazijnplaatsingAutoGeneratedPropertiesEquals(expected, actual);
        assertMagazijnplaatsingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMagazijnplaatsingAllUpdatablePropertiesEquals(Magazijnplaatsing expected, Magazijnplaatsing actual) {
        assertMagazijnplaatsingUpdatableFieldsEquals(expected, actual);
        assertMagazijnplaatsingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMagazijnplaatsingAutoGeneratedPropertiesEquals(Magazijnplaatsing expected, Magazijnplaatsing actual) {
        assertThat(expected)
            .as("Verify Magazijnplaatsing auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMagazijnplaatsingUpdatableFieldsEquals(Magazijnplaatsing expected, Magazijnplaatsing actual) {
        assertThat(expected)
            .as("Verify Magazijnplaatsing relevant properties")
            .satisfies(e -> assertThat(e.getBeschrijving()).as("check beschrijving").isEqualTo(actual.getBeschrijving()))
            .satisfies(e -> assertThat(e.getDatumgeplaatst()).as("check datumgeplaatst").isEqualTo(actual.getDatumgeplaatst()))
            .satisfies(e -> assertThat(e.getHerkomst()).as("check herkomst").isEqualTo(actual.getHerkomst()))
            .satisfies(e -> assertThat(e.getKey()).as("check key").isEqualTo(actual.getKey()))
            .satisfies(e -> assertThat(e.getKeydoos()).as("check keydoos").isEqualTo(actual.getKeydoos()))
            .satisfies(e -> assertThat(e.getKeymagazijnlocatie()).as("check keymagazijnlocatie").isEqualTo(actual.getKeymagazijnlocatie()))
            .satisfies(e -> assertThat(e.getProjectcd()).as("check projectcd").isEqualTo(actual.getProjectcd()))
            .satisfies(e -> assertThat(e.getUitgeleend()).as("check uitgeleend").isEqualTo(actual.getUitgeleend()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMagazijnplaatsingUpdatableRelationshipsEquals(Magazijnplaatsing expected, Magazijnplaatsing actual) {}
}
