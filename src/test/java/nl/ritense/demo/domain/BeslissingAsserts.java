package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BeslissingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeslissingAllPropertiesEquals(Beslissing expected, Beslissing actual) {
        assertBeslissingAutoGeneratedPropertiesEquals(expected, actual);
        assertBeslissingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeslissingAllUpdatablePropertiesEquals(Beslissing expected, Beslissing actual) {
        assertBeslissingUpdatableFieldsEquals(expected, actual);
        assertBeslissingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeslissingAutoGeneratedPropertiesEquals(Beslissing expected, Beslissing actual) {
        assertThat(expected)
            .as("Verify Beslissing auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeslissingUpdatableFieldsEquals(Beslissing expected, Beslissing actual) {
        assertThat(expected)
            .as("Verify Beslissing relevant properties")
            .satisfies(e -> assertThat(e.getDatum()).as("check datum").isEqualTo(actual.getDatum()))
            .satisfies(e -> assertThat(e.getOpmerkingen()).as("check opmerkingen").isEqualTo(actual.getOpmerkingen()))
            .satisfies(e -> assertThat(e.getReden()).as("check reden").isEqualTo(actual.getReden()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBeslissingUpdatableRelationshipsEquals(Beslissing expected, Beslissing actual) {
        assertThat(expected)
            .as("Verify Beslissing relationships")
            .satisfies(e -> assertThat(e.getBetreftLeerling()).as("check betreftLeerling").isEqualTo(actual.getBetreftLeerling()))
            .satisfies(
                e ->
                    assertThat(e.getBehandelaarLeerplichtambtenaar())
                        .as("check behandelaarLeerplichtambtenaar")
                        .isEqualTo(actual.getBehandelaarLeerplichtambtenaar())
            )
            .satisfies(e -> assertThat(e.getBetreftSchool()).as("check betreftSchool").isEqualTo(actual.getBetreftSchool()));
    }
}
