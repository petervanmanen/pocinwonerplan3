package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SensorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorAllPropertiesEquals(Sensor expected, Sensor actual) {
        assertSensorAutoGeneratedPropertiesEquals(expected, actual);
        assertSensorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorAllUpdatablePropertiesEquals(Sensor expected, Sensor actual) {
        assertSensorUpdatableFieldsEquals(expected, actual);
        assertSensorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorAutoGeneratedPropertiesEquals(Sensor expected, Sensor actual) {
        assertThat(expected)
            .as("Verify Sensor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorUpdatableFieldsEquals(Sensor expected, Sensor actual) {
        assertThat(expected)
            .as("Verify Sensor relevant properties")
            .satisfies(e -> assertThat(e.getAanleghoogte()).as("check aanleghoogte").isEqualTo(actual.getAanleghoogte()))
            .satisfies(e -> assertThat(e.getElektrakast()).as("check elektrakast").isEqualTo(actual.getElektrakast()))
            .satisfies(e -> assertThat(e.getFrequentieomvormer()).as("check frequentieomvormer").isEqualTo(actual.getFrequentieomvormer()))
            .satisfies(e -> assertThat(e.getHoogte()).as("check hoogte").isEqualTo(actual.getHoogte()))
            .satisfies(
                e ->
                    assertThat(e.getJaaronderhouduitgevoerd())
                        .as("check jaaronderhouduitgevoerd")
                        .isEqualTo(actual.getJaaronderhouduitgevoerd())
            )
            .satisfies(e -> assertThat(e.getLeverancier()).as("check leverancier").isEqualTo(actual.getLeverancier()))
            .satisfies(e -> assertThat(e.getMeetpunt()).as("check meetpunt").isEqualTo(actual.getMeetpunt()))
            .satisfies(e -> assertThat(e.getPlc()).as("check plc").isEqualTo(actual.getPlc()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSensorUpdatableRelationshipsEquals(Sensor expected, Sensor actual) {}
}
