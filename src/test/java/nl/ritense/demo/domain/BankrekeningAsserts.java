package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BankrekeningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankrekeningAllPropertiesEquals(Bankrekening expected, Bankrekening actual) {
        assertBankrekeningAutoGeneratedPropertiesEquals(expected, actual);
        assertBankrekeningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankrekeningAllUpdatablePropertiesEquals(Bankrekening expected, Bankrekening actual) {
        assertBankrekeningUpdatableFieldsEquals(expected, actual);
        assertBankrekeningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankrekeningAutoGeneratedPropertiesEquals(Bankrekening expected, Bankrekening actual) {
        assertThat(expected)
            .as("Verify Bankrekening auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankrekeningUpdatableFieldsEquals(Bankrekening expected, Bankrekening actual) {
        assertThat(expected)
            .as("Verify Bankrekening relevant properties")
            .satisfies(e -> assertThat(e.getBank()).as("check bank").isEqualTo(actual.getBank()))
            .satisfies(e -> assertThat(e.getNummer()).as("check nummer").isEqualTo(actual.getNummer()))
            .satisfies(e -> assertThat(e.getTennaamstelling()).as("check tennaamstelling").isEqualTo(actual.getTennaamstelling()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBankrekeningUpdatableRelationshipsEquals(Bankrekening expected, Bankrekening actual) {}
}
