package nl.ritense.demo.domain;

import static nl.ritense.demo.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllPropertiesEquals(Product expected, Product actual) {
        assertProductAutoGeneratedPropertiesEquals(expected, actual);
        assertProductAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAllUpdatablePropertiesEquals(Product expected, Product actual) {
        assertProductUpdatableFieldsEquals(expected, actual);
        assertProductUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductAutoGeneratedPropertiesEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableFieldsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relevant properties")
            .satisfies(
                e -> assertThat(e.getCodemuseumjaarkaart()).as("check codemuseumjaarkaart").isEqualTo(actual.getCodemuseumjaarkaart())
            )
            .satisfies(
                e -> assertThat(e.getDatumeindegeldigheid()).as("check datumeindegeldigheid").isEqualTo(actual.getDatumeindegeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(e -> assertThat(e.getEntreekaart()).as("check entreekaart").isEqualTo(actual.getEntreekaart()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getPrijs()).as("check prijs").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getPrijs()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductUpdatableRelationshipsEquals(Product expected, Product actual) {
        assertThat(expected)
            .as("Verify Product relationships")
            .satisfies(
                e ->
                    assertThat(e.getLeverancierLeverancier())
                        .as("check leverancierLeverancier")
                        .isEqualTo(actual.getLeverancierLeverancier())
            )
            .satisfies(e -> assertThat(e.getHeeftKostenplaats()).as("check heeftKostenplaats").isEqualTo(actual.getHeeftKostenplaats()))
            .satisfies(
                e -> assertThat(e.getValtbinnenOmzetgroeps()).as("check valtbinnenOmzetgroeps").isEqualTo(actual.getValtbinnenOmzetgroeps())
            )
            .satisfies(
                e ->
                    assertThat(e.getValtbinnenProductgroeps())
                        .as("check valtbinnenProductgroeps")
                        .isEqualTo(actual.getValtbinnenProductgroeps())
            )
            .satisfies(e -> assertThat(e.getHeeftDoelstelling()).as("check heeftDoelstelling").isEqualTo(actual.getHeeftDoelstelling()))
            .satisfies(
                e ->
                    assertThat(e.getIsopdrachtgeverOpdrachtgever())
                        .as("check isopdrachtgeverOpdrachtgever")
                        .isEqualTo(actual.getIsopdrachtgeverOpdrachtgever())
            )
            .satisfies(
                e ->
                    assertThat(e.getIsopdrachtnemerOpdrachtnemer())
                        .as("check isopdrachtnemerOpdrachtnemer")
                        .isEqualTo(actual.getIsopdrachtnemerOpdrachtnemer())
            );
    }
}
