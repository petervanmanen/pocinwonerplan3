package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class KostenplaatsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenplaatsAllPropertiesEquals(Kostenplaats expected, Kostenplaats actual) {
        assertKostenplaatsAutoGeneratedPropertiesEquals(expected, actual);
        assertKostenplaatsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenplaatsAllUpdatablePropertiesEquals(Kostenplaats expected, Kostenplaats actual) {
        assertKostenplaatsUpdatableFieldsEquals(expected, actual);
        assertKostenplaatsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenplaatsAutoGeneratedPropertiesEquals(Kostenplaats expected, Kostenplaats actual) {
        assertThat(expected)
            .as("Verify Kostenplaats auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenplaatsUpdatableFieldsEquals(Kostenplaats expected, Kostenplaats actual) {
        assertThat(expected)
            .as("Verify Kostenplaats relevant properties")
            .satisfies(e -> assertThat(e.getBtwcode()).as("check btwcode").isEqualTo(actual.getBtwcode()))
            .satisfies(e -> assertThat(e.getBtwomschrijving()).as("check btwomschrijving").isEqualTo(actual.getBtwomschrijving()))
            .satisfies(
                e -> assertThat(e.getKostenplaatssoortcode()).as("check kostenplaatssoortcode").isEqualTo(actual.getKostenplaatssoortcode())
            )
            .satisfies(
                e ->
                    assertThat(e.getKostenplaatssoortomschrijving())
                        .as("check kostenplaatssoortomschrijving")
                        .isEqualTo(actual.getKostenplaatssoortomschrijving())
            )
            .satisfies(
                e -> assertThat(e.getKostenplaatstypecode()).as("check kostenplaatstypecode").isEqualTo(actual.getKostenplaatstypecode())
            )
            .satisfies(
                e ->
                    assertThat(e.getKostenplaatstypeomschrijving())
                        .as("check kostenplaatstypeomschrijving")
                        .isEqualTo(actual.getKostenplaatstypeomschrijving())
            )
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertKostenplaatsUpdatableRelationshipsEquals(Kostenplaats expected, Kostenplaats actual) {
        assertThat(expected)
            .as("Verify Kostenplaats relationships")
            .satisfies(e -> assertThat(e.getHeeftInkooporders()).as("check heeftInkooporders").isEqualTo(actual.getHeeftInkooporders()))
            .satisfies(e -> assertThat(e.getHeeftTaakvelds()).as("check heeftTaakvelds").isEqualTo(actual.getHeeftTaakvelds()))
            .satisfies(
                e -> assertThat(e.getHeeftHoofdrekenings()).as("check heeftHoofdrekenings").isEqualTo(actual.getHeeftHoofdrekenings())
            )
            .satisfies(e -> assertThat(e.getHeeftProjects()).as("check heeftProjects").isEqualTo(actual.getHeeftProjects()));
    }
}
