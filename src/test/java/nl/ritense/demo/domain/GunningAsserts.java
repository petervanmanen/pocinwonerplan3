package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class GunningAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGunningAllPropertiesEquals(Gunning expected, Gunning actual) {
        assertGunningAutoGeneratedPropertiesEquals(expected, actual);
        assertGunningAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGunningAllUpdatablePropertiesEquals(Gunning expected, Gunning actual) {
        assertGunningUpdatableFieldsEquals(expected, actual);
        assertGunningUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGunningAutoGeneratedPropertiesEquals(Gunning expected, Gunning actual) {
        assertThat(expected)
            .as("Verify Gunning auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGunningUpdatableFieldsEquals(Gunning expected, Gunning actual) {
        assertThat(expected)
            .as("Verify Gunning relevant properties")
            .satisfies(e -> assertThat(e.getBericht()).as("check bericht").isEqualTo(actual.getBericht()))
            .satisfies(e -> assertThat(e.getDatumgunning()).as("check datumgunning").isEqualTo(actual.getDatumgunning()))
            .satisfies(e -> assertThat(e.getDatumpublicatie()).as("check datumpublicatie").isEqualTo(actual.getDatumpublicatie()))
            .satisfies(
                e ->
                    assertThat(e.getDatumvoorlopigegunning())
                        .as("check datumvoorlopigegunning")
                        .isEqualTo(actual.getDatumvoorlopigegunning())
            )
            .satisfies(e -> assertThat(e.getGegundeprijs()).as("check gegundeprijs").isEqualTo(actual.getGegundeprijs()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertGunningUpdatableRelationshipsEquals(Gunning expected, Gunning actual) {
        assertThat(expected)
            .as("Verify Gunning relationships")
            .satisfies(
                e -> assertThat(e.getBetreftInschrijving()).as("check betreftInschrijving").isEqualTo(actual.getBetreftInschrijving())
            )
            .satisfies(e -> assertThat(e.getBetreftKandidaat()).as("check betreftKandidaat").isEqualTo(actual.getBetreftKandidaat()))
            .satisfies(e -> assertThat(e.getBetreftOfferte()).as("check betreftOfferte").isEqualTo(actual.getBetreftOfferte()))
            .satisfies(e -> assertThat(e.getInhuurMedewerker()).as("check inhuurMedewerker").isEqualTo(actual.getInhuurMedewerker()));
    }
}
