package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class LegesgrondslagAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLegesgrondslagAllPropertiesEquals(Legesgrondslag expected, Legesgrondslag actual) {
        assertLegesgrondslagAutoGeneratedPropertiesEquals(expected, actual);
        assertLegesgrondslagAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLegesgrondslagAllUpdatablePropertiesEquals(Legesgrondslag expected, Legesgrondslag actual) {
        assertLegesgrondslagUpdatableFieldsEquals(expected, actual);
        assertLegesgrondslagUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLegesgrondslagAutoGeneratedPropertiesEquals(Legesgrondslag expected, Legesgrondslag actual) {
        assertThat(expected)
            .as("Verify Legesgrondslag auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLegesgrondslagUpdatableFieldsEquals(Legesgrondslag expected, Legesgrondslag actual) {
        assertThat(expected)
            .as("Verify Legesgrondslag relevant properties")
            .satisfies(e -> assertThat(e.getAangemaaktdoor()).as("check aangemaaktdoor").isEqualTo(actual.getAangemaaktdoor()))
            .satisfies(e -> assertThat(e.getAantalopgegeven()).as("check aantalopgegeven").isEqualTo(actual.getAantalopgegeven()))
            .satisfies(e -> assertThat(e.getAantalvastgesteld()).as("check aantalvastgesteld").isEqualTo(actual.getAantalvastgesteld()))
            .satisfies(e -> assertThat(e.getAutomatisch()).as("check automatisch").isEqualTo(actual.getAutomatisch()))
            .satisfies(e -> assertThat(e.getDatumaanmaak()).as("check datumaanmaak").isEqualTo(actual.getDatumaanmaak()))
            .satisfies(e -> assertThat(e.getDatummutatie()).as("check datummutatie").isEqualTo(actual.getDatummutatie()))
            .satisfies(e -> assertThat(e.getEenheid()).as("check eenheid").isEqualTo(actual.getEenheid()))
            .satisfies(e -> assertThat(e.getGemuteerddoor()).as("check gemuteerddoor").isEqualTo(actual.getGemuteerddoor()))
            .satisfies(e -> assertThat(e.getLegesgrondslag()).as("check legesgrondslag").isEqualTo(actual.getLegesgrondslag()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertLegesgrondslagUpdatableRelationshipsEquals(Legesgrondslag expected, Legesgrondslag actual) {}
}
