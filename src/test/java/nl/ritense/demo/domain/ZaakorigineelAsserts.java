package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ZaakorigineelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakorigineelAllPropertiesEquals(Zaakorigineel expected, Zaakorigineel actual) {
        assertZaakorigineelAutoGeneratedPropertiesEquals(expected, actual);
        assertZaakorigineelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakorigineelAllUpdatablePropertiesEquals(Zaakorigineel expected, Zaakorigineel actual) {
        assertZaakorigineelUpdatableFieldsEquals(expected, actual);
        assertZaakorigineelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakorigineelAutoGeneratedPropertiesEquals(Zaakorigineel expected, Zaakorigineel actual) {
        assertThat(expected)
            .as("Verify Zaakorigineel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakorigineelUpdatableFieldsEquals(Zaakorigineel expected, Zaakorigineel actual) {
        assertThat(expected)
            .as("Verify Zaakorigineel relevant properties")
            .satisfies(e -> assertThat(e.getAnderzaakobject()).as("check anderzaakobject").isEqualTo(actual.getAnderzaakobject()))
            .satisfies(e -> assertThat(e.getArchiefnominatie()).as("check archiefnominatie").isEqualTo(actual.getArchiefnominatie()))
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(e -> assertThat(e.getDatumeindegepland()).as("check datumeindegepland").isEqualTo(actual.getDatumeindegepland()))
            .satisfies(
                e ->
                    assertThat(e.getDatumeindeuiterlijkeafdoening())
                        .as("check datumeindeuiterlijkeafdoening")
                        .isEqualTo(actual.getDatumeindeuiterlijkeafdoening())
            )
            .satisfies(
                e -> assertThat(e.getDatumlaatstebetaling()).as("check datumlaatstebetaling").isEqualTo(actual.getDatumlaatstebetaling())
            )
            .satisfies(e -> assertThat(e.getDatumpublicatie()).as("check datumpublicatie").isEqualTo(actual.getDatumpublicatie()))
            .satisfies(e -> assertThat(e.getDatumregistratie()).as("check datumregistratie").isEqualTo(actual.getDatumregistratie()))
            .satisfies(e -> assertThat(e.getDatumstart()).as("check datumstart").isEqualTo(actual.getDatumstart()))
            .satisfies(
                e ->
                    assertThat(e.getDatumvernietigingdossier())
                        .as("check datumvernietigingdossier")
                        .isEqualTo(actual.getDatumvernietigingdossier())
            )
            .satisfies(e -> assertThat(e.getIndicatiebetaling()).as("check indicatiebetaling").isEqualTo(actual.getIndicatiebetaling()))
            .satisfies(e -> assertThat(e.getIndicatiedeelzaken()).as("check indicatiedeelzaken").isEqualTo(actual.getIndicatiedeelzaken()))
            .satisfies(e -> assertThat(e.getKenmerk()).as("check kenmerk").isEqualTo(actual.getKenmerk()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(
                e -> assertThat(e.getOmschrijvingresultaat()).as("check omschrijvingresultaat").isEqualTo(actual.getOmschrijvingresultaat())
            )
            .satisfies(e -> assertThat(e.getOpschorting()).as("check opschorting").isEqualTo(actual.getOpschorting()))
            .satisfies(e -> assertThat(e.getToelichting()).as("check toelichting").isEqualTo(actual.getToelichting()))
            .satisfies(
                e -> assertThat(e.getToelichtingresultaat()).as("check toelichtingresultaat").isEqualTo(actual.getToelichtingresultaat())
            )
            .satisfies(e -> assertThat(e.getVerlenging()).as("check verlenging").isEqualTo(actual.getVerlenging()))
            .satisfies(e -> assertThat(e.getZaakidentificatie()).as("check zaakidentificatie").isEqualTo(actual.getZaakidentificatie()))
            .satisfies(e -> assertThat(e.getZaakniveau()).as("check zaakniveau").isEqualTo(actual.getZaakniveau()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertZaakorigineelUpdatableRelationshipsEquals(Zaakorigineel expected, Zaakorigineel actual) {}
}
