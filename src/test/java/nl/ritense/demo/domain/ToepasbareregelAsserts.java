package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ToepasbareregelAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertToepasbareregelAllPropertiesEquals(Toepasbareregel expected, Toepasbareregel actual) {
        assertToepasbareregelAutoGeneratedPropertiesEquals(expected, actual);
        assertToepasbareregelAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertToepasbareregelAllUpdatablePropertiesEquals(Toepasbareregel expected, Toepasbareregel actual) {
        assertToepasbareregelUpdatableFieldsEquals(expected, actual);
        assertToepasbareregelUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertToepasbareregelAutoGeneratedPropertiesEquals(Toepasbareregel expected, Toepasbareregel actual) {
        assertThat(expected)
            .as("Verify Toepasbareregel auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertToepasbareregelUpdatableFieldsEquals(Toepasbareregel expected, Toepasbareregel actual) {
        assertThat(expected)
            .as("Verify Toepasbareregel relevant properties")
            .satisfies(
                e -> assertThat(e.getDatumbegingeldigheid()).as("check datumbegingeldigheid").isEqualTo(actual.getDatumbegingeldigheid())
            )
            .satisfies(
                e -> assertThat(e.getDatumeindegeldigheid()).as("check datumeindegeldigheid").isEqualTo(actual.getDatumeindegeldigheid())
            )
            .satisfies(e -> assertThat(e.getDomein()).as("check domein").isEqualTo(actual.getDomein()))
            .satisfies(e -> assertThat(e.getNaam()).as("check naam").isEqualTo(actual.getNaam()))
            .satisfies(e -> assertThat(e.getOmschrijving()).as("check omschrijving").isEqualTo(actual.getOmschrijving()))
            .satisfies(e -> assertThat(e.getSoortaansluitpunt()).as("check soortaansluitpunt").isEqualTo(actual.getSoortaansluitpunt()))
            .satisfies(e -> assertThat(e.getToestemming()).as("check toestemming").isEqualTo(actual.getToestemming()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertToepasbareregelUpdatableRelationshipsEquals(Toepasbareregel expected, Toepasbareregel actual) {}
}
