package nl.ritense.demo.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class NummeraanduidingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNummeraanduidingAllPropertiesEquals(Nummeraanduiding expected, Nummeraanduiding actual) {
        assertNummeraanduidingAutoGeneratedPropertiesEquals(expected, actual);
        assertNummeraanduidingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNummeraanduidingAllUpdatablePropertiesEquals(Nummeraanduiding expected, Nummeraanduiding actual) {
        assertNummeraanduidingUpdatableFieldsEquals(expected, actual);
        assertNummeraanduidingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNummeraanduidingAutoGeneratedPropertiesEquals(Nummeraanduiding expected, Nummeraanduiding actual) {
        assertThat(expected)
            .as("Verify Nummeraanduiding auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNummeraanduidingUpdatableFieldsEquals(Nummeraanduiding expected, Nummeraanduiding actual) {
        assertThat(expected)
            .as("Verify Nummeraanduiding relevant properties")
            .satisfies(
                e -> assertThat(e.getDatumbegingeldigheid()).as("check datumbegingeldigheid").isEqualTo(actual.getDatumbegingeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumeinde()).as("check datumeinde").isEqualTo(actual.getDatumeinde()))
            .satisfies(
                e -> assertThat(e.getDatumeindegeldigheid()).as("check datumeindegeldigheid").isEqualTo(actual.getDatumeindegeldigheid())
            )
            .satisfies(e -> assertThat(e.getDatumingang()).as("check datumingang").isEqualTo(actual.getDatumingang()))
            .satisfies(e -> assertThat(e.getGeconstateerd()).as("check geconstateerd").isEqualTo(actual.getGeconstateerd()))
            .satisfies(e -> assertThat(e.getGeometrie()).as("check geometrie").isEqualTo(actual.getGeometrie()))
            .satisfies(e -> assertThat(e.getHuisletter()).as("check huisletter").isEqualTo(actual.getHuisletter()))
            .satisfies(e -> assertThat(e.getHuisnummer()).as("check huisnummer").isEqualTo(actual.getHuisnummer()))
            .satisfies(
                e -> assertThat(e.getHuisnummertoevoeging()).as("check huisnummertoevoeging").isEqualTo(actual.getHuisnummertoevoeging())
            )
            .satisfies(e -> assertThat(e.getIdentificatie()).as("check identificatie").isEqualTo(actual.getIdentificatie()))
            .satisfies(e -> assertThat(e.getInonderzoek()).as("check inonderzoek").isEqualTo(actual.getInonderzoek()))
            .satisfies(e -> assertThat(e.getPostcode()).as("check postcode").isEqualTo(actual.getPostcode()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getTypeadresseerbaarobject())
                        .as("check typeadresseerbaarobject")
                        .isEqualTo(actual.getTypeadresseerbaarobject())
            )
            .satisfies(e -> assertThat(e.getVersie()).as("check versie").isEqualTo(actual.getVersie()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertNummeraanduidingUpdatableRelationshipsEquals(Nummeraanduiding expected, Nummeraanduiding actual) {
        assertThat(expected)
            .as("Verify Nummeraanduiding relationships")
            .satisfies(e -> assertThat(e.getLigtinWoonplaats()).as("check ligtinWoonplaats").isEqualTo(actual.getLigtinWoonplaats()))
            .satisfies(e -> assertThat(e.getLigtinBuurt()).as("check ligtinBuurt").isEqualTo(actual.getLigtinBuurt()))
            .satisfies(e -> assertThat(e.getLigtinGebieds()).as("check ligtinGebieds").isEqualTo(actual.getLigtinGebieds()));
    }
}
